import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BOOL_FILTER, EmployeeMetadata, SORT_ORDER } from "./base.scailo_pb.js";
/**
 *
 * Describes the lifecycle status of each note
 *
 * @generated from enum Scailo.NOTE_LIFECYCLE
 */
export declare enum NOTE_LIFECYCLE {
    /**
     * Used only in filters
     *
     * @generated from enum value: NOTE_LIFECYCLE_ANY_UNSPECIFIED = 0;
     */
    NOTE_LIFECYCLE_ANY_UNSPECIFIED = 0,
    /**
     * Denotes that the note is open
     *
     * @generated from enum value: NOTE_LIFECYCLE_OPEN = 1;
     */
    NOTE_LIFECYCLE_OPEN = 1,
    /**
     * Denotes that the note has completed
     *
     * @generated from enum value: NOTE_LIFECYCLE_COMPLETED = 2;
     */
    NOTE_LIFECYCLE_COMPLETED = 2,
    /**
     * Denotes that the note has been cancelled
     *
     * @generated from enum value: NOTE_LIFECYCLE_CANCELLED = 3;
     */
    NOTE_LIFECYCLE_CANCELLED = 3
}
/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.NOTE_SORT_KEY
 */
export declare enum NOTE_SORT_KEY {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: NOTE_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    NOTE_SORT_KEY_ID_UNSPECIFIED = 0,
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: NOTE_SORT_KEY_CREATED_AT = 1;
     */
    NOTE_SORT_KEY_CREATED_AT = 1,
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: NOTE_SORT_KEY_MODIFIED_AT = 2;
     */
    NOTE_SORT_KEY_MODIFIED_AT = 2,
    /**
     * Fetch ordered results by the approver's completed on timestamp
     *
     * @generated from enum value: NOTE_SORT_KEY_COMPLETED_ON = 6;
     */
    NOTE_SORT_KEY_COMPLETED_ON = 6,
    /**
     * Fetch ordered results by the title
     *
     * @generated from enum value: NOTE_SORT_KEY_TITLE = 10;
     */
    NOTE_SORT_KEY_TITLE = 10
}
/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being an note lifecycle status
 *
 * @generated from message Scailo.LogbookLogNoteLC
 */
export declare class LogbookLogNoteLC extends Message<LogbookLogNoteLC> {
    /**
     * ID of the resource
     *
     * @generated from field: uint64 id = 1;
     */
    id: bigint;
    /**
     * Stores if the resource is active
     *
     * @generated from field: bool is_active = 2;
     */
    isActive: boolean;
    /**
     * Stores the timestamp of when this resource was created
     *
     * @generated from field: uint64 timestamp = 3;
     */
    timestamp: bigint;
    /**
     * The UUID of the resource
     *
     * @generated from field: string ref_uuid = 10;
     */
    refUuid: string;
    /**
     * The operation that was performed
     *
     * @generated from field: Scailo.NOTE_LIFECYCLE operation = 11;
     */
    operation: NOTE_LIFECYCLE;
    /**
     * The username of the user who performed this operation
     *
     * @generated from field: string username = 12;
     */
    username: string;
    /**
     * The name of the person who made this entry
     *
     * @generated from field: string name = 13;
     */
    name: string;
    /**
     * The ID of the user who made this entry
     *
     * @generated from field: uint64 user_id = 14;
     */
    userId: bigint;
    /**
     * The comment generated by the application
     *
     * @generated from field: string app_comment = 15;
     */
    appComment: string;
    /**
     * The comment entered by the user
     *
     * @generated from field: string user_comment = 16;
     */
    userComment: string;
    constructor(data?: PartialMessage<LogbookLogNoteLC>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.LogbookLogNoteLC";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogNoteLC;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogNoteLC;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogNoteLC;
    static equals(a: LogbookLogNoteLC | PlainMessage<LogbookLogNoteLC> | undefined, b: LogbookLogNoteLC | PlainMessage<LogbookLogNoteLC> | undefined): boolean;
}
/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.NotesServiceCreateRequest
 */
export declare class NotesServiceCreateRequest extends Message<NotesServiceCreateRequest> {
    /**
     * Stores a globally unique entity UUID. This will be set at the organization level
     *
     * @generated from field: string entity_uuid = 1;
     */
    entityUuid: string;
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 2;
     */
    userComment: string;
    /**
     * The associated vault folder ID
     *
     * @generated from field: uint64 vault_folder_id = 8;
     */
    vaultFolderId: bigint;
    /**
     * The associated project ID
     *
     * @generated from field: uint64 project_id = 9;
     */
    projectId: bigint;
    /**
     * The title of the note
     *
     * @generated from field: string title = 10;
     */
    title: string;
    /**
     * The description of the note
     *
     * @generated from field: string description = 11;
     */
    description: string;
    /**
     * The associated employee ID
     *
     * @generated from field: uint64 employee_id = 20;
     */
    employeeId: bigint;
    /**
     * The associated activity ID
     *
     * @generated from field: uint64 activity_id = 21;
     */
    activityId: bigint;
    /**
     * The associated activity status ID
     *
     * @generated from field: uint64 activity_status_id = 22;
     */
    activityStatusId: bigint;
    constructor(data?: PartialMessage<NotesServiceCreateRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.NotesServiceCreateRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceCreateRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceCreateRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceCreateRequest;
    static equals(a: NotesServiceCreateRequest | PlainMessage<NotesServiceCreateRequest> | undefined, b: NotesServiceCreateRequest | PlainMessage<NotesServiceCreateRequest> | undefined): boolean;
}
/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.NotesServiceUpdateRequest
 */
export declare class NotesServiceUpdateRequest extends Message<NotesServiceUpdateRequest> {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment: string;
    /**
     * The ID of the record that needs to be updated
     *
     * @generated from field: uint64 id = 2;
     */
    id: bigint;
    /**
     * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
     *
     * @generated from field: bool notify_users = 3;
     */
    notifyUsers: boolean;
    /**
     * The associated vault folder ID
     *
     * @generated from field: uint64 vault_folder_id = 8;
     */
    vaultFolderId: bigint;
    /**
     * The associated project ID
     *
     * @generated from field: uint64 project_id = 9;
     */
    projectId: bigint;
    /**
     * The title of the note
     *
     * @generated from field: string title = 10;
     */
    title: string;
    /**
     * The description of the note
     *
     * @generated from field: string description = 11;
     */
    description: string;
    /**
     * The associated activity ID
     *
     * @generated from field: uint64 activity_id = 21;
     */
    activityId: bigint;
    /**
     * The associated activity status ID
     *
     * @generated from field: uint64 activity_status_id = 22;
     */
    activityStatusId: bigint;
    constructor(data?: PartialMessage<NotesServiceUpdateRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.NotesServiceUpdateRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceUpdateRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceUpdateRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceUpdateRequest;
    static equals(a: NotesServiceUpdateRequest | PlainMessage<NotesServiceUpdateRequest> | undefined, b: NotesServiceUpdateRequest | PlainMessage<NotesServiceUpdateRequest> | undefined): boolean;
}
/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.Note
 */
export declare class Note extends Message<Note> {
    /**
     * Stores a globally unique entity UUID. This will be set at the organization level
     *
     * @generated from field: string entity_uuid = 1;
     */
    entityUuid: string;
    /**
     * Stores the metadata of this note
     *
     * @generated from field: Scailo.EmployeeMetadata metadata = 2;
     */
    metadata?: EmployeeMetadata;
    /**
     * The status of this note
     *
     * @generated from field: Scailo.NOTE_LIFECYCLE status = 4;
     */
    status: NOTE_LIFECYCLE;
    /**
     * Stores the logs of every operation performed on this note
     *
     * @generated from field: repeated Scailo.LogbookLogNoteLC logs = 5;
     */
    logs: LogbookLogNoteLC[];
    /**
     * The timestamp of when this note was marked as completed
     *
     * @generated from field: uint64 completed_on = 6;
     */
    completedOn: bigint;
    /**
     * The associated vault folder ID
     *
     * @generated from field: uint64 vault_folder_id = 8;
     */
    vaultFolderId: bigint;
    /**
     * The associated project ID
     *
     * @generated from field: uint64 project_id = 9;
     */
    projectId: bigint;
    /**
     * The title of the note
     *
     * @generated from field: string title = 10;
     */
    title: string;
    /**
     * The description of the note
     *
     * @generated from field: string description = 11;
     */
    description: string;
    /**
     * The associated employee ID
     *
     * @generated from field: uint64 employee_id = 20;
     */
    employeeId: bigint;
    /**
     * The associated activity ID
     *
     * @generated from field: uint64 activity_id = 21;
     */
    activityId: bigint;
    /**
     * The associated activity status ID
     *
     * @generated from field: uint64 activity_status_id = 22;
     */
    activityStatusId: bigint;
    constructor(data?: PartialMessage<Note>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.Note";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Note;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Note;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Note;
    static equals(a: Note | PlainMessage<Note> | undefined, b: Note | PlainMessage<Note> | undefined): boolean;
}
/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.NotesList
 */
export declare class NotesList extends Message<NotesList> {
    /**
     * List of records
     *
     * @generated from field: repeated Scailo.Note list = 1;
     */
    list: Note[];
    constructor(data?: PartialMessage<NotesList>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.NotesList";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesList;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesList;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesList;
    static equals(a: NotesList | PlainMessage<NotesList> | undefined, b: NotesList | PlainMessage<NotesList> | undefined): boolean;
}
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.NotesServicePaginationReq
 */
export declare class NotesServicePaginationReq extends Message<NotesServicePaginationReq> {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: Scailo.BOOL_FILTER is_active = 1;
     */
    isActive: BOOL_FILTER;
    /**
     * The number of records that need to be sent in the response
     *
     * @generated from field: int64 count = 2;
     */
    count: bigint;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: uint64 offset = 3;
     */
    offset: bigint;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: Scailo.SORT_ORDER sort_order = 4;
     */
    sortOrder: SORT_ORDER;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: Scailo.NOTE_SORT_KEY sort_key = 5;
     */
    sortKey: NOTE_SORT_KEY;
    /**
     * The status of this note
     *
     * @generated from field: Scailo.NOTE_LIFECYCLE status = 6;
     */
    status: NOTE_LIFECYCLE;
    constructor(data?: PartialMessage<NotesServicePaginationReq>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.NotesServicePaginationReq";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServicePaginationReq;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServicePaginationReq;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServicePaginationReq;
    static equals(a: NotesServicePaginationReq | PlainMessage<NotesServicePaginationReq> | undefined, b: NotesServicePaginationReq | PlainMessage<NotesServicePaginationReq> | undefined): boolean;
}
/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.NotesServicePaginationResponse
 */
export declare class NotesServicePaginationResponse extends Message<NotesServicePaginationResponse> {
    /**
     * The number of records in this payload
     *
     * @generated from field: uint64 count = 1;
     */
    count: bigint;
    /**
     * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
     *
     * @generated from field: uint64 offset = 2;
     */
    offset: bigint;
    /**
     * The total number of records that are available
     *
     * @generated from field: uint64 total = 3;
     */
    total: bigint;
    /**
     * The list of records
     *
     * @generated from field: repeated Scailo.Note payload = 4;
     */
    payload: Note[];
    constructor(data?: PartialMessage<NotesServicePaginationResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.NotesServicePaginationResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServicePaginationResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServicePaginationResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServicePaginationResponse;
    static equals(a: NotesServicePaginationResponse | PlainMessage<NotesServicePaginationResponse> | undefined, b: NotesServicePaginationResponse | PlainMessage<NotesServicePaginationResponse> | undefined): boolean;
}
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.NotesServiceFilterReq
 */
export declare class NotesServiceFilterReq extends Message<NotesServiceFilterReq> {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: Scailo.BOOL_FILTER is_active = 1;
     */
    isActive: BOOL_FILTER;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count: bigint;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: uint64 offset = 3;
     */
    offset: bigint;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: Scailo.SORT_ORDER sort_order = 4;
     */
    sortOrder: SORT_ORDER;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: Scailo.NOTE_SORT_KEY sort_key = 5;
     */
    sortKey: NOTE_SORT_KEY;
    /**
     * The minimum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: uint64 creation_timestamp_start = 101;
     */
    creationTimestampStart: bigint;
    /**
     * The maximum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: uint64 creation_timestamp_end = 102;
     */
    creationTimestampEnd: bigint;
    /**
     * The minimum timestamp that needs to be considered to filter by modification
     *
     * @generated from field: uint64 modification_timestamp_start = 103;
     */
    modificationTimestampStart: bigint;
    /**
     * The maximum timestamp that needs to be considered to filter by modification
     *
     * @generated from field: uint64 modification_timestamp_end = 104;
     */
    modificationTimestampEnd: bigint;
    /**
     * The entity UUID that is to be used to filter records
     *
     * @generated from field: string entity_uuid = 8;
     */
    entityUuid: string;
    /**
     * The status of this note
     *
     * @generated from field: Scailo.NOTE_LIFECYCLE status = 10;
     */
    status: NOTE_LIFECYCLE;
    /**
     * The start range of completed timestamp
     *
     * @generated from field: uint64 completed_on_start = 15;
     */
    completedOnStart: bigint;
    /**
     * The end range of completed timestamp
     *
     * @generated from field: uint64 completed_on_end = 16;
     */
    completedOnEnd: bigint;
    /**
     * The title of the note
     *
     * @generated from field: string title = 20;
     */
    title: string;
    /**
     * The ID of the associated project
     *
     * @generated from field: uint64 project_id = 25;
     */
    projectId: bigint;
    /**
     * The ID of the employee
     *
     * @generated from field: uint64 employee_id = 26;
     */
    employeeId: bigint;
    /**
     * Filter by the associated activity ID
     *
     * @generated from field: uint64 activity_id = 27;
     */
    activityId: bigint;
    /**
     * Filter by the associated activity status ID
     *
     * @generated from field: uint64 activity_status_id = 28;
     */
    activityStatusId: bigint;
    constructor(data?: PartialMessage<NotesServiceFilterReq>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.NotesServiceFilterReq";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceFilterReq;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceFilterReq;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceFilterReq;
    static equals(a: NotesServiceFilterReq | PlainMessage<NotesServiceFilterReq> | undefined, b: NotesServiceFilterReq | PlainMessage<NotesServiceFilterReq> | undefined): boolean;
}
/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.NotesServiceCountReq
 */
export declare class NotesServiceCountReq extends Message<NotesServiceCountReq> {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: Scailo.BOOL_FILTER is_active = 1;
     */
    isActive: BOOL_FILTER;
    /**
     * The minimum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: uint64 creation_timestamp_start = 101;
     */
    creationTimestampStart: bigint;
    /**
     * The maximum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: uint64 creation_timestamp_end = 102;
     */
    creationTimestampEnd: bigint;
    /**
     * The minimum timestamp that needs to be considered to filter by modification
     *
     * @generated from field: uint64 modification_timestamp_start = 103;
     */
    modificationTimestampStart: bigint;
    /**
     * The maximum timestamp that needs to be considered to filter by modification
     *
     * @generated from field: uint64 modification_timestamp_end = 104;
     */
    modificationTimestampEnd: bigint;
    /**
     * The entity UUID that is to be used to filter records
     *
     * @generated from field: string entity_uuid = 8;
     */
    entityUuid: string;
    /**
     * The status of this note
     *
     * @generated from field: Scailo.NOTE_LIFECYCLE status = 10;
     */
    status: NOTE_LIFECYCLE;
    /**
     * The start range of completed timestamp
     *
     * @generated from field: uint64 completed_on_start = 15;
     */
    completedOnStart: bigint;
    /**
     * The end range of completed timestamp
     *
     * @generated from field: uint64 completed_on_end = 16;
     */
    completedOnEnd: bigint;
    /**
     * The title of the note
     *
     * @generated from field: string title = 20;
     */
    title: string;
    /**
     * The ID of the associated project
     *
     * @generated from field: uint64 project_id = 25;
     */
    projectId: bigint;
    /**
     * The ID of the employee
     *
     * @generated from field: uint64 employee_id = 26;
     */
    employeeId: bigint;
    /**
     * Filter by the associated activity ID
     *
     * @generated from field: uint64 activity_id = 27;
     */
    activityId: bigint;
    /**
     * Filter by the associated activity status ID
     *
     * @generated from field: uint64 activity_status_id = 28;
     */
    activityStatusId: bigint;
    constructor(data?: PartialMessage<NotesServiceCountReq>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.NotesServiceCountReq";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceCountReq;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceCountReq;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceCountReq;
    static equals(a: NotesServiceCountReq | PlainMessage<NotesServiceCountReq> | undefined, b: NotesServiceCountReq | PlainMessage<NotesServiceCountReq> | undefined): boolean;
}
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.NotesServiceSearchAllReq
 */
export declare class NotesServiceSearchAllReq extends Message<NotesServiceSearchAllReq> {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: Scailo.BOOL_FILTER is_active = 1;
     */
    isActive: BOOL_FILTER;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count: bigint;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: uint64 offset = 3;
     */
    offset: bigint;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: Scailo.SORT_ORDER sort_order = 4;
     */
    sortOrder: SORT_ORDER;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: Scailo.NOTE_SORT_KEY sort_key = 5;
     */
    sortKey: NOTE_SORT_KEY;
    /**
     * The entity UUID that is to be used to filter records
     *
     * @generated from field: string entity_uuid = 6;
     */
    entityUuid: string;
    /**
     * Limit the search space to the given status
     *
     * @generated from field: Scailo.NOTE_LIFECYCLE status = 10;
     */
    status: NOTE_LIFECYCLE;
    /**
     * Describes the key with which the search operation needs to be performed
     *
     * @generated from field: string search_key = 11;
     */
    searchKey: string;
    /**
     * The ID of the associated project
     *
     * @generated from field: uint64 project_id = 25;
     */
    projectId: bigint;
    /**
     * The ID of the employee
     *
     * @generated from field: uint64 employee_id = 26;
     */
    employeeId: bigint;
    /**
     * Filter by the associated activity ID
     *
     * @generated from field: uint64 activity_id = 27;
     */
    activityId: bigint;
    /**
     * Filter by the associated activity status ID
     *
     * @generated from field: uint64 activity_status_id = 28;
     */
    activityStatusId: bigint;
    constructor(data?: PartialMessage<NotesServiceSearchAllReq>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "Scailo.NotesServiceSearchAllReq";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceSearchAllReq;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceSearchAllReq;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceSearchAllReq;
    static equals(a: NotesServiceSearchAllReq | PlainMessage<NotesServiceSearchAllReq> | undefined, b: NotesServiceSearchAllReq | PlainMessage<NotesServiceSearchAllReq> | undefined): boolean;
}
//# sourceMappingURL=notes.scailo_pb.d.ts.map