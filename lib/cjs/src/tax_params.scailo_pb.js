"use strict";
// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file tax_params.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaxParamsServiceSearchAllReq = exports.TaxParamsServiceCountReq = exports.TaxParamsServiceFilterReq = exports.TaxParamsServicePaginationResponse = exports.TaxParamsServicePaginationReq = exports.TaxParamsList = exports.TaxParam = exports.TaxParamsServiceUpdateRequest = exports.TaxParamsServiceCreateRequest = exports.TAX_PARAM_SORT_KEY = exports.TAX_PARAM_CATEGORY = exports.TAX_PARAM_VALUE_TYPE = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_scailo_pb_js_1 = require("./base.scailo_pb.js");
/**
 *
 * Describes the available value types for a tax param
 *
 * @generated from enum Scailo.TAX_PARAM_VALUE_TYPE
 */
var TAX_PARAM_VALUE_TYPE;
(function (TAX_PARAM_VALUE_TYPE) {
    /**
     * The default value type, and is useful only for filter and search queries when the value type needs to be disregarded
     *
     * @generated from enum value: TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED = 0;
     */
    TAX_PARAM_VALUE_TYPE[TAX_PARAM_VALUE_TYPE["TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED"] = 0] = "TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED";
    /**
     * Denotes that the value type is percentage (tax is calculated as a percentage over the base value)
     *
     * @generated from enum value: TAX_PARAM_VALUE_TYPE_PERCENTAGE = 1;
     */
    TAX_PARAM_VALUE_TYPE[TAX_PARAM_VALUE_TYPE["TAX_PARAM_VALUE_TYPE_PERCENTAGE"] = 1] = "TAX_PARAM_VALUE_TYPE_PERCENTAGE";
    /**
     * Denotes that the value type is fixed (tax is a fixed value)
     *
     * @generated from enum value: TAX_PARAM_VALUE_TYPE_FIXED = 2;
     */
    TAX_PARAM_VALUE_TYPE[TAX_PARAM_VALUE_TYPE["TAX_PARAM_VALUE_TYPE_FIXED"] = 2] = "TAX_PARAM_VALUE_TYPE_FIXED";
})(TAX_PARAM_VALUE_TYPE || (exports.TAX_PARAM_VALUE_TYPE = TAX_PARAM_VALUE_TYPE = {}));
// Retrieve enum metadata with: proto3.getEnumType(TAX_PARAM_VALUE_TYPE)
protobuf_1.proto3.util.setEnumType(TAX_PARAM_VALUE_TYPE, "Scailo.TAX_PARAM_VALUE_TYPE", [
    { no: 0, name: "TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED" },
    { no: 1, name: "TAX_PARAM_VALUE_TYPE_PERCENTAGE" },
    { no: 2, name: "TAX_PARAM_VALUE_TYPE_FIXED" },
]);
/**
 *
 * Describes the available categories for a tax param
 *
 * @generated from enum Scailo.TAX_PARAM_CATEGORY
 */
var TAX_PARAM_CATEGORY;
(function (TAX_PARAM_CATEGORY) {
    /**
     * The default category, and is useful only for filter and search queries when the category needs to be disregarded
     *
     * @generated from enum value: TAX_PARAM_CATEGORY_ANY_UNSPECIFIED = 0;
     */
    TAX_PARAM_CATEGORY[TAX_PARAM_CATEGORY["TAX_PARAM_CATEGORY_ANY_UNSPECIFIED"] = 0] = "TAX_PARAM_CATEGORY_ANY_UNSPECIFIED";
    /**
     * Denotes that the tax param belongs to the general category (applicable on purchase and sales)
     *
     * @generated from enum value: TAX_PARAM_CATEGORY_GENERAL = 1;
     */
    TAX_PARAM_CATEGORY[TAX_PARAM_CATEGORY["TAX_PARAM_CATEGORY_GENERAL"] = 1] = "TAX_PARAM_CATEGORY_GENERAL";
    /**
     * Denotes that the tax param belongs to the payroll category (applicable when computing payroll)
     *
     * @generated from enum value: TAX_PARAM_CATEGORY_PAYROLL = 2;
     */
    TAX_PARAM_CATEGORY[TAX_PARAM_CATEGORY["TAX_PARAM_CATEGORY_PAYROLL"] = 2] = "TAX_PARAM_CATEGORY_PAYROLL";
})(TAX_PARAM_CATEGORY || (exports.TAX_PARAM_CATEGORY = TAX_PARAM_CATEGORY = {}));
// Retrieve enum metadata with: proto3.getEnumType(TAX_PARAM_CATEGORY)
protobuf_1.proto3.util.setEnumType(TAX_PARAM_CATEGORY, "Scailo.TAX_PARAM_CATEGORY", [
    { no: 0, name: "TAX_PARAM_CATEGORY_ANY_UNSPECIFIED" },
    { no: 1, name: "TAX_PARAM_CATEGORY_GENERAL" },
    { no: 2, name: "TAX_PARAM_CATEGORY_PAYROLL" },
]);
/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.TAX_PARAM_SORT_KEY
 */
var TAX_PARAM_SORT_KEY;
(function (TAX_PARAM_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: TAX_PARAM_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    TAX_PARAM_SORT_KEY[TAX_PARAM_SORT_KEY["TAX_PARAM_SORT_KEY_ID_UNSPECIFIED"] = 0] = "TAX_PARAM_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: TAX_PARAM_SORT_KEY_CREATED_AT = 1;
     */
    TAX_PARAM_SORT_KEY[TAX_PARAM_SORT_KEY["TAX_PARAM_SORT_KEY_CREATED_AT"] = 1] = "TAX_PARAM_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: TAX_PARAM_SORT_KEY_MODIFIED_AT = 2;
     */
    TAX_PARAM_SORT_KEY[TAX_PARAM_SORT_KEY["TAX_PARAM_SORT_KEY_MODIFIED_AT"] = 2] = "TAX_PARAM_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by the approved on timestamp
     *
     * @generated from enum value: TAX_PARAM_SORT_KEY_APPROVED_ON = 3;
     */
    TAX_PARAM_SORT_KEY[TAX_PARAM_SORT_KEY["TAX_PARAM_SORT_KEY_APPROVED_ON"] = 3] = "TAX_PARAM_SORT_KEY_APPROVED_ON";
    /**
     * Fetch ordered results by the approved by field
     *
     * @generated from enum value: TAX_PARAM_SORT_KEY_APPROVED_BY = 4;
     */
    TAX_PARAM_SORT_KEY[TAX_PARAM_SORT_KEY["TAX_PARAM_SORT_KEY_APPROVED_BY"] = 4] = "TAX_PARAM_SORT_KEY_APPROVED_BY";
    /**
     * Fetch ordered results by the approver's role ID
     *
     * @generated from enum value: TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID = 5;
     */
    TAX_PARAM_SORT_KEY[TAX_PARAM_SORT_KEY["TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID"] = 5] = "TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID";
    /**
     * Fetch ordered results by the name
     *
     * @generated from enum value: TAX_PARAM_SORT_KEY_NAME = 10;
     */
    TAX_PARAM_SORT_KEY[TAX_PARAM_SORT_KEY["TAX_PARAM_SORT_KEY_NAME"] = 10] = "TAX_PARAM_SORT_KEY_NAME";
    /**
     * Fetch ordered results by the tax rate percentage
     *
     * @generated from enum value: TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE = 11;
     */
    TAX_PARAM_SORT_KEY[TAX_PARAM_SORT_KEY["TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE"] = 11] = "TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE";
    /**
     * Fetch ordered results by the code
     *
     * @generated from enum value: TAX_PARAM_SORT_KEY_CODE = 21;
     */
    TAX_PARAM_SORT_KEY[TAX_PARAM_SORT_KEY["TAX_PARAM_SORT_KEY_CODE"] = 21] = "TAX_PARAM_SORT_KEY_CODE";
})(TAX_PARAM_SORT_KEY || (exports.TAX_PARAM_SORT_KEY = TAX_PARAM_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(TAX_PARAM_SORT_KEY)
protobuf_1.proto3.util.setEnumType(TAX_PARAM_SORT_KEY, "Scailo.TAX_PARAM_SORT_KEY", [
    { no: 0, name: "TAX_PARAM_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "TAX_PARAM_SORT_KEY_CREATED_AT" },
    { no: 2, name: "TAX_PARAM_SORT_KEY_MODIFIED_AT" },
    { no: 3, name: "TAX_PARAM_SORT_KEY_APPROVED_ON" },
    { no: 4, name: "TAX_PARAM_SORT_KEY_APPROVED_BY" },
    { no: 5, name: "TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID" },
    { no: 10, name: "TAX_PARAM_SORT_KEY_NAME" },
    { no: 11, name: "TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE" },
    { no: 21, name: "TAX_PARAM_SORT_KEY_CODE" },
]);
/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.TaxParamsServiceCreateRequest
 */
class TaxParamsServiceCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * TaxParams a globally unique entity UUID. This will be set at the organization level
         *
         * @generated from field: string entity_uuid = 1;
         */
        this.entityUuid = "";
        /**
         * TaxParams any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 2;
         */
        this.userComment = "";
        /**
         * The name of the tax param
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * The unique code by which the tax param is classified
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        /**
         * The type of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 11;
         */
        this.valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;
        /**
         * The fixed amount of tax (applicable only if value type is fixed)
         *
         * @generated from field: uint64 tax_fixed_amount = 12;
         */
        this.taxFixedAmount = protobuf_1.protoInt64.zero;
        /**
         * The percentage of tax (applicable only if value type is percentage)
         *
         * @generated from field: uint64 tax_rate_percentage = 13;
         */
        this.taxRatePercentage = protobuf_1.protoInt64.zero;
        /**
         * The divisor that is defined in order to normalize tax rate percentage
         *
         * @generated from field: uint64 divisor = 14;
         */
        this.divisor = protobuf_1.protoInt64.zero;
        /**
         * The input credit percentage that is applicable
         *
         * @generated from field: uint64 input_credit_percentage = 15;
         */
        this.inputCreditPercentage = protobuf_1.protoInt64.zero;
        /**
         * The minimum amount of applicable tax (will be disregarded if value is -100)
         *
         * @generated from field: int64 min_amount = 16;
         */
        this.minAmount = protobuf_1.protoInt64.zero;
        /**
         * The maximum amount of applicable tax (will be disregarded if value is -100)
         *
         * @generated from field: int64 max_amount = 17;
         */
        this.maxAmount = protobuf_1.protoInt64.zero;
        /**
         * The category of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 18;
         */
        this.category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;
        /**
         * The description of the tax param
         *
         * @generated from field: string description = 20;
         */
        this.description = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TaxParamsServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaxParamsServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaxParamsServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaxParamsServiceCreateRequest, a, b);
    }
}
exports.TaxParamsServiceCreateRequest = TaxParamsServiceCreateRequest;
TaxParamsServiceCreateRequest.runtime = protobuf_1.proto3;
TaxParamsServiceCreateRequest.typeName = "Scailo.TaxParamsServiceCreateRequest";
TaxParamsServiceCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "value_type", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 12, name: "tax_fixed_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "tax_rate_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "divisor", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "input_credit_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "min_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "max_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "category", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_CATEGORY) },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.TaxParamsServiceUpdateRequest
 */
class TaxParamsServiceUpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * TaxParams any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The ID of the record that needs to be updated
         *
         * @generated from field: uint64 id = 2;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * Optional boolean value that denotes if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
         *
         * @generated from field: bool notify_users = 3;
         */
        this.notifyUsers = false;
        /**
         * The name of the tax param
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * The unique code by which the tax param is classified
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        /**
         * The description of the tax param
         *
         * @generated from field: string description = 20;
         */
        this.description = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TaxParamsServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaxParamsServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaxParamsServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaxParamsServiceUpdateRequest, a, b);
    }
}
exports.TaxParamsServiceUpdateRequest = TaxParamsServiceUpdateRequest;
TaxParamsServiceUpdateRequest.runtime = protobuf_1.proto3;
TaxParamsServiceUpdateRequest.typeName = "Scailo.TaxParamsServiceUpdateRequest";
TaxParamsServiceUpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.TaxParam
 */
class TaxParam extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * TaxParams a globally unique entity UUID. This will be set at the organization level
         *
         * @generated from field: string entity_uuid = 1;
         */
        this.entityUuid = "";
        /**
         * The status of this tax param
         *
         * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
         */
        this.status = base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;
        /**
         * TaxParams the logs of every operation performed on this tax param
         *
         * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
         */
        this.logs = [];
        /**
         * The name of the tax param
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * The unique code by which the tax param is classified
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        /**
         * The type of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 11;
         */
        this.valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;
        /**
         * The fixed amount of tax (applicable only if value type is fixed)
         *
         * @generated from field: uint64 tax_fixed_amount = 12;
         */
        this.taxFixedAmount = protobuf_1.protoInt64.zero;
        /**
         * The percentage of tax (applicable only if value type is percentage)
         *
         * @generated from field: uint64 tax_rate_percentage = 13;
         */
        this.taxRatePercentage = protobuf_1.protoInt64.zero;
        /**
         * The divisor that is defined in order to normalize tax rate percentage
         *
         * @generated from field: uint64 divisor = 14;
         */
        this.divisor = protobuf_1.protoInt64.zero;
        /**
         * The input credit percentage that is applicable
         *
         * @generated from field: uint64 input_credit_percentage = 15;
         */
        this.inputCreditPercentage = protobuf_1.protoInt64.zero;
        /**
         * The minimum amount of applicable tax (will be disregarded if value is -100)
         *
         * @generated from field: int64 min_amount = 16;
         */
        this.minAmount = protobuf_1.protoInt64.zero;
        /**
         * The maximum amount of applicable tax (will be disregarded if value is -100)
         *
         * @generated from field: int64 max_amount = 17;
         */
        this.maxAmount = protobuf_1.protoInt64.zero;
        /**
         * The category of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 18;
         */
        this.category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;
        /**
         * The description of the tax param
         *
         * @generated from field: string description = 20;
         */
        this.description = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TaxParam().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaxParam().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaxParam().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaxParam, a, b);
    }
}
exports.TaxParam = TaxParam;
TaxParam.runtime = protobuf_1.proto3;
TaxParam.typeName = "Scailo.TaxParam";
TaxParam.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: base_scailo_pb_js_1.EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: base_scailo_pb_js_1.ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: base_scailo_pb_js_1.LogbookLogConciseSLC, repeated: true },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "value_type", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 12, name: "tax_fixed_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "tax_rate_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "divisor", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "input_credit_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "min_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "max_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "category", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_CATEGORY) },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.TaxParamsList
 */
class TaxParamsList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of records
         *
         * @generated from field: repeated Scailo.TaxParam list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TaxParamsList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaxParamsList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaxParamsList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaxParamsList, a, b);
    }
}
exports.TaxParamsList = TaxParamsList;
TaxParamsList.runtime = protobuf_1.proto3;
TaxParamsList.typeName = "Scailo.TaxParamsList";
TaxParamsList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: TaxParam, repeated: true },
]);
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.TaxParamsServicePaginationReq
 */
class TaxParamsServicePaginationReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: Scailo.BOOL_FILTER is_active = 1;
         */
        this.isActive = base_scailo_pb_js_1.BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;
        /**
         * The number of records that need to be sent in the response
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: uint64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: Scailo.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_scailo_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: Scailo.TAX_PARAM_SORT_KEY sort_key = 5;
         */
        this.sortKey = TAX_PARAM_SORT_KEY.TAX_PARAM_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The status of this tax param
         *
         * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
         */
        this.status = base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TaxParamsServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaxParamsServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaxParamsServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaxParamsServicePaginationReq, a, b);
    }
}
exports.TaxParamsServicePaginationReq = TaxParamsServicePaginationReq;
TaxParamsServicePaginationReq.runtime = protobuf_1.proto3;
TaxParamsServicePaginationReq.typeName = "Scailo.TaxParamsServicePaginationReq";
TaxParamsServicePaginationReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS) },
]);
/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.TaxParamsServicePaginationResponse
 */
class TaxParamsServicePaginationResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of records in this payload
         *
         * @generated from field: uint64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
         *
         * @generated from field: uint64 offset = 2;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The total number of records that are available
         *
         * @generated from field: uint64 total = 3;
         */
        this.total = protobuf_1.protoInt64.zero;
        /**
         * The list of records
         *
         * @generated from field: repeated Scailo.TaxParam payload = 4;
         */
        this.payload = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TaxParamsServicePaginationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaxParamsServicePaginationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaxParamsServicePaginationResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaxParamsServicePaginationResponse, a, b);
    }
}
exports.TaxParamsServicePaginationResponse = TaxParamsServicePaginationResponse;
TaxParamsServicePaginationResponse.runtime = protobuf_1.proto3;
TaxParamsServicePaginationResponse.typeName = "Scailo.TaxParamsServicePaginationResponse";
TaxParamsServicePaginationResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: TaxParam, repeated: true },
]);
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.TaxParamsServiceFilterReq
 */
class TaxParamsServiceFilterReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: Scailo.BOOL_FILTER is_active = 1;
         */
        this.isActive = base_scailo_pb_js_1.BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: uint64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: Scailo.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_scailo_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: Scailo.TAX_PARAM_SORT_KEY sort_key = 5;
         */
        this.sortKey = TAX_PARAM_SORT_KEY.TAX_PARAM_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The minimum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: uint64 creation_timestamp_start = 101;
         */
        this.creationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: uint64 creation_timestamp_end = 102;
         */
        this.creationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * The minimum timestamp that needs to be considered to filter by modification
         *
         * @generated from field: uint64 modification_timestamp_start = 103;
         */
        this.modificationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by modification
         *
         * @generated from field: uint64 modification_timestamp_end = 104;
         */
        this.modificationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * The entity UUID that is to be used to filter records
         *
         * @generated from field: string entity_uuid = 8;
         */
        this.entityUuid = "";
        /**
         * The status of this tax param
         *
         * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
         */
        this.status = base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;
        /**
         * The start range of approved timestamp
         *
         * @generated from field: uint64 approved_on_start = 11;
         */
        this.approvedOnStart = protobuf_1.protoInt64.zero;
        /**
         * The end range of approved timestamp
         *
         * @generated from field: uint64 approved_on_end = 12;
         */
        this.approvedOnEnd = protobuf_1.protoInt64.zero;
        /**
         * The ID of the approver
         *
         * @generated from field: uint64 approved_by_user_id = 13;
         */
        this.approvedByUserId = protobuf_1.protoInt64.zero;
        /**
         * The role ID of the approver
         *
         * @generated from field: uint64 approver_role_id = 14;
         */
        this.approverRoleId = protobuf_1.protoInt64.zero;
        /**
         * The name of the tax param
         *
         * @generated from field: string name = 20;
         */
        this.name = "";
        /**
         * The unique code by which the tax param is classified
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        /**
         * The type of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 31;
         */
        this.valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;
        /**
         * The category of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 32;
         */
        this.category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TaxParamsServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaxParamsServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaxParamsServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaxParamsServiceFilterReq, a, b);
    }
}
exports.TaxParamsServiceFilterReq = TaxParamsServiceFilterReq;
TaxParamsServiceFilterReq.runtime = protobuf_1.proto3;
TaxParamsServiceFilterReq.typeName = "Scailo.TaxParamsServiceFilterReq";
TaxParamsServiceFilterReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "value_type", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 32, name: "category", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_CATEGORY) },
]);
/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.TaxParamsServiceCountReq
 */
class TaxParamsServiceCountReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: Scailo.BOOL_FILTER is_active = 1;
         */
        this.isActive = base_scailo_pb_js_1.BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;
        /**
         * The minimum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: uint64 creation_timestamp_start = 101;
         */
        this.creationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: uint64 creation_timestamp_end = 102;
         */
        this.creationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * The minimum timestamp that needs to be considered to filter by modification
         *
         * @generated from field: uint64 modification_timestamp_start = 103;
         */
        this.modificationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by modification
         *
         * @generated from field: uint64 modification_timestamp_end = 104;
         */
        this.modificationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * The entity UUID that is to be used to filter records
         *
         * @generated from field: string entity_uuid = 8;
         */
        this.entityUuid = "";
        /**
         * The status of this tax param
         *
         * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
         */
        this.status = base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;
        /**
         * The start range of approved timestamp
         *
         * @generated from field: uint64 approved_on_start = 11;
         */
        this.approvedOnStart = protobuf_1.protoInt64.zero;
        /**
         * The end range of approved timestamp
         *
         * @generated from field: uint64 approved_on_end = 12;
         */
        this.approvedOnEnd = protobuf_1.protoInt64.zero;
        /**
         * The ID of the approver
         *
         * @generated from field: uint64 approved_by_user_id = 13;
         */
        this.approvedByUserId = protobuf_1.protoInt64.zero;
        /**
         * The role ID of the approver
         *
         * @generated from field: uint64 approver_role_id = 14;
         */
        this.approverRoleId = protobuf_1.protoInt64.zero;
        /**
         * The name of the tax param
         *
         * @generated from field: string name = 20;
         */
        this.name = "";
        /**
         * The unique code by which the tax param is classified
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        /**
         * The type of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 31;
         */
        this.valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;
        /**
         * The category of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 32;
         */
        this.category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TaxParamsServiceCountReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaxParamsServiceCountReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaxParamsServiceCountReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaxParamsServiceCountReq, a, b);
    }
}
exports.TaxParamsServiceCountReq = TaxParamsServiceCountReq;
TaxParamsServiceCountReq.runtime = protobuf_1.proto3;
TaxParamsServiceCountReq.typeName = "Scailo.TaxParamsServiceCountReq";
TaxParamsServiceCountReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "value_type", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 32, name: "category", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_CATEGORY) },
]);
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.TaxParamsServiceSearchAllReq
 */
class TaxParamsServiceSearchAllReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: Scailo.BOOL_FILTER is_active = 1;
         */
        this.isActive = base_scailo_pb_js_1.BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: uint64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: Scailo.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_scailo_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: Scailo.TAX_PARAM_SORT_KEY sort_key = 5;
         */
        this.sortKey = TAX_PARAM_SORT_KEY.TAX_PARAM_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The entity UUID that is to be used to filter records
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        /**
         * Limit the search space to the given status
         *
         * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
         */
        this.status = base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;
        /**
         * Describes the key with which the search operation needs to be performed
         *
         * @generated from field: string search_key = 11;
         */
        this.searchKey = "";
        /**
         * The type of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 31;
         */
        this.valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;
        /**
         * The category of the tax param
         *
         * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 32;
         */
        this.category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TaxParamsServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaxParamsServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaxParamsServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaxParamsServiceSearchAllReq, a, b);
    }
}
exports.TaxParamsServiceSearchAllReq = TaxParamsServiceSearchAllReq;
TaxParamsServiceSearchAllReq.runtime = protobuf_1.proto3;
TaxParamsServiceSearchAllReq.typeName = "Scailo.TaxParamsServiceSearchAllReq";
TaxParamsServiceSearchAllReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(base_scailo_pb_js_1.STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "value_type", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 32, name: "category", kind: "enum", T: protobuf_1.proto3.getEnumType(TAX_PARAM_CATEGORY) },
]);
