"use strict";
// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file forms_fields_data.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormFieldDatumFilterRequest = exports.FormFieldDatumHistoryRequest = exports.FormFieldDatumList = exports.FormFieldDatumCreateRequest = exports.FormFieldDatum = exports.FORM_FIELD_FILTER_OPERATOR = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_scailo_pb_js_1 = require("./base.scailo_pb.js");
const forms_fields_scailo_pb_js_1 = require("./forms_fields.scailo_pb.js");
/**
 *
 * Describes the form field filter operator
 *
 * @generated from enum Scailo.FORM_FIELD_FILTER_OPERATOR
 */
var FORM_FIELD_FILTER_OPERATOR;
(function (FORM_FIELD_FILTER_OPERATOR) {
    /**
     * The default operator which uses similarity to filter. Returns all records that are similar to the given value
     *
     * @generated from enum value: FORM_FIELD_FILTER_OPERATOR_SIMILARITY_UNSPECIFIED = 0;
     */
    FORM_FIELD_FILTER_OPERATOR[FORM_FIELD_FILTER_OPERATOR["FORM_FIELD_FILTER_OPERATOR_SIMILARITY_UNSPECIFIED"] = 0] = "FORM_FIELD_FILTER_OPERATOR_SIMILARITY_UNSPECIFIED";
    /**
     * The operator uses equality. Returns all records that match the given value
     *
     * @generated from enum value: FORM_FIELD_FILTER_OPERATOR_EQUALITY = 10;
     */
    FORM_FIELD_FILTER_OPERATOR[FORM_FIELD_FILTER_OPERATOR["FORM_FIELD_FILTER_OPERATOR_EQUALITY"] = 10] = "FORM_FIELD_FILTER_OPERATOR_EQUALITY";
    /**
     * The operator uses less than. Returns all records that are less than the given value. Useful for comparing numbers and dates. For strings, it returns all records that are lexicographically less than the given value.
     *
     * @generated from enum value: FORM_FIELD_FILTER_OPERATOR_LESS_THAN = 20;
     */
    FORM_FIELD_FILTER_OPERATOR[FORM_FIELD_FILTER_OPERATOR["FORM_FIELD_FILTER_OPERATOR_LESS_THAN"] = 20] = "FORM_FIELD_FILTER_OPERATOR_LESS_THAN";
    /**
     * The operator uses less than or equal. Returns all records that are less than or equal to the given value. Useful for comparing numbers and dates. For strings, it returns all records that are lexicographically less than or equal to the given value.
     *
     * @generated from enum value: FORM_FIELD_FILTER_OPERATOR_LESS_THAN_OR_EQUAL = 21;
     */
    FORM_FIELD_FILTER_OPERATOR[FORM_FIELD_FILTER_OPERATOR["FORM_FIELD_FILTER_OPERATOR_LESS_THAN_OR_EQUAL"] = 21] = "FORM_FIELD_FILTER_OPERATOR_LESS_THAN_OR_EQUAL";
    /**
     * The operator uses greater than. Returns all records that are greater than the given value. Useful for comparing numbers and dates. For strings, it returns all records that are lexicographically greater than the given value.
     *
     * @generated from enum value: FORM_FIELD_FILTER_OPERATOR_GREATER_THAN = 30;
     */
    FORM_FIELD_FILTER_OPERATOR[FORM_FIELD_FILTER_OPERATOR["FORM_FIELD_FILTER_OPERATOR_GREATER_THAN"] = 30] = "FORM_FIELD_FILTER_OPERATOR_GREATER_THAN";
    /**
     * The operator uses greater than or equal. Returns all records that are greater than or equal to the given value. Useful for comparing numbers and dates. For strings, it returns all records that are lexicographically greater than or equal to the given value.
     *
     * @generated from enum value: FORM_FIELD_FILTER_OPERATOR_GREATER_THAN_OR_EQUAL = 31;
     */
    FORM_FIELD_FILTER_OPERATOR[FORM_FIELD_FILTER_OPERATOR["FORM_FIELD_FILTER_OPERATOR_GREATER_THAN_OR_EQUAL"] = 31] = "FORM_FIELD_FILTER_OPERATOR_GREATER_THAN_OR_EQUAL";
})(FORM_FIELD_FILTER_OPERATOR || (exports.FORM_FIELD_FILTER_OPERATOR = FORM_FIELD_FILTER_OPERATOR = {}));
// Retrieve enum metadata with: proto3.getEnumType(FORM_FIELD_FILTER_OPERATOR)
protobuf_1.proto3.util.setEnumType(FORM_FIELD_FILTER_OPERATOR, "Scailo.FORM_FIELD_FILTER_OPERATOR", [
    { no: 0, name: "FORM_FIELD_FILTER_OPERATOR_SIMILARITY_UNSPECIFIED" },
    { no: 10, name: "FORM_FIELD_FILTER_OPERATOR_EQUALITY" },
    { no: 20, name: "FORM_FIELD_FILTER_OPERATOR_LESS_THAN" },
    { no: 21, name: "FORM_FIELD_FILTER_OPERATOR_LESS_THAN_OR_EQUAL" },
    { no: 30, name: "FORM_FIELD_FILTER_OPERATOR_GREATER_THAN" },
    { no: 31, name: "FORM_FIELD_FILTER_OPERATOR_GREATER_THAN_OR_EQUAL" },
]);
/**
 *
 * Describes the data stored in an individual form field data row of each dynamic form
 *
 * @generated from message Scailo.FormFieldDatum
 */
class FormFieldDatum extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores a globally unique entity UUID. This will be set at the organization level
         *
         * @generated from field: string entity_uuid = 1;
         */
        this.entityUuid = "";
        /**
         * The ID of the form field
         *
         * @generated from field: uint64 form_field_id = 10;
         */
        this.formFieldId = protobuf_1.protoInt64.zero;
        /**
         * The UUID that this field belongs to
         *
         * @generated from field: string ref_uuid = 21;
         */
        this.refUuid = "";
        /**
         * The value entered by the user
         *
         * @generated from field: string value = 22;
         */
        this.value = "";
        /**
         * The list of values that have been selected by the user (in case of a checkbox or a dropdown)
         *
         * @generated from field: repeated string selected_values = 23;
         */
        this.selectedValues = [];
        /**
         * Denotes if this field requires approval by a competent authority
         *
         * @generated from field: bool need_approval = 24;
         */
        this.needApproval = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FormFieldDatum().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormFieldDatum().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormFieldDatum().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormFieldDatum, a, b);
    }
}
exports.FormFieldDatum = FormFieldDatum;
FormFieldDatum.runtime = protobuf_1.proto3;
FormFieldDatum.typeName = "Scailo.FormFieldDatum";
FormFieldDatum.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: base_scailo_pb_js_1.EmployeeMetadata },
    { no: 10, name: "form_field_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "form_field", kind: "message", T: forms_fields_scailo_pb_js_1.FormField },
    { no: 21, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "selected_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 24, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 *
 * Describes the data required for creating a dynamic form field entry
 *
 * @generated from message Scailo.FormFieldDatumCreateRequest
 */
class FormFieldDatumCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The ID of the corresponding form field
         *
         * @generated from field: uint64 form_field_id = 1;
         */
        this.formFieldId = protobuf_1.protoInt64.zero;
        /**
         * The value to be stored (for textarea and input)
         *
         * @generated from field: string value = 2;
         */
        this.value = "";
        /**
         * The list of selected values (for radio, checkbox, and select)
         *
         * @generated from field: repeated string selected_values = 3;
         */
        this.selectedValues = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FormFieldDatumCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormFieldDatumCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormFieldDatumCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormFieldDatumCreateRequest, a, b);
    }
}
exports.FormFieldDatumCreateRequest = FormFieldDatumCreateRequest;
FormFieldDatumCreateRequest.runtime = protobuf_1.proto3;
FormFieldDatumCreateRequest.typeName = "Scailo.FormFieldDatumCreateRequest";
FormFieldDatumCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "form_field_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "selected_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.FormFieldDatumList
 */
class FormFieldDatumList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of records
         *
         * @generated from field: repeated Scailo.FormFieldDatum list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FormFieldDatumList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormFieldDatumList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormFieldDatumList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormFieldDatumList, a, b);
    }
}
exports.FormFieldDatumList = FormFieldDatumList;
FormFieldDatumList.runtime = protobuf_1.proto3;
FormFieldDatumList.typeName = "Scailo.FormFieldDatumList";
FormFieldDatumList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: FormFieldDatum, repeated: true },
]);
/**
 *
 * Describes the data required to fetch history of the given form field and the specified resource
 *
 * @generated from message Scailo.FormFieldDatumHistoryRequest
 */
class FormFieldDatumHistoryRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The ID of the corresponding form field
         *
         * @generated from field: uint64 form_field_id = 1;
         */
        this.formFieldId = protobuf_1.protoInt64.zero;
        /**
         * The UUID of the corresponding resource
         *
         * @generated from field: string ref_uuid = 2;
         */
        this.refUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FormFieldDatumHistoryRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormFieldDatumHistoryRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormFieldDatumHistoryRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormFieldDatumHistoryRequest, a, b);
    }
}
exports.FormFieldDatumHistoryRequest = FormFieldDatumHistoryRequest;
FormFieldDatumHistoryRequest.runtime = protobuf_1.proto3;
FormFieldDatumHistoryRequest.typeName = "Scailo.FormFieldDatumHistoryRequest";
FormFieldDatumHistoryRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "form_field_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data required to filter for records using form field data
 *
 * @generated from message Scailo.FormFieldDatumFilterRequest
 */
class FormFieldDatumFilterRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The ID of the corresponding form field
         *
         * @generated from field: uint64 form_field_id = 1;
         */
        this.formFieldId = protobuf_1.protoInt64.zero;
        /**
         * The value to be filtered
         *
         * @generated from field: string value = 2;
         */
        this.value = "";
        /**
         * The operator to be used
         *
         * @generated from field: Scailo.FORM_FIELD_FILTER_OPERATOR operator = 10;
         */
        this.operator = FORM_FIELD_FILTER_OPERATOR.FORM_FIELD_FILTER_OPERATOR_SIMILARITY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FormFieldDatumFilterRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FormFieldDatumFilterRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FormFieldDatumFilterRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FormFieldDatumFilterRequest, a, b);
    }
}
exports.FormFieldDatumFilterRequest = FormFieldDatumFilterRequest;
FormFieldDatumFilterRequest.runtime = protobuf_1.proto3;
FormFieldDatumFilterRequest.typeName = "Scailo.FormFieldDatumFilterRequest";
FormFieldDatumFilterRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "form_field_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "operator", kind: "enum", T: protobuf_1.proto3.getEnumType(FORM_FIELD_FILTER_OPERATOR) },
]);
