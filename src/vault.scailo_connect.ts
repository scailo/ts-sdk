// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file vault.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { VaultFile, VaultFileAddChunkRequest, VaultFileInitiateFileRequest, VaultFileInitiateFileResponse, VaultFileMoveFileRequest, VaultFileRenameFileRequest, VaultFilesList, VaultFileUnzipRequest, VaultFileVersionChunk, VaultFileVersionsList } from "./vault_files.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { BooleanResponse, CountResponse, Identifier, IdentifierUUID, IdentifierZeroable, StandardFile } from "./base.scailo_pb.js";
import { GiXAppRun, GiXAppRunCountReq, GiXAppRunFilterReq, GiXAppRunsList, VaultAccessLogsList, VaultDuplicateCheckReq, VaultPermission, VaultPermissionAddRequest, VaultPermissionModifyRequest, VaultSearchReq, VaultSearchResponsesList } from "./vault_commons.scailo_pb.js";
import { VaultFolder, VaultFolderAddRequest, VaultFolderDownload, VaultFolderMoveFolderRequest, VaultFolderRenameFolderRequest, VaultFoldersList } from "./vault_folders.scailo_pb.js";
import { GiXRelayReqWithBody, GiXRelayReqWithoutBody, GiXRelayResponse, VaultResourcesList } from "./vault.scailo_pb.js";
import { RolesList } from "./roles.scailo_pb.js";

/**
 *
 * Describes the available services in Vault
 *
 * File APIs
 *
 * @generated from service Scailo.VaultService
 */
export const VaultService = {
  typeName: "Scailo.VaultService",
  methods: {
    /**
     * Initiate file upload
     *
     * @generated from rpc Scailo.VaultService.InitiateFile
     */
    initiateFile: {
      name: "InitiateFile",
      I: VaultFileInitiateFileRequest,
      O: VaultFileInitiateFileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add chunk to a file version and returns the UUID of the added chunk
     *
     * @generated from rpc Scailo.VaultService.AddFileChunk
     */
    addFileChunk: {
      name: "AddFileChunk",
      I: VaultFileAddChunkRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Complete file upload
     *
     * @generated from rpc Scailo.VaultService.CompleteFile
     */
    completeFile: {
      name: "CompleteFile",
      I: IdentifierUUID,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Rename file
     *
     * @generated from rpc Scailo.VaultService.RenameFile
     */
    renameFile: {
      name: "RenameFile",
      I: VaultFileRenameFileRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Unzip file
     *
     * @generated from rpc Scailo.VaultService.UnzipFile
     */
    unzipFile: {
      name: "UnzipFile",
      I: VaultFileUnzipRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Persist file
     *
     * @generated from rpc Scailo.VaultService.PersistFile
     */
    persistFile: {
      name: "PersistFile",
      I: IdentifierUUID,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Move file
     *
     * @generated from rpc Scailo.VaultService.MoveFile
     */
    moveFile: {
      name: "MoveFile",
      I: VaultFileMoveFileRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Delete file
     *
     * @generated from rpc Scailo.VaultService.DeleteFile
     */
    deleteFile: {
      name: "DeleteFile",
      I: IdentifierUUID,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Permission APIs
     * Add permission and returns the UUID of the added permission
     *
     * @generated from rpc Scailo.VaultService.AddFilePermission
     */
    addFilePermission: {
      name: "AddFilePermission",
      I: VaultPermissionAddRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Modify permission and returns the UUID of the added permission
     *
     * @generated from rpc Scailo.VaultService.ModifyFilePermission
     */
    modifyFilePermission: {
      name: "ModifyFilePermission",
      I: VaultPermissionModifyRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Delete permission (returns the UUID of the file)
     *
     * @generated from rpc Scailo.VaultService.DeleteFilePermission
     */
    deleteFilePermission: {
      name: "DeleteFilePermission",
      I: IdentifierUUID,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Downloads
     * Download file with the given UUID
     *
     * @generated from rpc Scailo.VaultService.DownloadFile
     */
    downloadFile: {
      name: "DownloadFile",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download file version with the given UUID
     *
     * @generated from rpc Scailo.VaultService.DownloadFileVersion
     */
    downloadFileVersion: {
      name: "DownloadFileVersion",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * View logo
     *
     * @generated from rpc Scailo.VaultService.ViewFileLogo
     */
    viewFileLogo: {
      name: "ViewFileLogo",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * View file by UUID
     *
     * @generated from rpc Scailo.VaultService.ViewFileByUUID
     */
    viewFileByUUID: {
      name: "ViewFileByUUID",
      I: IdentifierUUID,
      O: VaultFile,
      kind: MethodKind.Unary,
    },
    /**
     * View file by ID
     *
     * @generated from rpc Scailo.VaultService.ViewFileByID
     */
    viewFileByID: {
      name: "ViewFileByID",
      I: Identifier,
      O: VaultFile,
      kind: MethodKind.Unary,
    },
    /**
     * View chunk with the given UUID
     *
     * @generated from rpc Scailo.VaultService.ViewFileChunk
     */
    viewFileChunk: {
      name: "ViewFileChunk",
      I: IdentifierUUID,
      O: VaultFileVersionChunk,
      kind: MethodKind.Unary,
    },
    /**
     * View chunk metadata
     *
     * @generated from rpc Scailo.VaultService.ViewFileChunkMetadata
     */
    viewFileChunkMetadata: {
      name: "ViewFileChunkMetadata",
      I: IdentifierUUID,
      O: VaultFileVersionChunk,
      kind: MethodKind.Unary,
    },
    /**
     * View permission for file
     *
     * @generated from rpc Scailo.VaultService.ViewFilePermission
     */
    viewFilePermission: {
      name: "ViewFilePermission",
      I: IdentifierUUID,
      O: VaultPermission,
      kind: MethodKind.Unary,
    },
    /**
     * Check if file already exists
     *
     * @generated from rpc Scailo.VaultService.DoesFileExist
     */
    doesFileExist: {
      name: "DoesFileExist",
      I: VaultDuplicateCheckReq,
      O: BooleanResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all versions of file
     *
     * @generated from rpc Scailo.VaultService.ViewFileVersions
     */
    viewFileVersions: {
      name: "ViewFileVersions",
      I: IdentifierUUID,
      O: VaultFileVersionsList,
      kind: MethodKind.Unary,
    },
    /**
     * View access logs of file
     *
     * @generated from rpc Scailo.VaultService.ViewFileAccessLogs
     */
    viewFileAccessLogs: {
      name: "ViewFileAccessLogs",
      I: IdentifierUUID,
      O: VaultAccessLogsList,
      kind: MethodKind.Unary,
    },
    /**
     * Add folder
     *
     * @generated from rpc Scailo.VaultService.AddFolder
     */
    addFolder: {
      name: "AddFolder",
      I: VaultFolderAddRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Move folder
     *
     * @generated from rpc Scailo.VaultService.MoveFolder
     */
    moveFolder: {
      name: "MoveFolder",
      I: VaultFolderMoveFolderRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Rename folder
     *
     * @generated from rpc Scailo.VaultService.RenameFolder
     */
    renameFolder: {
      name: "RenameFolder",
      I: VaultFolderRenameFolderRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Delete folder
     *
     * @generated from rpc Scailo.VaultService.DeleteFolder
     */
    deleteFolder: {
      name: "DeleteFolder",
      I: IdentifierUUID,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Zip folder and returns the UUID of the vault folder download
     *
     * @generated from rpc Scailo.VaultService.ZipFolder
     */
    zipFolder: {
      name: "ZipFolder",
      I: IdentifierUUID,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Permission APIs
     * Add permission and returns the UUID of the added permission
     *
     * @generated from rpc Scailo.VaultService.AddFolderPermission
     */
    addFolderPermission: {
      name: "AddFolderPermission",
      I: VaultPermissionAddRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Modify permission and returns the UUID of the modified permission
     *
     * @generated from rpc Scailo.VaultService.ModifyFolderPermission
     */
    modifyFolderPermission: {
      name: "ModifyFolderPermission",
      I: VaultPermissionModifyRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Delete permission (returns the UUID of the folder)
     *
     * @generated from rpc Scailo.VaultService.DeleteFolderPermission
     */
    deleteFolderPermission: {
      name: "DeleteFolderPermission",
      I: IdentifierUUID,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * View folder by ID
     *
     * @generated from rpc Scailo.VaultService.ViewFolderByID
     */
    viewFolderByID: {
      name: "ViewFolderByID",
      I: IdentifierZeroable,
      O: VaultFolder,
      kind: MethodKind.Unary,
    },
    /**
     * View folder by UUID
     *
     * @generated from rpc Scailo.VaultService.ViewFolderByUUID
     */
    viewFolderByUUID: {
      name: "ViewFolderByUUID",
      I: IdentifierUUID,
      O: VaultFolder,
      kind: MethodKind.Unary,
    },
    /**
     * View the status of the folder download
     *
     * @generated from rpc Scailo.VaultService.ViewFolderDownloadStatus
     */
    viewFolderDownloadStatus: {
      name: "ViewFolderDownloadStatus",
      I: IdentifierUUID,
      O: VaultFolderDownload,
      kind: MethodKind.Unary,
    },
    /**
     * Download the vault folder
     *
     * @generated from rpc Scailo.VaultService.DownloadFolder
     */
    downloadFolder: {
      name: "DownloadFolder",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * View all files accessible by self in the given folder
     *
     * @generated from rpc Scailo.VaultService.ViewAccessibleFilesInFolder
     */
    viewAccessibleFilesInFolder: {
      name: "ViewAccessibleFilesInFolder",
      I: IdentifierUUID,
      O: VaultFilesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all folders accessible by self in the given folder
     *
     * @generated from rpc Scailo.VaultService.ViewAccessibleFoldersInFolder
     */
    viewAccessibleFoldersInFolder: {
      name: "ViewAccessibleFoldersInFolder",
      I: IdentifierUUID,
      O: VaultFoldersList,
      kind: MethodKind.Unary,
    },
    /**
     * View all the resources accessible by self in the given folder
     *
     * @generated from rpc Scailo.VaultService.ViewAccessibleResourcesInFolder
     */
    viewAccessibleResourcesInFolder: {
      name: "ViewAccessibleResourcesInFolder",
      I: IdentifierUUID,
      O: VaultResourcesList,
      kind: MethodKind.Unary,
    },
    /**
     * View permission for folder
     *
     * @generated from rpc Scailo.VaultService.ViewFolderPermission
     */
    viewFolderPermission: {
      name: "ViewFolderPermission",
      I: IdentifierUUID,
      O: VaultPermission,
      kind: MethodKind.Unary,
    },
    /**
     * Check if folder already exists
     *
     * @generated from rpc Scailo.VaultService.DoesFolderExist
     */
    doesFolderExist: {
      name: "DoesFolderExist",
      I: VaultDuplicateCheckReq,
      O: BooleanResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View access logs of folder
     *
     * @generated from rpc Scailo.VaultService.ViewFolderAccessLogs
     */
    viewFolderAccessLogs: {
      name: "ViewFolderAccessLogs",
      I: IdentifierUUID,
      O: VaultAccessLogsList,
      kind: MethodKind.Unary,
    },
    /**
     * View passthrough roles for folder
     *
     * @generated from rpc Scailo.VaultService.ViewPassthroughRolesForFolder
     */
    viewPassthroughRolesForFolder: {
      name: "ViewPassthroughRolesForFolder",
      I: IdentifierUUID,
      O: RolesList,
      kind: MethodKind.Unary,
    },
    /**
     * Search for files and folders
     *
     * @generated from rpc Scailo.VaultService.Search
     */
    search: {
      name: "Search",
      I: VaultSearchReq,
      O: VaultSearchResponsesList,
      kind: MethodKind.Unary,
    },
    /**
     * ------------------------------------------
     * GiX apps routes
     * Setup GiX app
     *
     * @generated from rpc Scailo.VaultService.SetupGiX
     */
    setupGiX: {
      name: "SetupGiX",
      I: IdentifierUUID,
      O: GiXAppRun,
      kind: MethodKind.Unary,
    },
    /**
     * Relay a DELETE API
     *
     * @generated from rpc Scailo.VaultService.GiXRelayDELETE
     */
    giXRelayDELETE: {
      name: "GiXRelayDELETE",
      I: GiXRelayReqWithoutBody,
      O: GiXRelayResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Relay a GET API
     *
     * @generated from rpc Scailo.VaultService.GiXRelayGET
     */
    giXRelayGET: {
      name: "GiXRelayGET",
      I: GiXRelayReqWithoutBody,
      O: GiXRelayResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Relay a HEAD API
     *
     * @generated from rpc Scailo.VaultService.GiXRelayHEAD
     */
    giXRelayHEAD: {
      name: "GiXRelayHEAD",
      I: GiXRelayReqWithoutBody,
      O: GiXRelayResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Relay a PATCH API
     *
     * @generated from rpc Scailo.VaultService.GiXRelayPATCH
     */
    giXRelayPATCH: {
      name: "GiXRelayPATCH",
      I: GiXRelayReqWithBody,
      O: GiXRelayResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Relay a POST API
     *
     * @generated from rpc Scailo.VaultService.GiXRelayPOST
     */
    giXRelayPOST: {
      name: "GiXRelayPOST",
      I: GiXRelayReqWithBody,
      O: GiXRelayResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Relay a PUT API
     *
     * @generated from rpc Scailo.VaultService.GiXRelayPUT
     */
    giXRelayPUT: {
      name: "GiXRelayPUT",
      I: GiXRelayReqWithBody,
      O: GiXRelayResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all runs that match the given filter criteria
     *
     * @generated from rpc Scailo.VaultService.GiXFilter
     */
    giXFilter: {
      name: "GiXFilter",
      I: GiXAppRunFilterReq,
      O: GiXAppRunsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count all runs that match the given filter criteria
     *
     * @generated from rpc Scailo.VaultService.GiXCount
     */
    giXCount: {
      name: "GiXCount",
      I: GiXAppRunCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

