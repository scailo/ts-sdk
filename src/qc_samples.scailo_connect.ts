// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file qc_samples.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QCSample, QCSampleParameter, QCSampleParameterHistoryList, QCSampleParameterHistoryRequest, QCSampleParametersList, QCSampleParametersSearchRequest, QCSamplesList, QCSamplesServiceCountReq, QCSamplesServiceCreateRequest, QCSamplesServiceFilterReq, QCSamplesServicePaginatedParametersResponse, QCSamplesServicePaginationReq, QCSamplesServicePaginationResponse, QCSamplesServiceParameterUpdateRequest, QCSamplesServiceSearchAllReq, QCSamplesServiceUpdateRequest } from "./qc_samples.scailo_pb.js";
import { ActiveStatus, CountResponse, Identifier, IdentifiersList, IdentifierUUID, IdentifierWithEmailAttributes, IdentifierWithSearchKey, IdentifierWithUserComment } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each qc sample
 *
 * @generated from service Scailo.QCSamplesService
 */
export const QCSamplesService = {
  typeName: "Scailo.QCSamplesService",
  methods: {
    /**
     * Create
     *
     * @generated from rpc Scailo.QCSamplesService.Create
     */
    create: {
      name: "Create",
      I: QCSamplesServiceCreateRequest,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * Update
     *
     * @generated from rpc Scailo.QCSamplesService.Update
     */
    update: {
      name: "Update",
      I: QCSamplesServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Finish
     *
     * @generated from rpc Scailo.QCSamplesService.Finish
     */
    finish: {
      name: "Finish",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Accept
     *
     * @generated from rpc Scailo.QCSamplesService.Accept
     */
    accept: {
      name: "Accept",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Accept With Deviation
     *
     * @generated from rpc Scailo.QCSamplesService.AcceptWithDeviation
     */
    acceptWithDeviation: {
      name: "AcceptWithDeviation",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Reject
     *
     * @generated from rpc Scailo.QCSamplesService.Reject
     */
    reject: {
      name: "Reject",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Cancel
     *
     * @generated from rpc Scailo.QCSamplesService.Cancel
     */
    cancel: {
      name: "Cancel",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.QCSamplesService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.QCSamplesService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send Email
     *
     * @generated from rpc Scailo.QCSamplesService.SendEmail
     */
    sendEmail: {
      name: "SendEmail",
      I: IdentifierWithEmailAttributes,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an parameter in a qc sample
     *
     * @generated from rpc Scailo.QCSamplesService.UpdateParameter
     */
    updateParameter: {
      name: "UpdateParameter",
      I: QCSamplesServiceParameterUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View QCSample Parameter by ID
     *
     * @generated from rpc Scailo.QCSamplesService.ViewParameterByID
     */
    viewParameterByID: {
      name: "ViewParameterByID",
      I: Identifier,
      O: QCSampleParameter,
      kind: MethodKind.Unary,
    },
    /**
     * View all parameters for given qc sample ID
     *
     * @generated from rpc Scailo.QCSamplesService.ViewParameters
     */
    viewParameters: {
      name: "ViewParameters",
      I: IdentifierWithSearchKey,
      O: QCSampleParametersList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the qc sample parameter
     *
     * @generated from rpc Scailo.QCSamplesService.ViewParameterHistory
     */
    viewParameterHistory: {
      name: "ViewParameterHistory",
      I: QCSampleParameterHistoryRequest,
      O: QCSampleParameterHistoryList,
      kind: MethodKind.Unary,
    },
    /**
     * View qc sample parameters for given qc sample ID with pagination
     *
     * @generated from rpc Scailo.QCSamplesService.ViewPaginatedParameters
     */
    viewPaginatedParameters: {
      name: "ViewPaginatedParameters",
      I: QCSampleParametersSearchRequest,
      O: QCSamplesServicePaginatedParametersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through qc sample parameters with pagination
     *
     * @generated from rpc Scailo.QCSamplesService.SearchParametersWithPagination
     */
    searchParametersWithPagination: {
      name: "SearchParametersWithPagination",
      I: QCSampleParametersSearchRequest,
      O: QCSamplesServicePaginatedParametersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.QCSamplesService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: QCSample,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.QCSamplesService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: QCSamplesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.QCSamplesService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: QCSamplesList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.QCSamplesService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: QCSamplesServicePaginationReq,
      O: QCSamplesServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.QCSamplesService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: QCSamplesServiceSearchAllReq,
      O: QCSamplesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.QCSamplesService.Filter
     */
    filter: {
      name: "Filter",
      I: QCSamplesServiceFilterReq,
      O: QCSamplesList,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.QCSamplesService.Count
     */
    count: {
      name: "Count",
      I: QCSamplesServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

