// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file payroll_groups.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available input types for a payroll group item (with possible vbalues being percentage or fixed)
 *
 * @generated from enum Scailo.PAYROLL_GROUP_ITEM_VALUE_TYPE
 */
export enum PAYROLL_GROUP_ITEM_VALUE_TYPE {
  /**
   * Acceptable value type is any (usefil only for filters and search)
   *
   * @generated from enum value: PAYROLL_GROUP_ITEM_VALUE_TYPE_ANY_UNSPECIFIED = 0;
   */
  PAYROLL_GROUP_ITEM_VALUE_TYPE_ANY_UNSPECIFIED = 0,

  /**
   * Acceptable value type is a percentage
   *
   * @generated from enum value: PAYROLL_GROUP_ITEM_VALUE_TYPE_PERCENTAGE = 1;
   */
  PAYROLL_GROUP_ITEM_VALUE_TYPE_PERCENTAGE = 1,

  /**
   * Acceptable value type is fixed
   *
   * @generated from enum value: PAYROLL_GROUP_ITEM_VALUE_TYPE_FIXED = 2;
   */
  PAYROLL_GROUP_ITEM_VALUE_TYPE_FIXED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PAYROLL_GROUP_ITEM_VALUE_TYPE)
proto3.util.setEnumType(PAYROLL_GROUP_ITEM_VALUE_TYPE, "Scailo.PAYROLL_GROUP_ITEM_VALUE_TYPE", [
  { no: 0, name: "PAYROLL_GROUP_ITEM_VALUE_TYPE_ANY_UNSPECIFIED" },
  { no: 1, name: "PAYROLL_GROUP_ITEM_VALUE_TYPE_PERCENTAGE" },
  { no: 2, name: "PAYROLL_GROUP_ITEM_VALUE_TYPE_FIXED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.PAYROLL_GROUP_SORT_KEY
 */
export enum PAYROLL_GROUP_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: PAYROLL_GROUP_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  PAYROLL_GROUP_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: PAYROLL_GROUP_SORT_KEY_CREATED_AT = 1;
   */
  PAYROLL_GROUP_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: PAYROLL_GROUP_SORT_KEY_MODIFIED_AT = 2;
   */
  PAYROLL_GROUP_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: PAYROLL_GROUP_SORT_KEY_APPROVED_ON = 3;
   */
  PAYROLL_GROUP_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: PAYROLL_GROUP_SORT_KEY_APPROVED_BY = 4;
   */
  PAYROLL_GROUP_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: PAYROLL_GROUP_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  PAYROLL_GROUP_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: PAYROLL_GROUP_SORT_KEY_COMPLETED_ON = 6;
   */
  PAYROLL_GROUP_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the name
   *
   * @generated from enum value: PAYROLL_GROUP_SORT_KEY_NAME = 10;
   */
  PAYROLL_GROUP_SORT_KEY_NAME = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(PAYROLL_GROUP_SORT_KEY)
proto3.util.setEnumType(PAYROLL_GROUP_SORT_KEY, "Scailo.PAYROLL_GROUP_SORT_KEY", [
  { no: 0, name: "PAYROLL_GROUP_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "PAYROLL_GROUP_SORT_KEY_CREATED_AT" },
  { no: 2, name: "PAYROLL_GROUP_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "PAYROLL_GROUP_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "PAYROLL_GROUP_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "PAYROLL_GROUP_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "PAYROLL_GROUP_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "PAYROLL_GROUP_SORT_KEY_NAME" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.PayrollGroupsServiceCreateRequest
 */
export class PayrollGroupsServiceCreateRequest extends Message<PayrollGroupsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The name of the payroll group
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The payroll group code
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The description of the payroll group
   *
   * @generated from field: string description = 13;
   */
  description = "";

  constructor(data?: PartialMessage<PayrollGroupsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsServiceCreateRequest {
    return new PayrollGroupsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsServiceCreateRequest {
    return new PayrollGroupsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsServiceCreateRequest {
    return new PayrollGroupsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsServiceCreateRequest | PlainMessage<PayrollGroupsServiceCreateRequest> | undefined, b: PayrollGroupsServiceCreateRequest | PlainMessage<PayrollGroupsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.PayrollGroupsServiceUpdateRequest
 */
export class PayrollGroupsServiceUpdateRequest extends Message<PayrollGroupsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The name of the payroll group
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The payroll group code
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The description of the payroll group
   *
   * @generated from field: string description = 13;
   */
  description = "";

  constructor(data?: PartialMessage<PayrollGroupsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsServiceUpdateRequest {
    return new PayrollGroupsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsServiceUpdateRequest {
    return new PayrollGroupsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsServiceUpdateRequest {
    return new PayrollGroupsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsServiceUpdateRequest | PlainMessage<PayrollGroupsServiceUpdateRequest> | undefined, b: PayrollGroupsServiceUpdateRequest | PlainMessage<PayrollGroupsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.PayrollGroup
 */
export class PayrollGroup extends Message<PayrollGroup> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this payroll group
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this payroll group
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this payroll group
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this payroll group was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The name of the payroll group
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The payroll group code
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The description of the payroll group
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The list of associated payroll group params
   *
   * @generated from field: repeated Scailo.PayrollGroupItem list = 20;
   */
  list: PayrollGroupItem[] = [];

  constructor(data?: PartialMessage<PayrollGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "list", kind: "message", T: PayrollGroupItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroup {
    return new PayrollGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroup {
    return new PayrollGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroup {
    return new PayrollGroup().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroup | PlainMessage<PayrollGroup> | undefined, b: PayrollGroup | PlainMessage<PayrollGroup> | undefined): boolean {
    return proto3.util.equals(PayrollGroup, a, b);
  }
}

/**
 *
 * Describes the parameters required to add a param to a payroll group
 *
 * @generated from message Scailo.PayrollGroupsServiceItemCreateRequest
 */
export class PayrollGroupsServiceItemCreateRequest extends Message<PayrollGroupsServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the ID of the payroll group
   *
   * @generated from field: uint64 payroll_group_id = 10;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The ID of the payroll param that is a part of the payroll group
   *
   * @generated from field: uint64 payroll_param_id = 11;
   */
  payrollParamId = protoInt64.zero;

  /**
   * The value type of the item
   *
   * @generated from field: Scailo.PAYROLL_GROUP_ITEM_VALUE_TYPE value_type = 20;
   */
  valueType = PAYROLL_GROUP_ITEM_VALUE_TYPE.PAYROLL_GROUP_ITEM_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * Stores the base pay addition amount in terms of value_type (if value_type is percentage, then base_pay determines the percentage)
   *
   * @generated from field: uint64 base_pay_addition = 21;
   */
  basePayAddition = protoInt64.zero;

  /**
   * Stores the divisor with which the base_pay_addition needs to be divided by, in order to get the actual base pay value
   *
   * @generated from field: uint64 divisor = 22;
   */
  divisor = protoInt64.zero;

  /**
   * The minimum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 min_amount = 23;
   */
  minAmount = protoInt64.zero;

  /**
   * The maximum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 max_amount = 24;
   */
  maxAmount = protoInt64.zero;

  /**
   * Stores the amount (in terms of percentage) on which any associated payroll tax is applicable
   *
   * @generated from field: uint64 amount_percentage_on_which_tax_applicable = 25;
   */
  amountPercentageOnWhichTaxApplicable = protoInt64.zero;

  /**
   * An optional description
   *
   * @generated from field: string description = 40;
   */
  description = "";

  constructor(data?: PartialMessage<PayrollGroupsServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "payroll_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "payroll_param_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "value_type", kind: "enum", T: proto3.getEnumType(PAYROLL_GROUP_ITEM_VALUE_TYPE) },
    { no: 21, name: "base_pay_addition", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "divisor", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "min_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "max_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "amount_percentage_on_which_tax_applicable", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsServiceItemCreateRequest {
    return new PayrollGroupsServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsServiceItemCreateRequest {
    return new PayrollGroupsServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsServiceItemCreateRequest {
    return new PayrollGroupsServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsServiceItemCreateRequest | PlainMessage<PayrollGroupsServiceItemCreateRequest> | undefined, b: PayrollGroupsServiceItemCreateRequest | PlainMessage<PayrollGroupsServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update a param in a payroll group
 *
 * @generated from message Scailo.PayrollGroupsServiceItemUpdateRequest
 */
export class PayrollGroupsServiceItemUpdateRequest extends Message<PayrollGroupsServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The value type of the item
   *
   * @generated from field: Scailo.PAYROLL_GROUP_ITEM_VALUE_TYPE value_type = 20;
   */
  valueType = PAYROLL_GROUP_ITEM_VALUE_TYPE.PAYROLL_GROUP_ITEM_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * Stores the base pay addition amount in terms of value_type (if value_type is percentage, then base_pay determines the percentage)
   *
   * @generated from field: uint64 base_pay_addition = 21;
   */
  basePayAddition = protoInt64.zero;

  /**
   * Stores the divisor with which the base_pay_addition needs to be divided by, in order to get the actual base pay value
   *
   * @generated from field: uint64 divisor = 22;
   */
  divisor = protoInt64.zero;

  /**
   * The minimum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 min_amount = 23;
   */
  minAmount = protoInt64.zero;

  /**
   * The maximum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 max_amount = 24;
   */
  maxAmount = protoInt64.zero;

  /**
   * Stores the amount (in terms of percentage) on which any associated payroll tax is applicable
   *
   * @generated from field: uint64 amount_percentage_on_which_tax_applicable = 25;
   */
  amountPercentageOnWhichTaxApplicable = protoInt64.zero;

  /**
   * An optional description
   *
   * @generated from field: string description = 40;
   */
  description = "";

  constructor(data?: PartialMessage<PayrollGroupsServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "value_type", kind: "enum", T: proto3.getEnumType(PAYROLL_GROUP_ITEM_VALUE_TYPE) },
    { no: 21, name: "base_pay_addition", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "divisor", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "min_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "max_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "amount_percentage_on_which_tax_applicable", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsServiceItemUpdateRequest {
    return new PayrollGroupsServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsServiceItemUpdateRequest {
    return new PayrollGroupsServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsServiceItemUpdateRequest {
    return new PayrollGroupsServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsServiceItemUpdateRequest | PlainMessage<PayrollGroupsServiceItemUpdateRequest> | undefined, b: PayrollGroupsServiceItemUpdateRequest | PlainMessage<PayrollGroupsServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a param associated to a payroll group
 *
 * @generated from message Scailo.PayrollGroupItem
 */
export class PayrollGroupItem extends Message<PayrollGroupItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this payroll group
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the ID of the payroll group
   *
   * @generated from field: uint64 payroll_group_id = 10;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The ID of the payroll param that is a part of the payroll group
   *
   * @generated from field: uint64 payroll_param_id = 11;
   */
  payrollParamId = protoInt64.zero;

  /**
   * The value type of the item
   *
   * @generated from field: Scailo.PAYROLL_GROUP_ITEM_VALUE_TYPE value_type = 20;
   */
  valueType = PAYROLL_GROUP_ITEM_VALUE_TYPE.PAYROLL_GROUP_ITEM_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * Stores the base pay addition amount in terms of value_type (if value_type is percentage, then base_pay determines the percentage)
   *
   * @generated from field: uint64 base_pay_addition = 21;
   */
  basePayAddition = protoInt64.zero;

  /**
   * Stores the divisor with which the base_pay_addition needs to be divided by, in order to get the actual base pay value
   *
   * @generated from field: uint64 divisor = 22;
   */
  divisor = protoInt64.zero;

  /**
   * The minimum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 min_amount = 23;
   */
  minAmount = protoInt64.zero;

  /**
   * The maximum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 max_amount = 24;
   */
  maxAmount = protoInt64.zero;

  /**
   * Stores the amount (in terms of percentage) on which any associated payroll tax is applicable
   *
   * @generated from field: uint64 amount_percentage_on_which_tax_applicable = 25;
   */
  amountPercentageOnWhichTaxApplicable = protoInt64.zero;

  /**
   * An optional description
   *
   * @generated from field: string description = 40;
   */
  description = "";

  constructor(data?: PartialMessage<PayrollGroupItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "payroll_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "payroll_param_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "value_type", kind: "enum", T: proto3.getEnumType(PAYROLL_GROUP_ITEM_VALUE_TYPE) },
    { no: 21, name: "base_pay_addition", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "divisor", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "min_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "max_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "amount_percentage_on_which_tax_applicable", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupItem {
    return new PayrollGroupItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupItem {
    return new PayrollGroupItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupItem {
    return new PayrollGroupItem().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupItem | PlainMessage<PayrollGroupItem> | undefined, b: PayrollGroupItem | PlainMessage<PayrollGroupItem> | undefined): boolean {
    return proto3.util.equals(PayrollGroupItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of payroll groups
 *
 * @generated from message Scailo.PayrollGroupsList
 */
export class PayrollGroupsList extends Message<PayrollGroupsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.PayrollGroup list = 1;
   */
  list: PayrollGroup[] = [];

  constructor(data?: PartialMessage<PayrollGroupsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: PayrollGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsList {
    return new PayrollGroupsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsList {
    return new PayrollGroupsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsList {
    return new PayrollGroupsList().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsList | PlainMessage<PayrollGroupsList> | undefined, b: PayrollGroupsList | PlainMessage<PayrollGroupsList> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of payroll group params
 *
 * @generated from message Scailo.PayrollGroupsItemsList
 */
export class PayrollGroupsItemsList extends Message<PayrollGroupsItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.PayrollGroupItem list = 1;
   */
  list: PayrollGroupItem[] = [];

  constructor(data?: PartialMessage<PayrollGroupsItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: PayrollGroupItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsItemsList {
    return new PayrollGroupsItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsItemsList {
    return new PayrollGroupsItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsItemsList {
    return new PayrollGroupsItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsItemsList | PlainMessage<PayrollGroupsItemsList> | undefined, b: PayrollGroupsItemsList | PlainMessage<PayrollGroupsItemsList> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.PayrollGroupItemHistoryRequest
 */
export class PayrollGroupItemHistoryRequest extends Message<PayrollGroupItemHistoryRequest> {
  /**
   * Stores the ID of the payroll group
   *
   * @generated from field: uint64 payroll_group_id = 10;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The ID of the payroll param that is a part of the payroll group
   *
   * @generated from field: uint64 payroll_param_id = 11;
   */
  payrollParamId = protoInt64.zero;

  constructor(data?: PartialMessage<PayrollGroupItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "payroll_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "payroll_param_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupItemHistoryRequest {
    return new PayrollGroupItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupItemHistoryRequest {
    return new PayrollGroupItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupItemHistoryRequest {
    return new PayrollGroupItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupItemHistoryRequest | PlainMessage<PayrollGroupItemHistoryRequest> | undefined, b: PayrollGroupItemHistoryRequest | PlainMessage<PayrollGroupItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(PayrollGroupItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.PayrollGroupsServicePaginationReq
 */
export class PayrollGroupsServicePaginationReq extends Message<PayrollGroupsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.PAYROLL_GROUP_SORT_KEY sort_key = 5;
   */
  sortKey = PAYROLL_GROUP_SORT_KEY.PAYROLL_GROUP_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this payroll group
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<PayrollGroupsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PAYROLL_GROUP_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsServicePaginationReq {
    return new PayrollGroupsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsServicePaginationReq {
    return new PayrollGroupsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsServicePaginationReq {
    return new PayrollGroupsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsServicePaginationReq | PlainMessage<PayrollGroupsServicePaginationReq> | undefined, b: PayrollGroupsServicePaginationReq | PlainMessage<PayrollGroupsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.PayrollGroupsServicePaginationResponse
 */
export class PayrollGroupsServicePaginationResponse extends Message<PayrollGroupsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.PayrollGroup payload = 4;
   */
  payload: PayrollGroup[] = [];

  constructor(data?: PartialMessage<PayrollGroupsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: PayrollGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsServicePaginationResponse {
    return new PayrollGroupsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsServicePaginationResponse {
    return new PayrollGroupsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsServicePaginationResponse {
    return new PayrollGroupsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsServicePaginationResponse | PlainMessage<PayrollGroupsServicePaginationResponse> | undefined, b: PayrollGroupsServicePaginationResponse | PlainMessage<PayrollGroupsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.PayrollGroupsServiceFilterReq
 */
export class PayrollGroupsServiceFilterReq extends Message<PayrollGroupsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.PAYROLL_GROUP_SORT_KEY sort_key = 5;
   */
  sortKey = PAYROLL_GROUP_SORT_KEY.PAYROLL_GROUP_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this payroll group
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The name of the payroll group
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The payroll param code
   *
   * @generated from field: string code = 21;
   */
  code = "";

  constructor(data?: PartialMessage<PayrollGroupsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PAYROLL_GROUP_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsServiceFilterReq {
    return new PayrollGroupsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsServiceFilterReq {
    return new PayrollGroupsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsServiceFilterReq {
    return new PayrollGroupsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsServiceFilterReq | PlainMessage<PayrollGroupsServiceFilterReq> | undefined, b: PayrollGroupsServiceFilterReq | PlainMessage<PayrollGroupsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.PayrollGroupsServiceCountReq
 */
export class PayrollGroupsServiceCountReq extends Message<PayrollGroupsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this payroll group
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The name of the payroll group
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The payroll param code
   *
   * @generated from field: string code = 21;
   */
  code = "";

  constructor(data?: PartialMessage<PayrollGroupsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsServiceCountReq {
    return new PayrollGroupsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsServiceCountReq {
    return new PayrollGroupsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsServiceCountReq {
    return new PayrollGroupsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsServiceCountReq | PlainMessage<PayrollGroupsServiceCountReq> | undefined, b: PayrollGroupsServiceCountReq | PlainMessage<PayrollGroupsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.PayrollGroupsServiceSearchAllReq
 */
export class PayrollGroupsServiceSearchAllReq extends Message<PayrollGroupsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.PAYROLL_GROUP_SORT_KEY sort_key = 5;
   */
  sortKey = PAYROLL_GROUP_SORT_KEY.PAYROLL_GROUP_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<PayrollGroupsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.PayrollGroupsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PAYROLL_GROUP_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayrollGroupsServiceSearchAllReq {
    return new PayrollGroupsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayrollGroupsServiceSearchAllReq {
    return new PayrollGroupsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayrollGroupsServiceSearchAllReq {
    return new PayrollGroupsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: PayrollGroupsServiceSearchAllReq | PlainMessage<PayrollGroupsServiceSearchAllReq> | undefined, b: PayrollGroupsServiceSearchAllReq | PlainMessage<PayrollGroupsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(PayrollGroupsServiceSearchAllReq, a, b);
  }
}

