// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file qc_groups.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QCGroup, QCGroupItem, QCGroupItemHistoryRequest, QCGroupItemsSearchRequest, QCGroupsItemsList, QCGroupsList, QCGroupsServiceCountReq, QCGroupsServiceCreateRequest, QCGroupsServiceFilterReq, QCGroupsServiceItemCreateRequest, QCGroupsServiceItemUpdateRequest, QCGroupsServicePaginatedItemsResponse, QCGroupsServicePaginationReq, QCGroupsServicePaginationResponse, QCGroupsServiceSearchAllReq, QCGroupsServiceUpdateRequest } from "./qc_groups.scailo_pb.js";
import { ActiveStatus, CloneRequest, CountInSLCStatusRequest, CountResponse, Empty, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDsList, IdentifierUUIDWithFile, IdentifierUUIDWithUserComment, IdentifierWithSearchKey, IdentifierWithUserComment, ReorderItemsRequest, SimpleSearchReq, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each qc group
 *
 * @generated from service Scailo.QCGroupsService
 */
export const QCGroupsService = {
  typeName: "Scailo.QCGroupsService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.QCGroupsService.Create
     */
    create: {
      name: "Create",
      I: QCGroupsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.QCGroupsService.Draft
     */
    draft: {
      name: "Draft",
      I: QCGroupsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.QCGroupsService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: QCGroupsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.QCGroupsService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.QCGroupsService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.QCGroupsService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.QCGroupsService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.QCGroupsService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: QCGroupsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.QCGroupsService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.QCGroupsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.QCGroupsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.QCGroupsService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.QCGroupsService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.QCGroupsService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (IdentifierWithEmailAttributes) returns (IdentifierResponse);
     *
     * @generated from rpc Scailo.QCGroupsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Clone qc group from an existing qc group (denoted by the identifier)
     *
     * @generated from rpc Scailo.QCGroupsService.Clone
     */
    clone: {
      name: "Clone",
      I: CloneRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add a param to a qc group
     *
     * @generated from rpc Scailo.QCGroupsService.AddQCGroupItem
     */
    addQCGroupItem: {
      name: "AddQCGroupItem",
      I: QCGroupsServiceItemCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Modify a param in a qc group
     *
     * @generated from rpc Scailo.QCGroupsService.ModifyQCGroupItem
     */
    modifyQCGroupItem: {
      name: "ModifyQCGroupItem",
      I: QCGroupsServiceItemUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve a param in a qc group
     *
     * @generated from rpc Scailo.QCGroupsService.ApproveQCGroupItem
     */
    approveQCGroupItem: {
      name: "ApproveQCGroupItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a param in a qc group
     *
     * @generated from rpc Scailo.QCGroupsService.DeleteQCGroupItem
     */
    deleteQCGroupItem: {
      name: "DeleteQCGroupItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder params in a qc group
     *
     * @generated from rpc Scailo.QCGroupsService.ReorderQCGroupItems
     */
    reorderQCGroupItems: {
      name: "ReorderQCGroupItems",
      I: ReorderItemsRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View QC Group Item by ID
     *
     * @generated from rpc Scailo.QCGroupsService.ViewQCGroupItemByID
     */
    viewQCGroupItemByID: {
      name: "ViewQCGroupItemByID",
      I: Identifier,
      O: QCGroupItem,
      kind: MethodKind.Unary,
    },
    /**
     * View approved qc group params for given qc group ID
     *
     * @generated from rpc Scailo.QCGroupsService.ViewApprovedQCGroupItems
     */
    viewApprovedQCGroupItems: {
      name: "ViewApprovedQCGroupItems",
      I: IdentifierWithSearchKey,
      O: QCGroupsItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved qc group params for given qc group ID
     *
     * @generated from rpc Scailo.QCGroupsService.ViewUnapprovedQCGroupItems
     */
    viewUnapprovedQCGroupItems: {
      name: "ViewUnapprovedQCGroupItems",
      I: IdentifierWithSearchKey,
      O: QCGroupsItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the qc group item
     *
     * @generated from rpc Scailo.QCGroupsService.ViewQCGroupItemHistory
     */
    viewQCGroupItemHistory: {
      name: "ViewQCGroupItemHistory",
      I: QCGroupItemHistoryRequest,
      O: QCGroupsItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View approved qc group items for given qc group ID with pagination
     *
     * @generated from rpc Scailo.QCGroupsService.ViewPaginatedApprovedQCGroupItems
     */
    viewPaginatedApprovedQCGroupItems: {
      name: "ViewPaginatedApprovedQCGroupItems",
      I: QCGroupItemsSearchRequest,
      O: QCGroupsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved qc group items for given qc group ID with pagination
     *
     * @generated from rpc Scailo.QCGroupsService.ViewPaginatedUnapprovedQCGroupItems
     */
    viewPaginatedUnapprovedQCGroupItems: {
      name: "ViewPaginatedUnapprovedQCGroupItems",
      I: QCGroupItemsSearchRequest,
      O: QCGroupsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through qc group items with pagination
     *
     * @generated from rpc Scailo.QCGroupsService.SearchItemsWithPagination
     */
    searchItemsWithPagination: {
      name: "SearchItemsWithPagination",
      I: QCGroupItemsSearchRequest,
      O: QCGroupsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file with the associated line items. The same file could then be used to upload line items.
     *
     * @generated from rpc Scailo.QCGroupsService.DownloadItemsAsCSV
     */
    downloadItemsAsCSV: {
      name: "DownloadItemsAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download the CSV template that could be used to upload items
     *
     * @generated from rpc Scailo.QCGroupsService.DownloadItemsTemplateAsCSV
     */
    downloadItemsTemplateAsCSV: {
      name: "DownloadItemsTemplateAsCSV",
      I: Empty,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
     *
     * @generated from rpc Scailo.QCGroupsService.UploadQCGroupItems
     */
    uploadQCGroupItems: {
      name: "UploadQCGroupItems",
      I: IdentifierUUIDWithFile,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.QCGroupsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: QCGroup,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.QCGroupsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: QCGroup,
      kind: MethodKind.Unary,
    },
    /**
     * View by Code (returns the latest record in case of duplicates)
     *
     * @generated from rpc Scailo.QCGroupsService.ViewByCode
     */
    viewByCode: {
      name: "ViewByCode",
      I: SimpleSearchReq,
      O: QCGroup,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components by ID (without logs)
     *
     * @generated from rpc Scailo.QCGroupsService.ViewEssentialByID
     */
    viewEssentialByID: {
      name: "ViewEssentialByID",
      I: Identifier,
      O: QCGroup,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components (without logs) that matches the given UUID
     *
     * @generated from rpc Scailo.QCGroupsService.ViewEssentialByUUID
     */
    viewEssentialByUUID: {
      name: "ViewEssentialByUUID",
      I: IdentifierUUID,
      O: QCGroup,
      kind: MethodKind.Unary,
    },
    /**
     * View all records with the given IDs
     *
     * @generated from rpc Scailo.QCGroupsService.ViewFromIDs
     */
    viewFromIDs: {
      name: "ViewFromIDs",
      I: IdentifiersList,
      O: QCGroupsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.QCGroupsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: QCGroupsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.QCGroupsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: QCGroupsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.QCGroupsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: QCGroupsServicePaginationReq,
      O: QCGroupsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.QCGroupsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: QCGroupsServiceSearchAllReq,
      O: QCGroupsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.QCGroupsService.Filter
     */
    filter: {
      name: "Filter",
      I: QCGroupsServiceFilterReq,
      O: QCGroupsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.QCGroupsService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.QCGroupsService.Count
     */
    count: {
      name: "Count",
      I: QCGroupsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
     *
     * @generated from rpc Scailo.QCGroupsService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: QCGroupsServiceFilterReq,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Import records using a CSV file (duplicate codes will be skipped)
     *
     * @generated from rpc Scailo.QCGroupsService.ImportFromCSV
     */
    importFromCSV: {
      name: "ImportFromCSV",
      I: StandardFile,
      O: IdentifierUUIDsList,
      kind: MethodKind.Unary,
    },
  }
} as const;

