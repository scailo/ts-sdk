// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file vendors.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Vendor, VendorItem, VendorItemHistoryRequest, VendorItemsList, VendorItemsSearchRequest, VendorsList, VendorsServiceCountReq, VendorsServiceCreateRequest, VendorsServiceFilterReq, VendorsServiceItemCreateRequest, VendorsServiceItemUpdateRequest, VendorsServicePaginatedItemsResponse, VendorsServicePaginationReq, VendorsServicePaginationResponse, VendorsServiceSearchAllReq, VendorsServiceUpdateRequest } from "./vendors.scailo_pb.js";
import { ActiveStatus, CountInSLCStatusRequest, CountResponse, Identifier, IdentifierUUID, IdentifierWithEmailAttributes, IdentifierWithUserComment } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each vendor
 *
 * @generated from service Scailo.VendorsService
 */
export const VendorsService = {
  typeName: "Scailo.VendorsService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.VendorsService.Create
     */
    create: {
      name: "Create",
      I: VendorsServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.VendorsService.Draft
     */
    draft: {
      name: "Draft",
      I: VendorsServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.VendorsService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: VendorsServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.VendorsService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.VendorsService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.VendorsService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.VendorsService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.VendorsService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: VendorsServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.VendorsService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.VendorsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.VendorsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.VendorsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send Email
     *
     * @generated from rpc Scailo.VendorsService.SendEmail
     */
    sendEmail: {
      name: "SendEmail",
      I: IdentifierWithEmailAttributes,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add an item to a vendor
     *
     * @generated from rpc Scailo.VendorsService.AddVendorItem
     */
    addVendorItem: {
      name: "AddVendorItem",
      I: VendorsServiceItemCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an item in a vendor
     *
     * @generated from rpc Scailo.VendorsService.ModifyVendorItem
     */
    modifyVendorItem: {
      name: "ModifyVendorItem",
      I: VendorsServiceItemUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve an item in a vendor
     *
     * @generated from rpc Scailo.VendorsService.ApproveVendorItem
     */
    approveVendorItem: {
      name: "ApproveVendorItem",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an item in a vendor
     *
     * @generated from rpc Scailo.VendorsService.DeleteVendorItem
     */
    deleteVendorItem: {
      name: "DeleteVendorItem",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder items in a vendor
     * rpc ReorderVendorItems(ReorderItemsRequest) returns (Identifier);
     * View Vendor Item by ID
     *
     * @generated from rpc Scailo.VendorsService.ViewVendorItemByID
     */
    viewVendorItemByID: {
      name: "ViewVendorItemByID",
      I: Identifier,
      O: VendorItem,
      kind: MethodKind.Unary,
    },
    /**
     * View approved vendor items for given vendor ID with pagination
     *
     * @generated from rpc Scailo.VendorsService.ViewPaginatedApprovedVendorItems
     */
    viewPaginatedApprovedVendorItems: {
      name: "ViewPaginatedApprovedVendorItems",
      I: VendorItemsSearchRequest,
      O: VendorsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved vendor items for given vendor ID with pagination
     *
     * @generated from rpc Scailo.VendorsService.ViewPaginatedUnapprovedVendorItems
     */
    viewPaginatedUnapprovedVendorItems: {
      name: "ViewPaginatedUnapprovedVendorItems",
      I: VendorItemsSearchRequest,
      O: VendorsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the vendor item
     *
     * @generated from rpc Scailo.VendorsService.ViewVendorItemHistory
     */
    viewVendorItemHistory: {
      name: "ViewVendorItemHistory",
      I: VendorItemHistoryRequest,
      O: VendorItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * Search through vendor items with pagination
     *
     * @generated from rpc Scailo.VendorsService.SearchItemsWithPagination
     */
    searchItemsWithPagination: {
      name: "SearchItemsWithPagination",
      I: VendorItemsSearchRequest,
      O: VendorsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.VendorsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Vendor,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.VendorsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: VendorsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.VendorsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: VendorsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.VendorsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: VendorsServicePaginationReq,
      O: VendorsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View vendors that have been associated with the given family ID (returns vendors that have not been approved for the family as well)
     *
     * @generated from rpc Scailo.VendorsService.ViewVendorsForFamily
     */
    viewVendorsForFamily: {
      name: "ViewVendorsForFamily",
      I: Identifier,
      O: VendorsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.VendorsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: VendorsServiceSearchAllReq,
      O: VendorsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.VendorsService.Filter
     */
    filter: {
      name: "Filter",
      I: VendorsServiceFilterReq,
      O: VendorsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.VendorsService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.VendorsService.Count
     */
    count: {
      name: "Count",
      I: VendorsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

