// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file locations.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest, FormFieldDatumFilterRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.LOCATION_SORT_KEY
 */
export enum LOCATION_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: LOCATION_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  LOCATION_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: LOCATION_SORT_KEY_CREATED_AT = 1;
   */
  LOCATION_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: LOCATION_SORT_KEY_MODIFIED_AT = 2;
   */
  LOCATION_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: LOCATION_SORT_KEY_APPROVED_ON = 3;
   */
  LOCATION_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: LOCATION_SORT_KEY_APPROVED_BY = 4;
   */
  LOCATION_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: LOCATION_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  LOCATION_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the name
   *
   * @generated from enum value: LOCATION_SORT_KEY_NAME = 10;
   */
  LOCATION_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by the code
   *
   * @generated from enum value: LOCATION_SORT_KEY_CODE = 11;
   */
  LOCATION_SORT_KEY_CODE = 11,

  /**
   * Fetch ordered results by the email address
   *
   * @generated from enum value: LOCATION_SORT_KEY_EMAIL = 12;
   */
  LOCATION_SORT_KEY_EMAIL = 12,

  /**
   * Fetch ordered results by the phone number
   *
   * @generated from enum value: LOCATION_SORT_KEY_PHONE = 13;
   */
  LOCATION_SORT_KEY_PHONE = 13,
}
// Retrieve enum metadata with: proto3.getEnumType(LOCATION_SORT_KEY)
proto3.util.setEnumType(LOCATION_SORT_KEY, "Scailo.LOCATION_SORT_KEY", [
  { no: 0, name: "LOCATION_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "LOCATION_SORT_KEY_CREATED_AT" },
  { no: 2, name: "LOCATION_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "LOCATION_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "LOCATION_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "LOCATION_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "LOCATION_SORT_KEY_NAME" },
  { no: 11, name: "LOCATION_SORT_KEY_CODE" },
  { no: 12, name: "LOCATION_SORT_KEY_EMAIL" },
  { no: 13, name: "LOCATION_SORT_KEY_PHONE" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.LocationsServiceCreateRequest
 */
export class LocationsServiceCreateRequest extends Message<LocationsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The name of the location
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The unique code by which the location is classified
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The primary email of the location
   *
   * @generated from field: string email = 12;
   */
  email = "";

  /**
   * The primary contact number of the location
   *
   * @generated from field: string phone = 13;
   */
  phone = "";

  /**
   * The ID of the associated non-leaf parent location (0, if the first location that is being created is a leaf location)
   *
   * @generated from field: uint64 parent_location_id = 14;
   */
  parentLocationId = protoInt64.zero;

  /**
   * Stores if this is a leaf location or a non-leaf location
   *
   * @generated from field: bool is_leaf = 15;
   */
  isLeaf = false;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<LocationsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LocationsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "parent_location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "is_leaf", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationsServiceCreateRequest {
    return new LocationsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationsServiceCreateRequest {
    return new LocationsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationsServiceCreateRequest {
    return new LocationsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LocationsServiceCreateRequest | PlainMessage<LocationsServiceCreateRequest> | undefined, b: LocationsServiceCreateRequest | PlainMessage<LocationsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(LocationsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.LocationsServiceUpdateRequest
 */
export class LocationsServiceUpdateRequest extends Message<LocationsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The name of the location
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * // The unique code by which the location is classified
   * string code = 11 [(buf.validate.field).string = {
   *   // pattern:   "^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$",
   *   min_len: 1
   * }];
   * The primary email of the location
   *
   * @generated from field: string email = 12;
   */
  email = "";

  /**
   * The primary contact number of the location
   *
   * @generated from field: string phone = 13;
   */
  phone = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<LocationsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LocationsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationsServiceUpdateRequest {
    return new LocationsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationsServiceUpdateRequest {
    return new LocationsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationsServiceUpdateRequest {
    return new LocationsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LocationsServiceUpdateRequest | PlainMessage<LocationsServiceUpdateRequest> | undefined, b: LocationsServiceUpdateRequest | PlainMessage<LocationsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(LocationsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.Location
 */
export class Location extends Message<Location> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this location
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this location
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this location
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The name of the location
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The unique code by which the location is classified
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The primary email of the location
   *
   * @generated from field: string email = 12;
   */
  email = "";

  /**
   * The primary contact number of the location
   *
   * @generated from field: string phone = 13;
   */
  phone = "";

  /**
   * The ID of the associated non-leaf parent location (0, if the first location that is being created is a leaf location)
   *
   * @generated from field: uint64 parent_location_id = 14;
   */
  parentLocationId = protoInt64.zero;

  /**
   * Stores if this is a leaf location or a non-leaf location
   *
   * @generated from field: bool is_leaf = 15;
   */
  isLeaf = false;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 30;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "parent_location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "is_leaf", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location {
    return new Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJsonString(jsonString, options);
  }

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean {
    return proto3.util.equals(Location, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.LocationsList
 */
export class LocationsList extends Message<LocationsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.Location list = 1;
   */
  list: Location[] = [];

  constructor(data?: PartialMessage<LocationsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LocationsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Location, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationsList {
    return new LocationsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationsList {
    return new LocationsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationsList {
    return new LocationsList().fromJsonString(jsonString, options);
  }

  static equals(a: LocationsList | PlainMessage<LocationsList> | undefined, b: LocationsList | PlainMessage<LocationsList> | undefined): boolean {
    return proto3.util.equals(LocationsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.LocationsServicePaginationReq
 */
export class LocationsServicePaginationReq extends Message<LocationsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.LOCATION_SORT_KEY sort_key = 5;
   */
  sortKey = LOCATION_SORT_KEY.LOCATION_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this location
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<LocationsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LocationsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(LOCATION_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationsServicePaginationReq {
    return new LocationsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationsServicePaginationReq {
    return new LocationsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationsServicePaginationReq {
    return new LocationsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: LocationsServicePaginationReq | PlainMessage<LocationsServicePaginationReq> | undefined, b: LocationsServicePaginationReq | PlainMessage<LocationsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(LocationsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.LocationsServicePaginationResponse
 */
export class LocationsServicePaginationResponse extends Message<LocationsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.Location payload = 4;
   */
  payload: Location[] = [];

  constructor(data?: PartialMessage<LocationsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LocationsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: Location, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationsServicePaginationResponse {
    return new LocationsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationsServicePaginationResponse {
    return new LocationsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationsServicePaginationResponse {
    return new LocationsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LocationsServicePaginationResponse | PlainMessage<LocationsServicePaginationResponse> | undefined, b: LocationsServicePaginationResponse | PlainMessage<LocationsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(LocationsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.LocationsServiceFilterReq
 */
export class LocationsServiceFilterReq extends Message<LocationsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.LOCATION_SORT_KEY sort_key = 5;
   */
  sortKey = LOCATION_SORT_KEY.LOCATION_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this location
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The name of the location
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The unique code by which the location is classified
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The primary email of the location
   *
   * @generated from field: string email = 22;
   */
  email = "";

  /**
   * The primary contact number of the location
   *
   * @generated from field: string phone = 23;
   */
  phone = "";

  /**
   * The ID of the associated non-leaf parent location (0, if the first location that is being created is a leaf location)
   *
   * @generated from field: uint64 parent_location_id = 24;
   */
  parentLocationId = protoInt64.zero;

  /**
   * Stores if this is a leaf location or a non-leaf location
   *
   * @generated from field: Scailo.BOOL_FILTER is_leaf = 25;
   */
  isLeaf = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The list of form data filters
   *
   * @generated from field: repeated Scailo.FormFieldDatumFilterRequest form_data = 500;
   */
  formData: FormFieldDatumFilterRequest[] = [];

  constructor(data?: PartialMessage<LocationsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LocationsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(LOCATION_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "parent_location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "is_leaf", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 500, name: "form_data", kind: "message", T: FormFieldDatumFilterRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationsServiceFilterReq {
    return new LocationsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationsServiceFilterReq {
    return new LocationsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationsServiceFilterReq {
    return new LocationsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: LocationsServiceFilterReq | PlainMessage<LocationsServiceFilterReq> | undefined, b: LocationsServiceFilterReq | PlainMessage<LocationsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(LocationsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.LocationsServiceCountReq
 */
export class LocationsServiceCountReq extends Message<LocationsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this location
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The name of the location
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The unique code by which the location is classified
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The primary email of the location
   *
   * @generated from field: string email = 22;
   */
  email = "";

  /**
   * The primary contact number of the location
   *
   * @generated from field: string phone = 23;
   */
  phone = "";

  /**
   * The ID of the associated non-leaf parent location (0, if the first location that is being created is a leaf location)
   *
   * @generated from field: uint64 parent_location_id = 24;
   */
  parentLocationId = protoInt64.zero;

  /**
   * Stores if this is a leaf location or a non-leaf location
   *
   * @generated from field: Scailo.BOOL_FILTER is_leaf = 25;
   */
  isLeaf = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The list of form data filters
   *
   * @generated from field: repeated Scailo.FormFieldDatumFilterRequest form_data = 500;
   */
  formData: FormFieldDatumFilterRequest[] = [];

  constructor(data?: PartialMessage<LocationsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LocationsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "parent_location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "is_leaf", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 500, name: "form_data", kind: "message", T: FormFieldDatumFilterRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationsServiceCountReq {
    return new LocationsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationsServiceCountReq {
    return new LocationsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationsServiceCountReq {
    return new LocationsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: LocationsServiceCountReq | PlainMessage<LocationsServiceCountReq> | undefined, b: LocationsServiceCountReq | PlainMessage<LocationsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(LocationsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.LocationsServiceSearchAllReq
 */
export class LocationsServiceSearchAllReq extends Message<LocationsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.LOCATION_SORT_KEY sort_key = 5;
   */
  sortKey = LOCATION_SORT_KEY.LOCATION_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The ID of the associated non-leaf parent location (0, if the first location that is being created is a leaf location)
   *
   * @generated from field: uint64 parent_location_id = 24;
   */
  parentLocationId = protoInt64.zero;

  /**
   * Stores if this is a leaf location or a non-leaf location
   *
   * @generated from field: Scailo.BOOL_FILTER is_leaf = 25;
   */
  isLeaf = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<LocationsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LocationsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(LOCATION_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "parent_location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "is_leaf", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationsServiceSearchAllReq {
    return new LocationsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationsServiceSearchAllReq {
    return new LocationsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationsServiceSearchAllReq {
    return new LocationsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: LocationsServiceSearchAllReq | PlainMessage<LocationsServiceSearchAllReq> | undefined, b: LocationsServiceSearchAllReq | PlainMessage<LocationsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(LocationsServiceSearchAllReq, a, b);
  }
}

