// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file debit_notes.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.DEBIT_NOTE_ITEM_SORT_KEY
 */
export enum DEBIT_NOTE_ITEM_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_CREATED_AT = 1;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_MODIFIED_AT = 2;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_APPROVED_ON = 3;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_APPROVED_BY = 4;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the family ID
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_FAMILY_ID = 10;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_FAMILY_ID = 10,

  /**
   * Fetch ordered results by the internal quantity
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_INTERNAL_QUANTITY = 11;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_INTERNAL_QUANTITY = 11,

  /**
   * Fetch ordered results by the vendor unit of material ID
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_VENDOR_UOM_ID = 12;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_VENDOR_UOM_ID = 12,

  /**
   * Fetch ordered results by the vendor quantity
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_VENDOR_QUANTITY = 13;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_VENDOR_QUANTITY = 13,

  /**
   * Fetch ordered results by the vendor unit price
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_VENDOR_UNIT_PRICE = 14;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_VENDOR_UNIT_PRICE = 14,

  /**
   * Fetch ordered results by the tax group ID
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_SORT_KEY_TAX_GROUP_ID = 16;
   */
  DEBIT_NOTE_ITEM_SORT_KEY_TAX_GROUP_ID = 16,
}
// Retrieve enum metadata with: proto3.getEnumType(DEBIT_NOTE_ITEM_SORT_KEY)
proto3.util.setEnumType(DEBIT_NOTE_ITEM_SORT_KEY, "Scailo.DEBIT_NOTE_ITEM_SORT_KEY", [
  { no: 0, name: "DEBIT_NOTE_ITEM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "DEBIT_NOTE_ITEM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "DEBIT_NOTE_ITEM_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "DEBIT_NOTE_ITEM_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "DEBIT_NOTE_ITEM_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "DEBIT_NOTE_ITEM_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "DEBIT_NOTE_ITEM_SORT_KEY_FAMILY_ID" },
  { no: 11, name: "DEBIT_NOTE_ITEM_SORT_KEY_INTERNAL_QUANTITY" },
  { no: 12, name: "DEBIT_NOTE_ITEM_SORT_KEY_VENDOR_UOM_ID" },
  { no: 13, name: "DEBIT_NOTE_ITEM_SORT_KEY_VENDOR_QUANTITY" },
  { no: 14, name: "DEBIT_NOTE_ITEM_SORT_KEY_VENDOR_UNIT_PRICE" },
  { no: 16, name: "DEBIT_NOTE_ITEM_SORT_KEY_TAX_GROUP_ID" },
]);

/**
 *
 * Describes the applicable statuses of debit note items
 *
 * @generated from enum Scailo.DEBIT_NOTE_ITEM_STATUS
 */
export enum DEBIT_NOTE_ITEM_STATUS {
  /**
   * Denotes that status be disregarded. This is used only within search APIs
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_STATUS_ANY_UNSPECIFIED = 0;
   */
  DEBIT_NOTE_ITEM_STATUS_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the debit note items must have been approved
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_STATUS_APPROVED = 1;
   */
  DEBIT_NOTE_ITEM_STATUS_APPROVED = 1,

  /**
   * Denotes that the debit note items must be waiting for approval
   *
   * @generated from enum value: DEBIT_NOTE_ITEM_STATUS_UNAPPROVED = 2;
   */
  DEBIT_NOTE_ITEM_STATUS_UNAPPROVED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DEBIT_NOTE_ITEM_STATUS)
proto3.util.setEnumType(DEBIT_NOTE_ITEM_STATUS, "Scailo.DEBIT_NOTE_ITEM_STATUS", [
  { no: 0, name: "DEBIT_NOTE_ITEM_STATUS_ANY_UNSPECIFIED" },
  { no: 1, name: "DEBIT_NOTE_ITEM_STATUS_APPROVED" },
  { no: 2, name: "DEBIT_NOTE_ITEM_STATUS_UNAPPROVED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.DEBIT_NOTE_SORT_KEY
 */
export enum DEBIT_NOTE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: DEBIT_NOTE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  DEBIT_NOTE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: DEBIT_NOTE_SORT_KEY_CREATED_AT = 1;
   */
  DEBIT_NOTE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: DEBIT_NOTE_SORT_KEY_MODIFIED_AT = 2;
   */
  DEBIT_NOTE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: DEBIT_NOTE_SORT_KEY_APPROVED_ON = 3;
   */
  DEBIT_NOTE_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: DEBIT_NOTE_SORT_KEY_APPROVED_BY = 4;
   */
  DEBIT_NOTE_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: DEBIT_NOTE_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  DEBIT_NOTE_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: DEBIT_NOTE_SORT_KEY_COMPLETED_ON = 6;
   */
  DEBIT_NOTE_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: DEBIT_NOTE_SORT_KEY_REFERENCE_ID = 10;
   */
  DEBIT_NOTE_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: DEBIT_NOTE_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  DEBIT_NOTE_SORT_KEY_FINAL_REF_NUMBER = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(DEBIT_NOTE_SORT_KEY)
proto3.util.setEnumType(DEBIT_NOTE_SORT_KEY, "Scailo.DEBIT_NOTE_SORT_KEY", [
  { no: 0, name: "DEBIT_NOTE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "DEBIT_NOTE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "DEBIT_NOTE_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "DEBIT_NOTE_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "DEBIT_NOTE_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "DEBIT_NOTE_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "DEBIT_NOTE_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "DEBIT_NOTE_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "DEBIT_NOTE_SORT_KEY_FINAL_REF_NUMBER" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.DebitNotesServiceCreateRequest
 */
export class DebitNotesServiceCreateRequest extends Message<DebitNotesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the debit note
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The associated ID of the currency
   *
   * @generated from field: uint64 currency_id = 14;
   */
  currencyId = protoInt64.zero;

  /**
   * Any miscellaneous cost
   *
   * @generated from field: uint64 miscellaneous_cost = 15;
   */
  miscellaneousCost = protoInt64.zero;

  /**
   * The optional discount amount
   *
   * @generated from field: uint64 overall_discount = 16;
   */
  overallDiscount = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 17;
   */
  roundOff = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<DebitNotesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "miscellaneous_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "overall_discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceCreateRequest {
    return new DebitNotesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceCreateRequest {
    return new DebitNotesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceCreateRequest {
    return new DebitNotesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceCreateRequest | PlainMessage<DebitNotesServiceCreateRequest> | undefined, b: DebitNotesServiceCreateRequest | PlainMessage<DebitNotesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.DebitNotesServiceUpdateRequest
 */
export class DebitNotesServiceUpdateRequest extends Message<DebitNotesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the debit note
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The associated ID of the currency
   *
   * @generated from field: uint64 currency_id = 14;
   */
  currencyId = protoInt64.zero;

  /**
   * Any miscellaneous cost
   *
   * @generated from field: uint64 miscellaneous_cost = 15;
   */
  miscellaneousCost = protoInt64.zero;

  /**
   * The optional discount amount
   *
   * @generated from field: uint64 overall_discount = 16;
   */
  overallDiscount = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 17;
   */
  roundOff = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<DebitNotesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "miscellaneous_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "overall_discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceUpdateRequest {
    return new DebitNotesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceUpdateRequest {
    return new DebitNotesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceUpdateRequest {
    return new DebitNotesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceUpdateRequest | PlainMessage<DebitNotesServiceUpdateRequest> | undefined, b: DebitNotesServiceUpdateRequest | PlainMessage<DebitNotesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to perform an autofill request
 *
 * @generated from message Scailo.DebitNotesServiceAutofillRequest
 */
export class DebitNotesServiceAutofillRequest extends Message<DebitNotesServiceAutofillRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the record that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  constructor(data?: PartialMessage<DebitNotesServiceAutofillRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceAutofillRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceAutofillRequest {
    return new DebitNotesServiceAutofillRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceAutofillRequest {
    return new DebitNotesServiceAutofillRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceAutofillRequest {
    return new DebitNotesServiceAutofillRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceAutofillRequest | PlainMessage<DebitNotesServiceAutofillRequest> | undefined, b: DebitNotesServiceAutofillRequest | PlainMessage<DebitNotesServiceAutofillRequest> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceAutofillRequest, a, b);
  }
}

/**
 *
 * Stores the UUID references of the record
 *
 * @generated from message Scailo.DebitNoteAncillaryParameters
 */
export class DebitNoteAncillaryParameters extends Message<DebitNoteAncillaryParameters> {
  /**
   * The UUID of the ref_id (the UUID of the associated ref_id)
   *
   * @generated from field: string ref_uuid = 213;
   */
  refUuid = "";

  /**
   * The UUID of the currency (the UUID of the associated currency)
   *
   * @generated from field: string currency_uuid = 214;
   */
  currencyUuid = "";

  constructor(data?: PartialMessage<DebitNoteAncillaryParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNoteAncillaryParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 213, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 214, name: "currency_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNoteAncillaryParameters {
    return new DebitNoteAncillaryParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNoteAncillaryParameters {
    return new DebitNoteAncillaryParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNoteAncillaryParameters {
    return new DebitNoteAncillaryParameters().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNoteAncillaryParameters | PlainMessage<DebitNoteAncillaryParameters> | undefined, b: DebitNoteAncillaryParameters | PlainMessage<DebitNoteAncillaryParameters> | undefined): boolean {
    return proto3.util.equals(DebitNoteAncillaryParameters, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.DebitNote
 */
export class DebitNote extends Message<DebitNote> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this debit note
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this debit note
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this debit note
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this debit note was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the debit note
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The associated ID of the currency
   *
   * @generated from field: uint64 currency_id = 14;
   */
  currencyId = protoInt64.zero;

  /**
   * Any miscellaneous cost
   *
   * @generated from field: uint64 miscellaneous_cost = 15;
   */
  miscellaneousCost = protoInt64.zero;

  /**
   * The optional discount amount
   *
   * @generated from field: uint64 overall_discount = 16;
   */
  overallDiscount = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 17;
   */
  roundOff = protoInt64.zero;

  /**
   * Stores the total value of the debit note (as a double, which requires no adjustments)
   *
   * @generated from field: double total_value = 20;
   */
  totalValue = 0;

  /**
   * The list of associated debit note items
   *
   * @generated from field: repeated Scailo.DebitNoteItem list = 30;
   */
  list: DebitNoteItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 40;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<DebitNote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "miscellaneous_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "overall_discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "total_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 30, name: "list", kind: "message", T: DebitNoteItem, repeated: true },
    { no: 40, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNote {
    return new DebitNote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNote {
    return new DebitNote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNote {
    return new DebitNote().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNote | PlainMessage<DebitNote> | undefined, b: DebitNote | PlainMessage<DebitNote> | undefined): boolean {
    return proto3.util.equals(DebitNote, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an item to a debit note
 *
 * @generated from message Scailo.DebitNotesServiceItemCreateRequest
 */
export class DebitNotesServiceItemCreateRequest extends Message<DebitNotesServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the debit note ID
   *
   * @generated from field: uint64 debit_note_id = 10;
   */
  debitNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * The quantity (in cents) being admitted in internal unit of material
   *
   * @generated from field: uint64 internal_quantity = 12;
   */
  internalQuantity = protoInt64.zero;

  /**
   * Stores the ID of the vendor's unit of material
   *
   * @generated from field: uint64 vendor_uom_id = 13;
   */
  vendorUomId = protoInt64.zero;

  /**
   * Stores the quantity (in cents) being admitted in vendor's unit of material
   *
   * @generated from field: uint64 vendor_quantity = 14;
   */
  vendorQuantity = protoInt64.zero;

  /**
   * The unit price of the item (as supplied by the vendor)
   *
   * @generated from field: uint64 vendor_unit_price = 15;
   */
  vendorUnitPrice = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 16;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 17;
   */
  roundOff = protoInt64.zero;

  /**
   * Optional specifications
   *
   * @generated from field: string specifications = 18;
   */
  specifications = "";

  constructor(data?: PartialMessage<DebitNotesServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "debit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "internal_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "vendor_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "vendor_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "vendor_unit_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceItemCreateRequest {
    return new DebitNotesServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceItemCreateRequest {
    return new DebitNotesServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceItemCreateRequest {
    return new DebitNotesServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceItemCreateRequest | PlainMessage<DebitNotesServiceItemCreateRequest> | undefined, b: DebitNotesServiceItemCreateRequest | PlainMessage<DebitNotesServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an item in a debit note
 *
 * @generated from message Scailo.DebitNotesServiceItemUpdateRequest
 */
export class DebitNotesServiceItemUpdateRequest extends Message<DebitNotesServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The quantity (in cents) being admitted in internal unit of material
   *
   * @generated from field: uint64 internal_quantity = 12;
   */
  internalQuantity = protoInt64.zero;

  /**
   * Stores the ID of the vendor's unit of material
   *
   * @generated from field: uint64 vendor_uom_id = 13;
   */
  vendorUomId = protoInt64.zero;

  /**
   * Stores the quantity (in cents) being admitted in vendor's unit of material
   *
   * @generated from field: uint64 vendor_quantity = 14;
   */
  vendorQuantity = protoInt64.zero;

  /**
   * The unit price of the item (as supplied by the vendor)
   *
   * @generated from field: uint64 vendor_unit_price = 15;
   */
  vendorUnitPrice = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 16;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 17;
   */
  roundOff = protoInt64.zero;

  /**
   * Optional specifications
   *
   * @generated from field: string specifications = 18;
   */
  specifications = "";

  constructor(data?: PartialMessage<DebitNotesServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "internal_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "vendor_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "vendor_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "vendor_unit_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceItemUpdateRequest {
    return new DebitNotesServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceItemUpdateRequest {
    return new DebitNotesServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceItemUpdateRequest {
    return new DebitNotesServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceItemUpdateRequest | PlainMessage<DebitNotesServiceItemUpdateRequest> | undefined, b: DebitNotesServiceItemUpdateRequest | PlainMessage<DebitNotesServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an item associated to a debit note
 *
 * @generated from message Scailo.DebitNoteItem
 */
export class DebitNoteItem extends Message<DebitNoteItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this debit note
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the debit note ID
   *
   * @generated from field: uint64 debit_note_id = 10;
   */
  debitNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * The quantity (in cents) being admitted in internal unit of material
   *
   * @generated from field: uint64 internal_quantity = 12;
   */
  internalQuantity = protoInt64.zero;

  /**
   * Stores the ID of the vendor's unit of material
   *
   * @generated from field: uint64 vendor_uom_id = 13;
   */
  vendorUomId = protoInt64.zero;

  /**
   * Stores the quantity (in cents) being admitted in vendor's unit of material
   *
   * @generated from field: uint64 vendor_quantity = 14;
   */
  vendorQuantity = protoInt64.zero;

  /**
   * The unit price of the item (as supplied by the vendor)
   *
   * @generated from field: uint64 vendor_unit_price = 15;
   */
  vendorUnitPrice = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 16;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 17;
   */
  roundOff = protoInt64.zero;

  /**
   * Optional specifications
   *
   * @generated from field: string specifications = 18;
   */
  specifications = "";

  constructor(data?: PartialMessage<DebitNoteItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNoteItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "debit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "internal_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "vendor_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "vendor_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "vendor_unit_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNoteItem {
    return new DebitNoteItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNoteItem {
    return new DebitNoteItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNoteItem {
    return new DebitNoteItem().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNoteItem | PlainMessage<DebitNoteItem> | undefined, b: DebitNoteItem | PlainMessage<DebitNoteItem> | undefined): boolean {
    return proto3.util.equals(DebitNoteItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of debit notes
 *
 * @generated from message Scailo.DebitNotesList
 */
export class DebitNotesList extends Message<DebitNotesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.DebitNote list = 1;
   */
  list: DebitNote[] = [];

  constructor(data?: PartialMessage<DebitNotesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: DebitNote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesList {
    return new DebitNotesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesList {
    return new DebitNotesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesList {
    return new DebitNotesList().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesList | PlainMessage<DebitNotesList> | undefined, b: DebitNotesList | PlainMessage<DebitNotesList> | undefined): boolean {
    return proto3.util.equals(DebitNotesList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of debit note items
 *
 * @generated from message Scailo.DebitNoteItemsList
 */
export class DebitNoteItemsList extends Message<DebitNoteItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.DebitNoteItem list = 1;
   */
  list: DebitNoteItem[] = [];

  constructor(data?: PartialMessage<DebitNoteItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNoteItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: DebitNoteItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNoteItemsList {
    return new DebitNoteItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNoteItemsList {
    return new DebitNoteItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNoteItemsList {
    return new DebitNoteItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNoteItemsList | PlainMessage<DebitNoteItemsList> | undefined, b: DebitNoteItemsList | PlainMessage<DebitNoteItemsList> | undefined): boolean {
    return proto3.util.equals(DebitNoteItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.DebitNoteItemHistoryRequest
 */
export class DebitNoteItemHistoryRequest extends Message<DebitNoteItemHistoryRequest> {
  /**
   * Stores the debit note ID
   *
   * @generated from field: uint64 debit_note_id = 10;
   */
  debitNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<DebitNoteItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNoteItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "debit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNoteItemHistoryRequest {
    return new DebitNoteItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNoteItemHistoryRequest {
    return new DebitNoteItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNoteItemHistoryRequest {
    return new DebitNoteItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNoteItemHistoryRequest | PlainMessage<DebitNoteItemHistoryRequest> | undefined, b: DebitNoteItemHistoryRequest | PlainMessage<DebitNoteItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(DebitNoteItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the info of a prospective debit note item
 *
 * @generated from message Scailo.DebitNoteItemProspectiveInfoRequest
 */
export class DebitNoteItemProspectiveInfoRequest extends Message<DebitNoteItemProspectiveInfoRequest> {
  /**
   * Stores the debit note ID
   *
   * @generated from field: uint64 debit_note_id = 10;
   */
  debitNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<DebitNoteItemProspectiveInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNoteItemProspectiveInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "debit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNoteItemProspectiveInfoRequest {
    return new DebitNoteItemProspectiveInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNoteItemProspectiveInfoRequest {
    return new DebitNoteItemProspectiveInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNoteItemProspectiveInfoRequest {
    return new DebitNoteItemProspectiveInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNoteItemProspectiveInfoRequest | PlainMessage<DebitNoteItemProspectiveInfoRequest> | undefined, b: DebitNoteItemProspectiveInfoRequest | PlainMessage<DebitNoteItemProspectiveInfoRequest> | undefined): boolean {
    return proto3.util.equals(DebitNoteItemProspectiveInfoRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve the quantity that has already been added for the specific ref_from, ref_id and family_id
 *
 * @generated from message Scailo.DebitNotesServiceAlreadyAddedQuantityForSourceRequest
 */
export class DebitNotesServiceAlreadyAddedQuantityForSourceRequest extends Message<DebitNotesServiceAlreadyAddedQuantityForSourceRequest> {
  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 1;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 2;
   */
  refId = protoInt64.zero;

  /**
   * The associated family ID
   *
   * @generated from field: uint64 family_id = 3;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<DebitNotesServiceAlreadyAddedQuantityForSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceAlreadyAddedQuantityForSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceAlreadyAddedQuantityForSourceRequest {
    return new DebitNotesServiceAlreadyAddedQuantityForSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceAlreadyAddedQuantityForSourceRequest {
    return new DebitNotesServiceAlreadyAddedQuantityForSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceAlreadyAddedQuantityForSourceRequest {
    return new DebitNotesServiceAlreadyAddedQuantityForSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceAlreadyAddedQuantityForSourceRequest | PlainMessage<DebitNotesServiceAlreadyAddedQuantityForSourceRequest> | undefined, b: DebitNotesServiceAlreadyAddedQuantityForSourceRequest | PlainMessage<DebitNotesServiceAlreadyAddedQuantityForSourceRequest> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceAlreadyAddedQuantityForSourceRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve approved or unapproved items.
 *
 * @generated from message Scailo.DebitNoteItemsSearchRequest
 */
export class DebitNoteItemsSearchRequest extends Message<DebitNoteItemsSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.DEBIT_NOTE_ITEM_SORT_KEY sort_key = 5;
   */
  sortKey = DEBIT_NOTE_ITEM_SORT_KEY.DEBIT_NOTE_ITEM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The status of the items
   *
   * @generated from field: Scailo.DEBIT_NOTE_ITEM_STATUS status = 7;
   */
  status = DEBIT_NOTE_ITEM_STATUS.DEBIT_NOTE_ITEM_STATUS_ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 10;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 11;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 12;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 13;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The ID of the debit note
   *
   * @generated from field: uint64 debit_note_id = 20;
   */
  debitNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 21;
   */
  familyId = protoInt64.zero;

  /**
   * The ID of the vendor's unit of material
   *
   * @generated from field: uint64 vendor_uom_id = 23;
   */
  vendorUomId = protoInt64.zero;

  /**
   * The ID of the tax group
   *
   * @generated from field: uint64 tax_group_id = 27;
   */
  taxGroupId = protoInt64.zero;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<DebitNoteItemsSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNoteItemsSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(DEBIT_NOTE_ITEM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(DEBIT_NOTE_ITEM_STATUS) },
    { no: 10, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "debit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "vendor_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNoteItemsSearchRequest {
    return new DebitNoteItemsSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNoteItemsSearchRequest {
    return new DebitNoteItemsSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNoteItemsSearchRequest {
    return new DebitNoteItemsSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNoteItemsSearchRequest | PlainMessage<DebitNoteItemsSearchRequest> | undefined, b: DebitNoteItemsSearchRequest | PlainMessage<DebitNoteItemsSearchRequest> | undefined): boolean {
    return proto3.util.equals(DebitNoteItemsSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination items request
 *
 * @generated from message Scailo.DebitNotesServicePaginatedItemsResponse
 */
export class DebitNotesServicePaginatedItemsResponse extends Message<DebitNotesServicePaginatedItemsResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.DebitNoteItem payload = 4;
   */
  payload: DebitNoteItem[] = [];

  constructor(data?: PartialMessage<DebitNotesServicePaginatedItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServicePaginatedItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: DebitNoteItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServicePaginatedItemsResponse {
    return new DebitNotesServicePaginatedItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServicePaginatedItemsResponse {
    return new DebitNotesServicePaginatedItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServicePaginatedItemsResponse {
    return new DebitNotesServicePaginatedItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServicePaginatedItemsResponse | PlainMessage<DebitNotesServicePaginatedItemsResponse> | undefined, b: DebitNotesServicePaginatedItemsResponse | PlainMessage<DebitNotesServicePaginatedItemsResponse> | undefined): boolean {
    return proto3.util.equals(DebitNotesServicePaginatedItemsResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.DebitNotesServicePaginationReq
 */
export class DebitNotesServicePaginationReq extends Message<DebitNotesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.DEBIT_NOTE_SORT_KEY sort_key = 5;
   */
  sortKey = DEBIT_NOTE_SORT_KEY.DEBIT_NOTE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this debit note
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<DebitNotesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(DEBIT_NOTE_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServicePaginationReq {
    return new DebitNotesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServicePaginationReq {
    return new DebitNotesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServicePaginationReq {
    return new DebitNotesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServicePaginationReq | PlainMessage<DebitNotesServicePaginationReq> | undefined, b: DebitNotesServicePaginationReq | PlainMessage<DebitNotesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(DebitNotesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.DebitNotesServicePaginationResponse
 */
export class DebitNotesServicePaginationResponse extends Message<DebitNotesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.DebitNote payload = 4;
   */
  payload: DebitNote[] = [];

  constructor(data?: PartialMessage<DebitNotesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: DebitNote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServicePaginationResponse {
    return new DebitNotesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServicePaginationResponse {
    return new DebitNotesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServicePaginationResponse {
    return new DebitNotesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServicePaginationResponse | PlainMessage<DebitNotesServicePaginationResponse> | undefined, b: DebitNotesServicePaginationResponse | PlainMessage<DebitNotesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(DebitNotesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.DebitNotesServiceFilterReq
 */
export class DebitNotesServiceFilterReq extends Message<DebitNotesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.DEBIT_NOTE_SORT_KEY sort_key = 5;
   */
  sortKey = DEBIT_NOTE_SORT_KEY.DEBIT_NOTE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this debit note
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the debit note
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 22;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 23;
   */
  refId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: uint64 currency_id = 30;
   */
  currencyId = protoInt64.zero;

  /**
   * The ID of the associated vendor
   *
   * @generated from field: uint64 vendor_id = 31;
   */
  vendorId = protoInt64.zero;

  /**
   * The ID of the associated project
   *
   * @generated from field: uint64 project_id = 32;
   */
  projectId = protoInt64.zero;

  /**
   * The ID of the family
   *
   * @generated from field: uint64 family_id = 40;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<DebitNotesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(DEBIT_NOTE_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 31, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 32, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceFilterReq {
    return new DebitNotesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceFilterReq {
    return new DebitNotesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceFilterReq {
    return new DebitNotesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceFilterReq | PlainMessage<DebitNotesServiceFilterReq> | undefined, b: DebitNotesServiceFilterReq | PlainMessage<DebitNotesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.DebitNotesServiceCountReq
 */
export class DebitNotesServiceCountReq extends Message<DebitNotesServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this debit note
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the debit note
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 22;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 23;
   */
  refId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: uint64 currency_id = 30;
   */
  currencyId = protoInt64.zero;

  /**
   * The ID of the associated vendor
   *
   * @generated from field: uint64 vendor_id = 31;
   */
  vendorId = protoInt64.zero;

  /**
   * The ID of the associated project
   *
   * @generated from field: uint64 project_id = 32;
   */
  projectId = protoInt64.zero;

  /**
   * The ID of the family
   *
   * @generated from field: uint64 family_id = 40;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<DebitNotesServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 31, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 32, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceCountReq {
    return new DebitNotesServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceCountReq {
    return new DebitNotesServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceCountReq {
    return new DebitNotesServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceCountReq | PlainMessage<DebitNotesServiceCountReq> | undefined, b: DebitNotesServiceCountReq | PlainMessage<DebitNotesServiceCountReq> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.DebitNotesServiceSearchAllReq
 */
export class DebitNotesServiceSearchAllReq extends Message<DebitNotesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.DEBIT_NOTE_SORT_KEY sort_key = 5;
   */
  sortKey = DEBIT_NOTE_SORT_KEY.DEBIT_NOTE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 22;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 23;
   */
  refId = protoInt64.zero;

  /**
   * The ID of the associated vendor
   *
   * @generated from field: uint64 vendor_id = 25;
   */
  vendorId = protoInt64.zero;

  constructor(data?: PartialMessage<DebitNotesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(DEBIT_NOTE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceSearchAllReq {
    return new DebitNotesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceSearchAllReq {
    return new DebitNotesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceSearchAllReq {
    return new DebitNotesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceSearchAllReq | PlainMessage<DebitNotesServiceSearchAllReq> | undefined, b: DebitNotesServiceSearchAllReq | PlainMessage<DebitNotesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a debit note reference
 *
 * @generated from message Scailo.DebitNotesServiceReferenceCreateRequest
 */
export class DebitNotesServiceReferenceCreateRequest extends Message<DebitNotesServiceReferenceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the debit note ID
   *
   * @generated from field: uint64 debit_note_id = 10;
   */
  debitNoteId = protoInt64.zero;

  /**
   * Stores the purchase return ID
   *
   * @generated from field: uint64 purchase_return_id = 11;
   */
  purchaseReturnId = protoInt64.zero;

  constructor(data?: PartialMessage<DebitNotesServiceReferenceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNotesServiceReferenceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "debit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "purchase_return_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNotesServiceReferenceCreateRequest {
    return new DebitNotesServiceReferenceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNotesServiceReferenceCreateRequest {
    return new DebitNotesServiceReferenceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNotesServiceReferenceCreateRequest {
    return new DebitNotesServiceReferenceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNotesServiceReferenceCreateRequest | PlainMessage<DebitNotesServiceReferenceCreateRequest> | undefined, b: DebitNotesServiceReferenceCreateRequest | PlainMessage<DebitNotesServiceReferenceCreateRequest> | undefined): boolean {
    return proto3.util.equals(DebitNotesServiceReferenceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a debit note reference
 *
 * @generated from message Scailo.DebitNoteReference
 */
export class DebitNoteReference extends Message<DebitNoteReference> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this debit note
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the debit note ID
   *
   * @generated from field: uint64 debit_note_id = 10;
   */
  debitNoteId = protoInt64.zero;

  /**
   * Stores the purchase return ID
   *
   * @generated from field: uint64 purchase_return_id = 11;
   */
  purchaseReturnId = protoInt64.zero;

  constructor(data?: PartialMessage<DebitNoteReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNoteReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "debit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "purchase_return_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNoteReference {
    return new DebitNoteReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNoteReference {
    return new DebitNoteReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNoteReference {
    return new DebitNoteReference().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNoteReference | PlainMessage<DebitNoteReference> | undefined, b: DebitNoteReference | PlainMessage<DebitNoteReference> | undefined): boolean {
    return proto3.util.equals(DebitNoteReference, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of debit note references
 *
 * @generated from message Scailo.DebitNoteReferencesList
 */
export class DebitNoteReferencesList extends Message<DebitNoteReferencesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.DebitNoteReference list = 1;
   */
  list: DebitNoteReference[] = [];

  constructor(data?: PartialMessage<DebitNoteReferencesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.DebitNoteReferencesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: DebitNoteReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebitNoteReferencesList {
    return new DebitNoteReferencesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebitNoteReferencesList {
    return new DebitNoteReferencesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebitNoteReferencesList {
    return new DebitNoteReferencesList().fromJsonString(jsonString, options);
  }

  static equals(a: DebitNoteReferencesList | PlainMessage<DebitNoteReferencesList> | undefined, b: DebitNoteReferencesList | PlainMessage<DebitNoteReferencesList> | undefined): boolean {
    return proto3.util.equals(DebitNoteReferencesList, a, b);
  }
}

