// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file tax_params.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available value types for a tax param
 *
 * @generated from enum Scailo.TAX_PARAM_VALUE_TYPE
 */
export enum TAX_PARAM_VALUE_TYPE {
  /**
   * The default value type, and is useful only for filter and search queries when the value type needs to be disregarded
   *
   * @generated from enum value: TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED = 0;
   */
  TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the value type is percentage (tax is calculated as a percentage over the base value)
   *
   * @generated from enum value: TAX_PARAM_VALUE_TYPE_PERCENTAGE = 1;
   */
  TAX_PARAM_VALUE_TYPE_PERCENTAGE = 1,

  /**
   * Denotes that the value type is fixed (tax is a fixed value)
   *
   * @generated from enum value: TAX_PARAM_VALUE_TYPE_FIXED = 2;
   */
  TAX_PARAM_VALUE_TYPE_FIXED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TAX_PARAM_VALUE_TYPE)
proto3.util.setEnumType(TAX_PARAM_VALUE_TYPE, "Scailo.TAX_PARAM_VALUE_TYPE", [
  { no: 0, name: "TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED" },
  { no: 1, name: "TAX_PARAM_VALUE_TYPE_PERCENTAGE" },
  { no: 2, name: "TAX_PARAM_VALUE_TYPE_FIXED" },
]);

/**
 *
 * Describes the available categories for a tax param
 *
 * @generated from enum Scailo.TAX_PARAM_CATEGORY
 */
export enum TAX_PARAM_CATEGORY {
  /**
   * The default category, and is useful only for filter and search queries when the category needs to be disregarded
   *
   * @generated from enum value: TAX_PARAM_CATEGORY_ANY_UNSPECIFIED = 0;
   */
  TAX_PARAM_CATEGORY_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the tax param belongs to the general category (applicable on purchase and sales)
   *
   * @generated from enum value: TAX_PARAM_CATEGORY_GENERAL = 1;
   */
  TAX_PARAM_CATEGORY_GENERAL = 1,

  /**
   * Denotes that the tax param belongs to the payroll category (applicable when computing payroll)
   *
   * @generated from enum value: TAX_PARAM_CATEGORY_PAYROLL = 2;
   */
  TAX_PARAM_CATEGORY_PAYROLL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TAX_PARAM_CATEGORY)
proto3.util.setEnumType(TAX_PARAM_CATEGORY, "Scailo.TAX_PARAM_CATEGORY", [
  { no: 0, name: "TAX_PARAM_CATEGORY_ANY_UNSPECIFIED" },
  { no: 1, name: "TAX_PARAM_CATEGORY_GENERAL" },
  { no: 2, name: "TAX_PARAM_CATEGORY_PAYROLL" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.TAX_PARAM_SORT_KEY
 */
export enum TAX_PARAM_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: TAX_PARAM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  TAX_PARAM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: TAX_PARAM_SORT_KEY_CREATED_AT = 1;
   */
  TAX_PARAM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: TAX_PARAM_SORT_KEY_MODIFIED_AT = 2;
   */
  TAX_PARAM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: TAX_PARAM_SORT_KEY_APPROVED_ON = 3;
   */
  TAX_PARAM_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: TAX_PARAM_SORT_KEY_APPROVED_BY = 4;
   */
  TAX_PARAM_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the name
   *
   * @generated from enum value: TAX_PARAM_SORT_KEY_NAME = 10;
   */
  TAX_PARAM_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by the tax rate percentage
   *
   * @generated from enum value: TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE = 11;
   */
  TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(TAX_PARAM_SORT_KEY)
proto3.util.setEnumType(TAX_PARAM_SORT_KEY, "Scailo.TAX_PARAM_SORT_KEY", [
  { no: 0, name: "TAX_PARAM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "TAX_PARAM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "TAX_PARAM_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "TAX_PARAM_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "TAX_PARAM_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "TAX_PARAM_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "TAX_PARAM_SORT_KEY_NAME" },
  { no: 11, name: "TAX_PARAM_SORT_KEY_TAX_RATE_PERCENTAGE" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.TaxParamsServiceCreateRequest
 */
export class TaxParamsServiceCreateRequest extends Message<TaxParamsServiceCreateRequest> {
  /**
   * TaxParams a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * TaxParams any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The name of the tax param
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The type of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 11;
   */
  valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * The fixed amount of tax (applicable only if value type is fixed)
   *
   * @generated from field: uint64 tax_fixed_amount = 12;
   */
  taxFixedAmount = protoInt64.zero;

  /**
   * The percentage of tax (applicable only if value type is percentage)
   *
   * @generated from field: uint64 tax_rate_percentage = 13;
   */
  taxRatePercentage = protoInt64.zero;

  /**
   * The divisor that is defined in order to normalize tax rate percentage
   *
   * @generated from field: uint64 divisor = 14;
   */
  divisor = protoInt64.zero;

  /**
   * The input credit percentage that is applicable
   *
   * @generated from field: uint64 input_credit_percentage = 15;
   */
  inputCreditPercentage = protoInt64.zero;

  /**
   * The minimum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 min_amount = 16;
   */
  minAmount = protoInt64.zero;

  /**
   * The maximum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 max_amount = 17;
   */
  maxAmount = protoInt64.zero;

  /**
   * The category of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 18;
   */
  category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;

  /**
   * The description of the tax param
   *
   * @generated from field: string description = 20;
   */
  description = "";

  constructor(data?: PartialMessage<TaxParamsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.TaxParamsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "value_type", kind: "enum", T: proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 12, name: "tax_fixed_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "tax_rate_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "divisor", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "input_credit_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "min_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "max_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "category", kind: "enum", T: proto3.getEnumType(TAX_PARAM_CATEGORY) },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxParamsServiceCreateRequest {
    return new TaxParamsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxParamsServiceCreateRequest {
    return new TaxParamsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxParamsServiceCreateRequest {
    return new TaxParamsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TaxParamsServiceCreateRequest | PlainMessage<TaxParamsServiceCreateRequest> | undefined, b: TaxParamsServiceCreateRequest | PlainMessage<TaxParamsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(TaxParamsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.TaxParamsServiceUpdateRequest
 */
export class TaxParamsServiceUpdateRequest extends Message<TaxParamsServiceUpdateRequest> {
  /**
   * TaxParams any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that denotes if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The name of the tax param
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The description of the tax param
   *
   * @generated from field: string description = 20;
   */
  description = "";

  constructor(data?: PartialMessage<TaxParamsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.TaxParamsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxParamsServiceUpdateRequest {
    return new TaxParamsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxParamsServiceUpdateRequest {
    return new TaxParamsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxParamsServiceUpdateRequest {
    return new TaxParamsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TaxParamsServiceUpdateRequest | PlainMessage<TaxParamsServiceUpdateRequest> | undefined, b: TaxParamsServiceUpdateRequest | PlainMessage<TaxParamsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(TaxParamsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.TaxParam
 */
export class TaxParam extends Message<TaxParam> {
  /**
   * TaxParams a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * TaxParams the metadata of this tax param
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * TaxParams the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this tax param
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * TaxParams the logs of every operation performed on this tax param
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The name of the tax param
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The type of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 11;
   */
  valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * The fixed amount of tax (applicable only if value type is fixed)
   *
   * @generated from field: uint64 tax_fixed_amount = 12;
   */
  taxFixedAmount = protoInt64.zero;

  /**
   * The percentage of tax (applicable only if value type is percentage)
   *
   * @generated from field: uint64 tax_rate_percentage = 13;
   */
  taxRatePercentage = protoInt64.zero;

  /**
   * The divisor that is defined in order to normalize tax rate percentage
   *
   * @generated from field: uint64 divisor = 14;
   */
  divisor = protoInt64.zero;

  /**
   * The input credit percentage that is applicable
   *
   * @generated from field: uint64 input_credit_percentage = 15;
   */
  inputCreditPercentage = protoInt64.zero;

  /**
   * The minimum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 min_amount = 16;
   */
  minAmount = protoInt64.zero;

  /**
   * The maximum amount of applicable tax (will be disregarded if value is -100)
   *
   * @generated from field: int64 max_amount = 17;
   */
  maxAmount = protoInt64.zero;

  /**
   * The category of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 18;
   */
  category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;

  /**
   * The description of the tax param
   *
   * @generated from field: string description = 20;
   */
  description = "";

  constructor(data?: PartialMessage<TaxParam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.TaxParam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "value_type", kind: "enum", T: proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 12, name: "tax_fixed_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "tax_rate_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "divisor", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "input_credit_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "min_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "max_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "category", kind: "enum", T: proto3.getEnumType(TAX_PARAM_CATEGORY) },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxParam {
    return new TaxParam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxParam {
    return new TaxParam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxParam {
    return new TaxParam().fromJsonString(jsonString, options);
  }

  static equals(a: TaxParam | PlainMessage<TaxParam> | undefined, b: TaxParam | PlainMessage<TaxParam> | undefined): boolean {
    return proto3.util.equals(TaxParam, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.TaxParamsList
 */
export class TaxParamsList extends Message<TaxParamsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.TaxParam list = 1;
   */
  list: TaxParam[] = [];

  constructor(data?: PartialMessage<TaxParamsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.TaxParamsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: TaxParam, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxParamsList {
    return new TaxParamsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxParamsList {
    return new TaxParamsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxParamsList {
    return new TaxParamsList().fromJsonString(jsonString, options);
  }

  static equals(a: TaxParamsList | PlainMessage<TaxParamsList> | undefined, b: TaxParamsList | PlainMessage<TaxParamsList> | undefined): boolean {
    return proto3.util.equals(TaxParamsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.TaxParamsServicePaginationReq
 */
export class TaxParamsServicePaginationReq extends Message<TaxParamsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.TAX_PARAM_SORT_KEY sort_key = 5;
   */
  sortKey = TAX_PARAM_SORT_KEY.TAX_PARAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this tax param
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<TaxParamsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.TaxParamsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(TAX_PARAM_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxParamsServicePaginationReq {
    return new TaxParamsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxParamsServicePaginationReq {
    return new TaxParamsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxParamsServicePaginationReq {
    return new TaxParamsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: TaxParamsServicePaginationReq | PlainMessage<TaxParamsServicePaginationReq> | undefined, b: TaxParamsServicePaginationReq | PlainMessage<TaxParamsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(TaxParamsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.TaxParamsServicePaginationResponse
 */
export class TaxParamsServicePaginationResponse extends Message<TaxParamsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.TaxParam payload = 4;
   */
  payload: TaxParam[] = [];

  constructor(data?: PartialMessage<TaxParamsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.TaxParamsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: TaxParam, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxParamsServicePaginationResponse {
    return new TaxParamsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxParamsServicePaginationResponse {
    return new TaxParamsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxParamsServicePaginationResponse {
    return new TaxParamsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TaxParamsServicePaginationResponse | PlainMessage<TaxParamsServicePaginationResponse> | undefined, b: TaxParamsServicePaginationResponse | PlainMessage<TaxParamsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(TaxParamsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.TaxParamsServiceFilterReq
 */
export class TaxParamsServiceFilterReq extends Message<TaxParamsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.TAX_PARAM_SORT_KEY sort_key = 5;
   */
  sortKey = TAX_PARAM_SORT_KEY.TAX_PARAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this tax param
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The name of the tax param
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The type of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 31;
   */
  valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * The category of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 32;
   */
  category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<TaxParamsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.TaxParamsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(TAX_PARAM_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "value_type", kind: "enum", T: proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 32, name: "category", kind: "enum", T: proto3.getEnumType(TAX_PARAM_CATEGORY) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxParamsServiceFilterReq {
    return new TaxParamsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxParamsServiceFilterReq {
    return new TaxParamsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxParamsServiceFilterReq {
    return new TaxParamsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: TaxParamsServiceFilterReq | PlainMessage<TaxParamsServiceFilterReq> | undefined, b: TaxParamsServiceFilterReq | PlainMessage<TaxParamsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(TaxParamsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.TaxParamsServiceCountReq
 */
export class TaxParamsServiceCountReq extends Message<TaxParamsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this tax param
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The name of the tax param
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The type of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 31;
   */
  valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * The category of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 32;
   */
  category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<TaxParamsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.TaxParamsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "value_type", kind: "enum", T: proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 32, name: "category", kind: "enum", T: proto3.getEnumType(TAX_PARAM_CATEGORY) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxParamsServiceCountReq {
    return new TaxParamsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxParamsServiceCountReq {
    return new TaxParamsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxParamsServiceCountReq {
    return new TaxParamsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: TaxParamsServiceCountReq | PlainMessage<TaxParamsServiceCountReq> | undefined, b: TaxParamsServiceCountReq | PlainMessage<TaxParamsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(TaxParamsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.TaxParamsServiceSearchAllReq
 */
export class TaxParamsServiceSearchAllReq extends Message<TaxParamsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.TAX_PARAM_SORT_KEY sort_key = 5;
   */
  sortKey = TAX_PARAM_SORT_KEY.TAX_PARAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The type of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_VALUE_TYPE value_type = 31;
   */
  valueType = TAX_PARAM_VALUE_TYPE.TAX_PARAM_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * The category of the tax param
   *
   * @generated from field: Scailo.TAX_PARAM_CATEGORY category = 32;
   */
  category = TAX_PARAM_CATEGORY.TAX_PARAM_CATEGORY_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<TaxParamsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.TaxParamsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(TAX_PARAM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "value_type", kind: "enum", T: proto3.getEnumType(TAX_PARAM_VALUE_TYPE) },
    { no: 32, name: "category", kind: "enum", T: proto3.getEnumType(TAX_PARAM_CATEGORY) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaxParamsServiceSearchAllReq {
    return new TaxParamsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaxParamsServiceSearchAllReq {
    return new TaxParamsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaxParamsServiceSearchAllReq {
    return new TaxParamsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: TaxParamsServiceSearchAllReq | PlainMessage<TaxParamsServiceSearchAllReq> | undefined, b: TaxParamsServiceSearchAllReq | PlainMessage<TaxParamsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(TaxParamsServiceSearchAllReq, a, b);
  }
}

