// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file vendor_streams.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BOOL_FILTER, EmployeeMetadata, SORT_ORDER } from "./base.scailo_pb.js";

/**
 *
 * Describes the lifecycle status of each vendor stream
 *
 * @generated from enum Scailo.VENDOR_STREAM_LIFECYCLE
 */
export enum VENDOR_STREAM_LIFECYCLE {
  /**
   * Used only in filters
   *
   * @generated from enum value: VENDOR_STREAM_LIFECYCLE_ANY_UNSPECIFIED = 0;
   */
  VENDOR_STREAM_LIFECYCLE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the vendor stream is open
   *
   * @generated from enum value: VENDOR_STREAM_LIFECYCLE_OPEN = 1;
   */
  VENDOR_STREAM_LIFECYCLE_OPEN = 1,

  /**
   * Denotes that the vendor stream has completed
   *
   * @generated from enum value: VENDOR_STREAM_LIFECYCLE_COMPLETED = 2;
   */
  VENDOR_STREAM_LIFECYCLE_COMPLETED = 2,

  /**
   * Denotes that the vendor stream has been cancelled
   *
   * @generated from enum value: VENDOR_STREAM_LIFECYCLE_CANCELLED = 3;
   */
  VENDOR_STREAM_LIFECYCLE_CANCELLED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(VENDOR_STREAM_LIFECYCLE)
proto3.util.setEnumType(VENDOR_STREAM_LIFECYCLE, "Scailo.VENDOR_STREAM_LIFECYCLE", [
  { no: 0, name: "VENDOR_STREAM_LIFECYCLE_ANY_UNSPECIFIED" },
  { no: 1, name: "VENDOR_STREAM_LIFECYCLE_OPEN" },
  { no: 2, name: "VENDOR_STREAM_LIFECYCLE_COMPLETED" },
  { no: 3, name: "VENDOR_STREAM_LIFECYCLE_CANCELLED" },
]);

/**
 *
 * Describes the available vendor stream references
 *
 * @generated from enum Scailo.VENDOR_STREAM_REF_FROM
 */
export enum VENDOR_STREAM_REF_FROM {
  /**
   * Used only in filters
   *
   * @generated from enum value: VENDOR_STREAM_REF_FROM_ANY_UNSPECIFIED = 0;
   */
  VENDOR_STREAM_REF_FROM_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the reference is from a purchase order
   *
   * @generated from enum value: VENDOR_STREAM_REF_FROM_PURCHASE_ORDER = 1;
   */
  VENDOR_STREAM_REF_FROM_PURCHASE_ORDER = 1,

  /**
   * Denotes that the reference is from a goods receipt
   *
   * @generated from enum value: VENDOR_STREAM_REF_FROM_GOODS_RECEIPT = 10;
   */
  VENDOR_STREAM_REF_FROM_GOODS_RECEIPT = 10,

  /**
   * Denotes that the reference is from a vendor invoice
   *
   * @generated from enum value: VENDOR_STREAM_REF_FROM_VENDOR_INVOICE = 11;
   */
  VENDOR_STREAM_REF_FROM_VENDOR_INVOICE = 11,

  /**
   * Denotes that the reference is from a purchase return
   *
   * @generated from enum value: VENDOR_STREAM_REF_FROM_PURCHASE_RETURN = 20;
   */
  VENDOR_STREAM_REF_FROM_PURCHASE_RETURN = 20,

  /**
   * Denotes that the reference is from a debit note
   *
   * @generated from enum value: VENDOR_STREAM_REF_FROM_DEBIT_NOTE = 21;
   */
  VENDOR_STREAM_REF_FROM_DEBIT_NOTE = 21,

  /**
   * Denotes that the reference is from a purchase payment
   *
   * @generated from enum value: VENDOR_STREAM_REF_FROM_PURCHASE_PAYMENT = 30;
   */
  VENDOR_STREAM_REF_FROM_PURCHASE_PAYMENT = 30,
}
// Retrieve enum metadata with: proto3.getEnumType(VENDOR_STREAM_REF_FROM)
proto3.util.setEnumType(VENDOR_STREAM_REF_FROM, "Scailo.VENDOR_STREAM_REF_FROM", [
  { no: 0, name: "VENDOR_STREAM_REF_FROM_ANY_UNSPECIFIED" },
  { no: 1, name: "VENDOR_STREAM_REF_FROM_PURCHASE_ORDER" },
  { no: 10, name: "VENDOR_STREAM_REF_FROM_GOODS_RECEIPT" },
  { no: 11, name: "VENDOR_STREAM_REF_FROM_VENDOR_INVOICE" },
  { no: 20, name: "VENDOR_STREAM_REF_FROM_PURCHASE_RETURN" },
  { no: 21, name: "VENDOR_STREAM_REF_FROM_DEBIT_NOTE" },
  { no: 30, name: "VENDOR_STREAM_REF_FROM_PURCHASE_PAYMENT" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.VENDOR_STREAM_SORT_KEY
 */
export enum VENDOR_STREAM_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: VENDOR_STREAM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  VENDOR_STREAM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: VENDOR_STREAM_SORT_KEY_CREATED_AT = 1;
   */
  VENDOR_STREAM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: VENDOR_STREAM_SORT_KEY_MODIFIED_AT = 2;
   */
  VENDOR_STREAM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: VENDOR_STREAM_SORT_KEY_COMPLETED_ON = 6;
   */
  VENDOR_STREAM_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the title
   *
   * @generated from enum value: VENDOR_STREAM_SORT_KEY_TITLE = 10;
   */
  VENDOR_STREAM_SORT_KEY_TITLE = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(VENDOR_STREAM_SORT_KEY)
proto3.util.setEnumType(VENDOR_STREAM_SORT_KEY, "Scailo.VENDOR_STREAM_SORT_KEY", [
  { no: 0, name: "VENDOR_STREAM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "VENDOR_STREAM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "VENDOR_STREAM_SORT_KEY_MODIFIED_AT" },
  { no: 6, name: "VENDOR_STREAM_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "VENDOR_STREAM_SORT_KEY_TITLE" },
]);

/**
 *
 * Describes the available message types for a vendor stream message
 *
 * @generated from enum Scailo.VENDOR_STREAM_MESSAGE_TYPE
 */
export enum VENDOR_STREAM_MESSAGE_TYPE {
  /**
   * Used only for filters
   *
   * @generated from enum value: VENDOR_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED = 0;
   */
  VENDOR_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the message was sent by a user
   *
   * @generated from enum value: VENDOR_STREAM_MESSAGE_TYPE_USER = 1;
   */
  VENDOR_STREAM_MESSAGE_TYPE_USER = 1,

  /**
   * Denotes that the message was sent by the system
   *
   * @generated from enum value: VENDOR_STREAM_MESSAGE_TYPE_SYSTEM = 2;
   */
  VENDOR_STREAM_MESSAGE_TYPE_SYSTEM = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(VENDOR_STREAM_MESSAGE_TYPE)
proto3.util.setEnumType(VENDOR_STREAM_MESSAGE_TYPE, "Scailo.VENDOR_STREAM_MESSAGE_TYPE", [
  { no: 0, name: "VENDOR_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED" },
  { no: 1, name: "VENDOR_STREAM_MESSAGE_TYPE_USER" },
  { no: 2, name: "VENDOR_STREAM_MESSAGE_TYPE_SYSTEM" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.VENDOR_STREAM_MESSAGE_SORT_KEY
 */
export enum VENDOR_STREAM_MESSAGE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: VENDOR_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  VENDOR_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: VENDOR_STREAM_MESSAGE_SORT_KEY_CREATED_AT = 1;
   */
  VENDOR_STREAM_MESSAGE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: VENDOR_STREAM_MESSAGE_SORT_KEY_MODIFIED_AT = 2;
   */
  VENDOR_STREAM_MESSAGE_SORT_KEY_MODIFIED_AT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(VENDOR_STREAM_MESSAGE_SORT_KEY)
proto3.util.setEnumType(VENDOR_STREAM_MESSAGE_SORT_KEY, "Scailo.VENDOR_STREAM_MESSAGE_SORT_KEY", [
  { no: 0, name: "VENDOR_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "VENDOR_STREAM_MESSAGE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "VENDOR_STREAM_MESSAGE_SORT_KEY_MODIFIED_AT" },
]);

/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being an vendor stream lifecycle status
 *
 * @generated from message Scailo.LogbookLogVendorStreamLC
 */
export class LogbookLogVendorStreamLC extends Message<LogbookLogVendorStreamLC> {
  /**
   * ID of the resource
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Stores if the resource is active
   *
   * @generated from field: bool is_active = 2;
   */
  isActive = false;

  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: uint64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: string ref_uuid = 10;
   */
  refUuid = "";

  /**
   * The operation that was performed
   *
   * @generated from field: Scailo.VENDOR_STREAM_LIFECYCLE operation = 11;
   */
  operation = VENDOR_STREAM_LIFECYCLE.VENDOR_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The name of the person who made this entry
   *
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * The ID of the user who made this entry
   *
   * @generated from field: uint64 user_id = 14;
   */
  userId = protoInt64.zero;

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 15;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 16;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogVendorStreamLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LogbookLogVendorStreamLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_LIFECYCLE) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogVendorStreamLC {
    return new LogbookLogVendorStreamLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogVendorStreamLC {
    return new LogbookLogVendorStreamLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogVendorStreamLC {
    return new LogbookLogVendorStreamLC().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogVendorStreamLC | PlainMessage<LogbookLogVendorStreamLC> | undefined, b: LogbookLogVendorStreamLC | PlainMessage<LogbookLogVendorStreamLC> | undefined): boolean {
    return proto3.util.equals(LogbookLogVendorStreamLC, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.VendorStreamsServiceCreateRequest
 */
export class VendorStreamsServiceCreateRequest extends Message<VendorStreamsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The title of the vendor stream
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The ID of the vendor
   *
   * @generated from field: uint64 vendor_id = 11;
   */
  vendorId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: Scailo.VENDOR_STREAM_REF_FROM ref_from = 12;
   */
  refFrom = VENDOR_STREAM_REF_FROM.VENDOR_STREAM_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated reference ID
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * Assign self (the user creating the stream) as an internal subscriber
   *
   * @generated from field: bool assign_self_as_internal_subscriber = 80;
   */
  assignSelfAsInternalSubscriber = false;

  /**
   * Assign self (the user creating the stream) as a vendor subscriber (this would allow vendor users to also create a stream)
   *
   * @generated from field: bool assign_self_as_vendor_subscriber = 81;
   */
  assignSelfAsVendorSubscriber = false;

  constructor(data?: PartialMessage<VendorStreamsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ref_from", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_REF_FROM) },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 80, name: "assign_self_as_internal_subscriber", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 81, name: "assign_self_as_vendor_subscriber", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServiceCreateRequest {
    return new VendorStreamsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServiceCreateRequest {
    return new VendorStreamsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServiceCreateRequest {
    return new VendorStreamsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServiceCreateRequest | PlainMessage<VendorStreamsServiceCreateRequest> | undefined, b: VendorStreamsServiceCreateRequest | PlainMessage<VendorStreamsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.VendorStreamsServiceUpdateRequest
 */
export class VendorStreamsServiceUpdateRequest extends Message<VendorStreamsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The title of the vendor stream
   *
   * @generated from field: string title = 10;
   */
  title = "";

  constructor(data?: PartialMessage<VendorStreamsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServiceUpdateRequest {
    return new VendorStreamsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServiceUpdateRequest {
    return new VendorStreamsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServiceUpdateRequest {
    return new VendorStreamsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServiceUpdateRequest | PlainMessage<VendorStreamsServiceUpdateRequest> | undefined, b: VendorStreamsServiceUpdateRequest | PlainMessage<VendorStreamsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.VendorStream
 */
export class VendorStream extends Message<VendorStream> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this vendor stream
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The status of this vendor stream
   *
   * @generated from field: Scailo.VENDOR_STREAM_LIFECYCLE status = 4;
   */
  status = VENDOR_STREAM_LIFECYCLE.VENDOR_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this vendor stream
   *
   * @generated from field: repeated Scailo.LogbookLogVendorStreamLC logs = 5;
   */
  logs: LogbookLogVendorStreamLC[] = [];

  /**
   * The timestamp of when this vendor stream was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated vault folder UUID (will be empty if vault_folder_id is 0)
   *
   * @generated from field: string vault_folder_uuid = 107;
   */
  vaultFolderUuid = "";

  /**
   * The title of the vendor stream
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The ID of the vendor
   *
   * @generated from field: uint64 vendor_id = 11;
   */
  vendorId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: Scailo.VENDOR_STREAM_REF_FROM ref_from = 12;
   */
  refFrom = VENDOR_STREAM_REF_FROM.VENDOR_STREAM_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated reference ID
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The associated reference UUID
   *
   * @generated from field: string ref_uuid = 14;
   */
  refUuid = "";

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 50;
   */
  internalRef = "";

  /**
   * Stores the number of unread messages in this stream for the specific user (on the basis of the auth token)
   *
   * @generated from field: uint64 unread_count = 60;
   */
  unreadCount = protoInt64.zero;

  /**
   * Stores the total number of messages in the stream
   *
   * @generated from field: uint64 message_count = 61;
   */
  messageCount = protoInt64.zero;

  /**
   * Stores the username of the user who added the last message
   *
   * @generated from field: string last_message_by = 62;
   */
  lastMessageBy = "";

  constructor(data?: PartialMessage<VendorStream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_LIFECYCLE) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogVendorStreamLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 107, name: "vault_folder_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ref_from", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_REF_FROM) },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "unread_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 61, name: "message_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 62, name: "last_message_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStream {
    return new VendorStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStream {
    return new VendorStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStream {
    return new VendorStream().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStream | PlainMessage<VendorStream> | undefined, b: VendorStream | PlainMessage<VendorStream> | undefined): boolean {
    return proto3.util.equals(VendorStream, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.VendorStreamsList
 */
export class VendorStreamsList extends Message<VendorStreamsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.VendorStream list = 1;
   */
  list: VendorStream[] = [];

  constructor(data?: PartialMessage<VendorStreamsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: VendorStream, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsList {
    return new VendorStreamsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsList {
    return new VendorStreamsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsList {
    return new VendorStreamsList().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsList | PlainMessage<VendorStreamsList> | undefined, b: VendorStreamsList | PlainMessage<VendorStreamsList> | undefined): boolean {
    return proto3.util.equals(VendorStreamsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.VendorStreamsServicePaginationReq
 */
export class VendorStreamsServicePaginationReq extends Message<VendorStreamsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.VENDOR_STREAM_SORT_KEY sort_key = 5;
   */
  sortKey = VENDOR_STREAM_SORT_KEY.VENDOR_STREAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this vendor stream
   *
   * @generated from field: Scailo.VENDOR_STREAM_LIFECYCLE status = 6;
   */
  status = VENDOR_STREAM_LIFECYCLE.VENDOR_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<VendorStreamsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_LIFECYCLE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServicePaginationReq {
    return new VendorStreamsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServicePaginationReq {
    return new VendorStreamsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServicePaginationReq {
    return new VendorStreamsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServicePaginationReq | PlainMessage<VendorStreamsServicePaginationReq> | undefined, b: VendorStreamsServicePaginationReq | PlainMessage<VendorStreamsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.VendorStreamsServicePaginationResponse
 */
export class VendorStreamsServicePaginationResponse extends Message<VendorStreamsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.VendorStream payload = 4;
   */
  payload: VendorStream[] = [];

  constructor(data?: PartialMessage<VendorStreamsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: VendorStream, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServicePaginationResponse {
    return new VendorStreamsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServicePaginationResponse {
    return new VendorStreamsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServicePaginationResponse {
    return new VendorStreamsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServicePaginationResponse | PlainMessage<VendorStreamsServicePaginationResponse> | undefined, b: VendorStreamsServicePaginationResponse | PlainMessage<VendorStreamsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.VendorStreamsServiceFilterReq
 */
export class VendorStreamsServiceFilterReq extends Message<VendorStreamsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.VENDOR_STREAM_SORT_KEY sort_key = 5;
   */
  sortKey = VENDOR_STREAM_SORT_KEY.VENDOR_STREAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this vendor stream
   *
   * @generated from field: Scailo.VENDOR_STREAM_LIFECYCLE status = 10;
   */
  status = VENDOR_STREAM_LIFECYCLE.VENDOR_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 18;
   */
  internalRef = "";

  /**
   * The title of the vendor stream
   *
   * @generated from field: string title = 30;
   */
  title = "";

  /**
   * ------------------------------------------------
   * Filter by the associated vendor ID
   *
   * @generated from field: uint64 vendor_id = 40;
   */
  vendorId = protoInt64.zero;

  /**
   * Filter by the associated reference
   *
   * @generated from field: Scailo.VENDOR_STREAM_REF_FROM ref_from = 41;
   */
  refFrom = VENDOR_STREAM_REF_FROM.VENDOR_STREAM_REF_FROM_ANY_UNSPECIFIED;

  /**
   * Filter by the associated reference ID
   *
   * ------------------------------------------------
   *
   * @generated from field: uint64 ref_id = 42;
   */
  refId = protoInt64.zero;

  /**
   * Filter by the associated internal subscriber user ID
   *
   * @generated from field: uint64 internal_subscriber_user_id = 60;
   */
  internalSubscriberUserId = protoInt64.zero;

  /**
   * Filter by the associated vendor subscriber user ID
   *
   * @generated from field: uint64 vendor_subscriber_user_id = 61;
   */
  vendorSubscriberUserId = protoInt64.zero;

  constructor(data?: PartialMessage<VendorStreamsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "ref_from", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_REF_FROM) },
    { no: 42, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "internal_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 61, name: "vendor_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServiceFilterReq {
    return new VendorStreamsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServiceFilterReq {
    return new VendorStreamsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServiceFilterReq {
    return new VendorStreamsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServiceFilterReq | PlainMessage<VendorStreamsServiceFilterReq> | undefined, b: VendorStreamsServiceFilterReq | PlainMessage<VendorStreamsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.VendorStreamsServiceCountReq
 */
export class VendorStreamsServiceCountReq extends Message<VendorStreamsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this vendor stream
   *
   * @generated from field: Scailo.VENDOR_STREAM_LIFECYCLE status = 10;
   */
  status = VENDOR_STREAM_LIFECYCLE.VENDOR_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 18;
   */
  internalRef = "";

  /**
   * The title of the vendor stream
   *
   * @generated from field: string title = 30;
   */
  title = "";

  /**
   * ------------------------------------------------
   * Filter by the associated vendor ID
   *
   * @generated from field: uint64 vendor_id = 40;
   */
  vendorId = protoInt64.zero;

  /**
   * Filter by the associated reference
   *
   * @generated from field: Scailo.VENDOR_STREAM_REF_FROM ref_from = 41;
   */
  refFrom = VENDOR_STREAM_REF_FROM.VENDOR_STREAM_REF_FROM_ANY_UNSPECIFIED;

  /**
   * Filter by the associated reference ID
   *
   * ------------------------------------------------
   *
   * @generated from field: uint64 ref_id = 42;
   */
  refId = protoInt64.zero;

  /**
   * Filter by the associated internal subscriber user ID
   *
   * @generated from field: uint64 internal_subscriber_user_id = 60;
   */
  internalSubscriberUserId = protoInt64.zero;

  /**
   * Filter by the associated vendor subscriber user ID
   *
   * @generated from field: uint64 vendor_subscriber_user_id = 61;
   */
  vendorSubscriberUserId = protoInt64.zero;

  constructor(data?: PartialMessage<VendorStreamsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "ref_from", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_REF_FROM) },
    { no: 42, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "internal_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 61, name: "vendor_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServiceCountReq {
    return new VendorStreamsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServiceCountReq {
    return new VendorStreamsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServiceCountReq {
    return new VendorStreamsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServiceCountReq | PlainMessage<VendorStreamsServiceCountReq> | undefined, b: VendorStreamsServiceCountReq | PlainMessage<VendorStreamsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.VendorStreamsServiceSearchAllReq
 */
export class VendorStreamsServiceSearchAllReq extends Message<VendorStreamsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.VENDOR_STREAM_SORT_KEY sort_key = 5;
   */
  sortKey = VENDOR_STREAM_SORT_KEY.VENDOR_STREAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.VENDOR_STREAM_LIFECYCLE status = 10;
   */
  status = VENDOR_STREAM_LIFECYCLE.VENDOR_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * ------------------------------------------------
   * Filter by the associated vendor ID
   *
   * ------------------------------------------------
   *
   * @generated from field: uint64 vendor_id = 40;
   */
  vendorId = protoInt64.zero;

  /**
   * Filter by the associated internal subscriber user ID
   *
   * @generated from field: uint64 internal_subscriber_user_id = 60;
   */
  internalSubscriberUserId = protoInt64.zero;

  /**
   * Filter by the associated vendor subscriber user ID
   *
   * @generated from field: uint64 vendor_subscriber_user_id = 61;
   */
  vendorSubscriberUserId = protoInt64.zero;

  constructor(data?: PartialMessage<VendorStreamsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_LIFECYCLE) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "internal_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 61, name: "vendor_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServiceSearchAllReq {
    return new VendorStreamsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServiceSearchAllReq {
    return new VendorStreamsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServiceSearchAllReq {
    return new VendorStreamsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServiceSearchAllReq | PlainMessage<VendorStreamsServiceSearchAllReq> | undefined, b: VendorStreamsServiceSearchAllReq | PlainMessage<VendorStreamsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the parameters required to add a message to an vendor stream
 *
 * @generated from message Scailo.VendorStreamsServiceMessageCreateRequest
 */
export class VendorStreamsServiceMessageCreateRequest extends Message<VendorStreamsServiceMessageCreateRequest> {
  /**
   * The type of the message
   *
   * @generated from field: Scailo.VENDOR_STREAM_MESSAGE_TYPE message_type = 8;
   */
  messageType = VENDOR_STREAM_MESSAGE_TYPE.VENDOR_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED;

  /**
   * Stores the vendor stream UUID
   *
   * @generated from field: string vendor_stream_uuid = 10;
   */
  vendorStreamUuid = "";

  /**
   * Stores the optional UUID of the message that this message is a response to
   *
   * @generated from field: string response_to_message_uuid = 11;
   */
  responseToMessageUuid = "";

  /**
   * The content of the message
   *
   * @generated from field: string content = 20;
   */
  content = "";

  constructor(data?: PartialMessage<VendorStreamsServiceMessageCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServiceMessageCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 8, name: "message_type", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_MESSAGE_TYPE) },
    { no: 10, name: "vendor_stream_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "response_to_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServiceMessageCreateRequest {
    return new VendorStreamsServiceMessageCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServiceMessageCreateRequest {
    return new VendorStreamsServiceMessageCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServiceMessageCreateRequest {
    return new VendorStreamsServiceMessageCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServiceMessageCreateRequest | PlainMessage<VendorStreamsServiceMessageCreateRequest> | undefined, b: VendorStreamsServiceMessageCreateRequest | PlainMessage<VendorStreamsServiceMessageCreateRequest> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServiceMessageCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a message associated to an vendor stream
 *
 * @generated from message Scailo.VendorStreamMessage
 */
export class VendorStreamMessage extends Message<VendorStreamMessage> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this vendor stream
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The type of the message
   *
   * @generated from field: Scailo.VENDOR_STREAM_MESSAGE_TYPE message_type = 8;
   */
  messageType = VENDOR_STREAM_MESSAGE_TYPE.VENDOR_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED;

  /**
   * Stores the vendor stream ID
   *
   * @generated from field: uint64 vendor_stream_id = 10;
   */
  vendorStreamId = protoInt64.zero;

  /**
   * Stores the optional UUID of the message that this message is a response to
   *
   * @generated from field: string response_to_message_uuid = 11;
   */
  responseToMessageUuid = "";

  /**
   * The content of the message
   *
   * @generated from field: string content = 20;
   */
  content = "";

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 50;
   */
  internalRef = "";

  /**
   * Stores if the message has been read by the user
   *
   * @generated from field: bool is_read = 60;
   */
  isRead = false;

  constructor(data?: PartialMessage<VendorStreamMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 8, name: "message_type", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_MESSAGE_TYPE) },
    { no: 10, name: "vendor_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "response_to_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "is_read", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamMessage {
    return new VendorStreamMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamMessage {
    return new VendorStreamMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamMessage {
    return new VendorStreamMessage().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamMessage | PlainMessage<VendorStreamMessage> | undefined, b: VendorStreamMessage | PlainMessage<VendorStreamMessage> | undefined): boolean {
    return proto3.util.equals(VendorStreamMessage, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of vendor stream messages
 *
 * @generated from message Scailo.VendorStreamMessagesList
 */
export class VendorStreamMessagesList extends Message<VendorStreamMessagesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.VendorStreamMessage list = 1;
   */
  list: VendorStreamMessage[] = [];

  constructor(data?: PartialMessage<VendorStreamMessagesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamMessagesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: VendorStreamMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamMessagesList {
    return new VendorStreamMessagesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamMessagesList {
    return new VendorStreamMessagesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamMessagesList {
    return new VendorStreamMessagesList().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamMessagesList | PlainMessage<VendorStreamMessagesList> | undefined, b: VendorStreamMessagesList | PlainMessage<VendorStreamMessagesList> | undefined): boolean {
    return proto3.util.equals(VendorStreamMessagesList, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve messages.
 *
 * @generated from message Scailo.VendorStreamMessagesSearchRequest
 */
export class VendorStreamMessagesSearchRequest extends Message<VendorStreamMessagesSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.VENDOR_STREAM_MESSAGE_SORT_KEY sort_key = 5;
   */
  sortKey = VENDOR_STREAM_MESSAGE_SORT_KEY.VENDOR_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The type of the message
   *
   * @generated from field: Scailo.VENDOR_STREAM_MESSAGE_TYPE message_type = 8;
   */
  messageType = VENDOR_STREAM_MESSAGE_TYPE.VENDOR_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED;

  /**
   * The ID of the vendor stream
   *
   * @generated from field: uint64 vendor_stream_id = 20;
   */
  vendorStreamId = protoInt64.zero;

  /**
   * Stores the optional UUID of the message that this message is a response to
   *
   * @generated from field: string response_to_message_uuid = 30;
   */
  responseToMessageUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<VendorStreamMessagesSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamMessagesSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_MESSAGE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "message_type", kind: "enum", T: proto3.getEnumType(VENDOR_STREAM_MESSAGE_TYPE) },
    { no: 20, name: "vendor_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "response_to_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamMessagesSearchRequest {
    return new VendorStreamMessagesSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamMessagesSearchRequest {
    return new VendorStreamMessagesSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamMessagesSearchRequest {
    return new VendorStreamMessagesSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamMessagesSearchRequest | PlainMessage<VendorStreamMessagesSearchRequest> | undefined, b: VendorStreamMessagesSearchRequest | PlainMessage<VendorStreamMessagesSearchRequest> | undefined): boolean {
    return proto3.util.equals(VendorStreamMessagesSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination messages request
 *
 * @generated from message Scailo.VendorStreamsServicePaginatedMessagesResponse
 */
export class VendorStreamsServicePaginatedMessagesResponse extends Message<VendorStreamsServicePaginatedMessagesResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.VendorStreamMessage payload = 4;
   */
  payload: VendorStreamMessage[] = [];

  constructor(data?: PartialMessage<VendorStreamsServicePaginatedMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServicePaginatedMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: VendorStreamMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServicePaginatedMessagesResponse {
    return new VendorStreamsServicePaginatedMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServicePaginatedMessagesResponse {
    return new VendorStreamsServicePaginatedMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServicePaginatedMessagesResponse {
    return new VendorStreamsServicePaginatedMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServicePaginatedMessagesResponse | PlainMessage<VendorStreamsServicePaginatedMessagesResponse> | undefined, b: VendorStreamsServicePaginatedMessagesResponse | PlainMessage<VendorStreamsServicePaginatedMessagesResponse> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServicePaginatedMessagesResponse, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a message receipt
 *
 * @generated from message Scailo.VendorStreamMessageReceipt
 */
export class VendorStreamMessageReceipt extends Message<VendorStreamMessageReceipt> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this vendor stream
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the vendor stream message UUID
   *
   * @generated from field: string vendor_stream_message_uuid = 10;
   */
  vendorStreamMessageUuid = "";

  /**
   * The ID of the user who read this
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * Stores if the message has been read by the user
   *
   * @generated from field: bool is_read = 12;
   */
  isRead = false;

  /**
   * Stores the timestamp of when the message was read
   *
   * @generated from field: uint64 read_at = 13;
   */
  readAt = protoInt64.zero;

  constructor(data?: PartialMessage<VendorStreamMessageReceipt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamMessageReceipt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 10, name: "vendor_stream_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "is_read", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "read_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamMessageReceipt {
    return new VendorStreamMessageReceipt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamMessageReceipt {
    return new VendorStreamMessageReceipt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamMessageReceipt {
    return new VendorStreamMessageReceipt().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamMessageReceipt | PlainMessage<VendorStreamMessageReceipt> | undefined, b: VendorStreamMessageReceipt | PlainMessage<VendorStreamMessageReceipt> | undefined): boolean {
    return proto3.util.equals(VendorStreamMessageReceipt, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of vendor stream message receipts
 *
 * @generated from message Scailo.VendorStreamMessageReceiptsList
 */
export class VendorStreamMessageReceiptsList extends Message<VendorStreamMessageReceiptsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.VendorStreamMessageReceipt list = 1;
   */
  list: VendorStreamMessageReceipt[] = [];

  constructor(data?: PartialMessage<VendorStreamMessageReceiptsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamMessageReceiptsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: VendorStreamMessageReceipt, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamMessageReceiptsList {
    return new VendorStreamMessageReceiptsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamMessageReceiptsList {
    return new VendorStreamMessageReceiptsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamMessageReceiptsList {
    return new VendorStreamMessageReceiptsList().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamMessageReceiptsList | PlainMessage<VendorStreamMessageReceiptsList> | undefined, b: VendorStreamMessageReceiptsList | PlainMessage<VendorStreamMessageReceiptsList> | undefined): boolean {
    return proto3.util.equals(VendorStreamMessageReceiptsList, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create an internal subscriber
 *
 * @generated from message Scailo.VendorStreamsServiceInternalSubscriberCreateRequest
 */
export class VendorStreamsServiceInternalSubscriberCreateRequest extends Message<VendorStreamsServiceInternalSubscriberCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the vendor stream ID
   *
   * @generated from field: uint64 vendor_stream_id = 10;
   */
  vendorStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<VendorStreamsServiceInternalSubscriberCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServiceInternalSubscriberCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "vendor_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServiceInternalSubscriberCreateRequest {
    return new VendorStreamsServiceInternalSubscriberCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServiceInternalSubscriberCreateRequest {
    return new VendorStreamsServiceInternalSubscriberCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServiceInternalSubscriberCreateRequest {
    return new VendorStreamsServiceInternalSubscriberCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServiceInternalSubscriberCreateRequest | PlainMessage<VendorStreamsServiceInternalSubscriberCreateRequest> | undefined, b: VendorStreamsServiceInternalSubscriberCreateRequest | PlainMessage<VendorStreamsServiceInternalSubscriberCreateRequest> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServiceInternalSubscriberCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an internal subscriber
 *
 * @generated from message Scailo.VendorStreamInternalSubscriber
 */
export class VendorStreamInternalSubscriber extends Message<VendorStreamInternalSubscriber> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this vendor stream internal subscriber
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the vendor stream ID
   *
   * @generated from field: uint64 vendor_stream_id = 10;
   */
  vendorStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * Stores the user UUID (determined by the user_id)
   *
   * @generated from field: string user_uuid = 30;
   */
  userUuid = "";

  constructor(data?: PartialMessage<VendorStreamInternalSubscriber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamInternalSubscriber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "vendor_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamInternalSubscriber {
    return new VendorStreamInternalSubscriber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamInternalSubscriber {
    return new VendorStreamInternalSubscriber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamInternalSubscriber {
    return new VendorStreamInternalSubscriber().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamInternalSubscriber | PlainMessage<VendorStreamInternalSubscriber> | undefined, b: VendorStreamInternalSubscriber | PlainMessage<VendorStreamInternalSubscriber> | undefined): boolean {
    return proto3.util.equals(VendorStreamInternalSubscriber, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of internal subscribers
 *
 * @generated from message Scailo.VendorStreamInternalSubscribersList
 */
export class VendorStreamInternalSubscribersList extends Message<VendorStreamInternalSubscribersList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.VendorStreamInternalSubscriber list = 1;
   */
  list: VendorStreamInternalSubscriber[] = [];

  constructor(data?: PartialMessage<VendorStreamInternalSubscribersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamInternalSubscribersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: VendorStreamInternalSubscriber, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamInternalSubscribersList {
    return new VendorStreamInternalSubscribersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamInternalSubscribersList {
    return new VendorStreamInternalSubscribersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamInternalSubscribersList {
    return new VendorStreamInternalSubscribersList().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamInternalSubscribersList | PlainMessage<VendorStreamInternalSubscribersList> | undefined, b: VendorStreamInternalSubscribersList | PlainMessage<VendorStreamInternalSubscribersList> | undefined): boolean {
    return proto3.util.equals(VendorStreamInternalSubscribersList, a, b);
  }
}

/**
 *
 * Describes the data model to handle importing of internal subscribers from the given identifier representing a team or a department
 *
 * @generated from message Scailo.VendorStreamsServiceImportInternalSubscribersRequest
 */
export class VendorStreamsServiceImportInternalSubscribersRequest extends Message<VendorStreamsServiceImportInternalSubscribersRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the vendor stream
   *
   * @generated from field: uint64 vendor_stream_id = 2;
   */
  vendorStreamId = protoInt64.zero;

  /**
   * The ID of the team or the department from which internal subscribers need to be added to the vendor stream
   *
   * @generated from field: uint64 resource_id = 3;
   */
  resourceId = protoInt64.zero;

  /**
   * Stores if the existing internal subscribers in the vendor stream need to be deleted before adding from the source record
   *
   * @generated from field: bool delete_existing = 4;
   */
  deleteExisting = false;

  constructor(data?: PartialMessage<VendorStreamsServiceImportInternalSubscribersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServiceImportInternalSubscribersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vendor_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "resource_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "delete_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServiceImportInternalSubscribersRequest {
    return new VendorStreamsServiceImportInternalSubscribersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServiceImportInternalSubscribersRequest {
    return new VendorStreamsServiceImportInternalSubscribersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServiceImportInternalSubscribersRequest {
    return new VendorStreamsServiceImportInternalSubscribersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServiceImportInternalSubscribersRequest | PlainMessage<VendorStreamsServiceImportInternalSubscribersRequest> | undefined, b: VendorStreamsServiceImportInternalSubscribersRequest | PlainMessage<VendorStreamsServiceImportInternalSubscribersRequest> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServiceImportInternalSubscribersRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a vendor stream vendor subscriber
 *
 * @generated from message Scailo.VendorStreamsServiceVendorSubscriberCreateRequest
 */
export class VendorStreamsServiceVendorSubscriberCreateRequest extends Message<VendorStreamsServiceVendorSubscriberCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the vendor stream ID
   *
   * @generated from field: uint64 vendor_stream_id = 10;
   */
  vendorStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<VendorStreamsServiceVendorSubscriberCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamsServiceVendorSubscriberCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "vendor_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamsServiceVendorSubscriberCreateRequest {
    return new VendorStreamsServiceVendorSubscriberCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamsServiceVendorSubscriberCreateRequest {
    return new VendorStreamsServiceVendorSubscriberCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamsServiceVendorSubscriberCreateRequest {
    return new VendorStreamsServiceVendorSubscriberCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamsServiceVendorSubscriberCreateRequest | PlainMessage<VendorStreamsServiceVendorSubscriberCreateRequest> | undefined, b: VendorStreamsServiceVendorSubscriberCreateRequest | PlainMessage<VendorStreamsServiceVendorSubscriberCreateRequest> | undefined): boolean {
    return proto3.util.equals(VendorStreamsServiceVendorSubscriberCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a vendor stream vendor subscriber
 *
 * @generated from message Scailo.VendorStreamVendorSubscriber
 */
export class VendorStreamVendorSubscriber extends Message<VendorStreamVendorSubscriber> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this vendor stream vendor subscriber
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the vendor stream ID
   *
   * @generated from field: uint64 vendor_stream_id = 10;
   */
  vendorStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * Stores the user UUID (determined by the user_id)
   *
   * @generated from field: string user_uuid = 30;
   */
  userUuid = "";

  constructor(data?: PartialMessage<VendorStreamVendorSubscriber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamVendorSubscriber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "vendor_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamVendorSubscriber {
    return new VendorStreamVendorSubscriber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamVendorSubscriber {
    return new VendorStreamVendorSubscriber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamVendorSubscriber {
    return new VendorStreamVendorSubscriber().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamVendorSubscriber | PlainMessage<VendorStreamVendorSubscriber> | undefined, b: VendorStreamVendorSubscriber | PlainMessage<VendorStreamVendorSubscriber> | undefined): boolean {
    return proto3.util.equals(VendorStreamVendorSubscriber, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of vendor stream vendor subscribers
 *
 * @generated from message Scailo.VendorStreamVendorSubscribersList
 */
export class VendorStreamVendorSubscribersList extends Message<VendorStreamVendorSubscribersList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.VendorStreamVendorSubscriber list = 1;
   */
  list: VendorStreamVendorSubscriber[] = [];

  constructor(data?: PartialMessage<VendorStreamVendorSubscribersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VendorStreamVendorSubscribersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: VendorStreamVendorSubscriber, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorStreamVendorSubscribersList {
    return new VendorStreamVendorSubscribersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorStreamVendorSubscribersList {
    return new VendorStreamVendorSubscribersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorStreamVendorSubscribersList {
    return new VendorStreamVendorSubscribersList().fromJsonString(jsonString, options);
  }

  static equals(a: VendorStreamVendorSubscribersList | PlainMessage<VendorStreamVendorSubscribersList> | undefined, b: VendorStreamVendorSubscribersList | PlainMessage<VendorStreamVendorSubscribersList> | undefined): boolean {
    return proto3.util.equals(VendorStreamVendorSubscribersList, a, b);
  }
}

