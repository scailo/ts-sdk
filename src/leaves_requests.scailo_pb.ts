// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file leaves_requests.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest, FormFieldDatumFilterRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.LEAVE_REQUEST_SORT_KEY
 */
export enum LEAVE_REQUEST_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  LEAVE_REQUEST_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_CREATED_AT = 1;
   */
  LEAVE_REQUEST_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_MODIFIED_AT = 2;
   */
  LEAVE_REQUEST_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_APPROVED_ON = 3;
   */
  LEAVE_REQUEST_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_APPROVED_BY = 4;
   */
  LEAVE_REQUEST_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  LEAVE_REQUEST_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_COMPLETED_ON = 6;
   */
  LEAVE_REQUEST_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_REFERENCE_ID = 10;
   */
  LEAVE_REQUEST_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  LEAVE_REQUEST_SORT_KEY_FINAL_REF_NUMBER = 11,

  /**
   * Fetch ordered results by the user ID
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_USER_ID = 12;
   */
  LEAVE_REQUEST_SORT_KEY_USER_ID = 12,

  /**
   * Fetch ordered results by the leave type ID
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_LEAVE_TYPE_ID = 13;
   */
  LEAVE_REQUEST_SORT_KEY_LEAVE_TYPE_ID = 13,

  /**
   * Fetch ordered results by the "from timestamp"
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_FROM_TIMESTAMP = 14;
   */
  LEAVE_REQUEST_SORT_KEY_FROM_TIMESTAMP = 14,

  /**
   * Fetch ordered results by the "to timestamp"
   *
   * @generated from enum value: LEAVE_REQUEST_SORT_KEY_TO_TIMESTAMP = 15;
   */
  LEAVE_REQUEST_SORT_KEY_TO_TIMESTAMP = 15,
}
// Retrieve enum metadata with: proto3.getEnumType(LEAVE_REQUEST_SORT_KEY)
proto3.util.setEnumType(LEAVE_REQUEST_SORT_KEY, "Scailo.LEAVE_REQUEST_SORT_KEY", [
  { no: 0, name: "LEAVE_REQUEST_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "LEAVE_REQUEST_SORT_KEY_CREATED_AT" },
  { no: 2, name: "LEAVE_REQUEST_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "LEAVE_REQUEST_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "LEAVE_REQUEST_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "LEAVE_REQUEST_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "LEAVE_REQUEST_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "LEAVE_REQUEST_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "LEAVE_REQUEST_SORT_KEY_FINAL_REF_NUMBER" },
  { no: 12, name: "LEAVE_REQUEST_SORT_KEY_USER_ID" },
  { no: 13, name: "LEAVE_REQUEST_SORT_KEY_LEAVE_TYPE_ID" },
  { no: 14, name: "LEAVE_REQUEST_SORT_KEY_FROM_TIMESTAMP" },
  { no: 15, name: "LEAVE_REQUEST_SORT_KEY_TO_TIMESTAMP" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.LeavesRequestsServiceCreateRequest
 */
export class LeavesRequestsServiceCreateRequest extends Message<LeavesRequestsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the leave request
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The ID of the user who has requested for leave
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * The ID of the corresponding leave type
   *
   * @generated from field: uint64 leave_type_id = 12;
   */
  leaveTypeId = protoInt64.zero;

  /**
   * The UNIX timestamp from when the leave begins
   *
   * @generated from field: uint64 from_timestamp = 13;
   */
  fromTimestamp = protoInt64.zero;

  /**
   * The UNIX timestamp from when the leave ends
   *
   * @generated from field: uint64 to_timestamp = 14;
   */
  toTimestamp = protoInt64.zero;

  /**
   * The description of the leave request
   *
   * @generated from field: string description = 15;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<LeavesRequestsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesRequestsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "from_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "to_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesRequestsServiceCreateRequest {
    return new LeavesRequestsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesRequestsServiceCreateRequest {
    return new LeavesRequestsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesRequestsServiceCreateRequest {
    return new LeavesRequestsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesRequestsServiceCreateRequest | PlainMessage<LeavesRequestsServiceCreateRequest> | undefined, b: LeavesRequestsServiceCreateRequest | PlainMessage<LeavesRequestsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(LeavesRequestsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.LeavesRequestsServiceUpdateRequest
 */
export class LeavesRequestsServiceUpdateRequest extends Message<LeavesRequestsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the leave request
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The ID of the corresponding leave type
   *
   * @generated from field: uint64 leave_type_id = 12;
   */
  leaveTypeId = protoInt64.zero;

  /**
   * The UNIX timestamp from when the leave begins
   *
   * @generated from field: uint64 from_timestamp = 13;
   */
  fromTimestamp = protoInt64.zero;

  /**
   * The UNIX timestamp from when the leave ends
   *
   * @generated from field: uint64 to_timestamp = 14;
   */
  toTimestamp = protoInt64.zero;

  /**
   * The description of the leave request
   *
   * @generated from field: string description = 15;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<LeavesRequestsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesRequestsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "from_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "to_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesRequestsServiceUpdateRequest {
    return new LeavesRequestsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesRequestsServiceUpdateRequest {
    return new LeavesRequestsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesRequestsServiceUpdateRequest {
    return new LeavesRequestsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesRequestsServiceUpdateRequest | PlainMessage<LeavesRequestsServiceUpdateRequest> | undefined, b: LeavesRequestsServiceUpdateRequest | PlainMessage<LeavesRequestsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(LeavesRequestsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.LeaveRequest
 */
export class LeaveRequest extends Message<LeaveRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this leave request
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this leave request
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this leave request
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this leave request was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference_id of the leave request
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The ID of the user who has requested for leave
   *
   * @generated from field: uint64 user_id = 12;
   */
  userId = protoInt64.zero;

  /**
   * The ID of the corresponding leave type
   *
   * @generated from field: uint64 leave_type_id = 13;
   */
  leaveTypeId = protoInt64.zero;

  /**
   * The UNIX timestamp from when the leave begins
   *
   * @generated from field: uint64 from_timestamp = 14;
   */
  fromTimestamp = protoInt64.zero;

  /**
   * The UNIX timestamp from when the leave ends
   *
   * @generated from field: uint64 to_timestamp = 15;
   */
  toTimestamp = protoInt64.zero;

  /**
   * The description of the leave request
   *
   * @generated from field: string description = 16;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 30;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<LeaveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeaveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "from_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "to_timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveRequest {
    return new LeaveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveRequest {
    return new LeaveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveRequest {
    return new LeaveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveRequest | PlainMessage<LeaveRequest> | undefined, b: LeaveRequest | PlainMessage<LeaveRequest> | undefined): boolean {
    return proto3.util.equals(LeaveRequest, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.LeavesRequestsList
 */
export class LeavesRequestsList extends Message<LeavesRequestsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.LeaveRequest list = 1;
   */
  list: LeaveRequest[] = [];

  constructor(data?: PartialMessage<LeavesRequestsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesRequestsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: LeaveRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesRequestsList {
    return new LeavesRequestsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesRequestsList {
    return new LeavesRequestsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesRequestsList {
    return new LeavesRequestsList().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesRequestsList | PlainMessage<LeavesRequestsList> | undefined, b: LeavesRequestsList | PlainMessage<LeavesRequestsList> | undefined): boolean {
    return proto3.util.equals(LeavesRequestsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.LeavesRequestsServicePaginationReq
 */
export class LeavesRequestsServicePaginationReq extends Message<LeavesRequestsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.LEAVE_REQUEST_SORT_KEY sort_key = 5;
   */
  sortKey = LEAVE_REQUEST_SORT_KEY.LEAVE_REQUEST_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this leave request
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<LeavesRequestsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesRequestsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(LEAVE_REQUEST_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesRequestsServicePaginationReq {
    return new LeavesRequestsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesRequestsServicePaginationReq {
    return new LeavesRequestsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesRequestsServicePaginationReq {
    return new LeavesRequestsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesRequestsServicePaginationReq | PlainMessage<LeavesRequestsServicePaginationReq> | undefined, b: LeavesRequestsServicePaginationReq | PlainMessage<LeavesRequestsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(LeavesRequestsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.LeavesRequestsServicePaginationResponse
 */
export class LeavesRequestsServicePaginationResponse extends Message<LeavesRequestsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.LeaveRequest payload = 4;
   */
  payload: LeaveRequest[] = [];

  constructor(data?: PartialMessage<LeavesRequestsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesRequestsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: LeaveRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesRequestsServicePaginationResponse {
    return new LeavesRequestsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesRequestsServicePaginationResponse {
    return new LeavesRequestsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesRequestsServicePaginationResponse {
    return new LeavesRequestsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesRequestsServicePaginationResponse | PlainMessage<LeavesRequestsServicePaginationResponse> | undefined, b: LeavesRequestsServicePaginationResponse | PlainMessage<LeavesRequestsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(LeavesRequestsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.LeavesRequestsServiceFilterReq
 */
export class LeavesRequestsServiceFilterReq extends Message<LeavesRequestsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.LEAVE_REQUEST_SORT_KEY sort_key = 5;
   */
  sortKey = LEAVE_REQUEST_SORT_KEY.LEAVE_REQUEST_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this leave request
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference_id of the leave request
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The ID of the user who has requested for leave
   *
   * @generated from field: uint64 user_id = 22;
   */
  userId = protoInt64.zero;

  /**
   * The ID of the corresponding leave type
   *
   * @generated from field: uint64 leave_type_id = 23;
   */
  leaveTypeId = protoInt64.zero;

  /**
   * The start range of "from timestamp"
   *
   * @generated from field: uint64 from_timestamp_start = 24;
   */
  fromTimestampStart = protoInt64.zero;

  /**
   * The end range of "from timestamp"
   *
   * @generated from field: uint64 from_timestamp_end = 25;
   */
  fromTimestampEnd = protoInt64.zero;

  /**
   * The start range of "to timestamp"
   *
   * @generated from field: uint64 to_timestamp_start = 26;
   */
  toTimestampStart = protoInt64.zero;

  /**
   * The end range of "to timestamp"
   *
   * @generated from field: uint64 to_timestamp_end = 27;
   */
  toTimestampEnd = protoInt64.zero;

  /**
   * The list of form data filters
   *
   * @generated from field: repeated Scailo.FormFieldDatumFilterRequest form_data = 500;
   */
  formData: FormFieldDatumFilterRequest[] = [];

  constructor(data?: PartialMessage<LeavesRequestsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesRequestsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(LEAVE_REQUEST_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 24, name: "from_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "from_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "to_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "to_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 500, name: "form_data", kind: "message", T: FormFieldDatumFilterRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesRequestsServiceFilterReq {
    return new LeavesRequestsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesRequestsServiceFilterReq {
    return new LeavesRequestsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesRequestsServiceFilterReq {
    return new LeavesRequestsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesRequestsServiceFilterReq | PlainMessage<LeavesRequestsServiceFilterReq> | undefined, b: LeavesRequestsServiceFilterReq | PlainMessage<LeavesRequestsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(LeavesRequestsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.LeavesRequestsServiceCountReq
 */
export class LeavesRequestsServiceCountReq extends Message<LeavesRequestsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this leave request
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference_id of the leave request
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The ID of the user who has requested for leave
   *
   * @generated from field: uint64 user_id = 22;
   */
  userId = protoInt64.zero;

  /**
   * The ID of the corresponding leave type
   *
   * @generated from field: uint64 leave_type_id = 23;
   */
  leaveTypeId = protoInt64.zero;

  /**
   * The start range of "from timestamp"
   *
   * @generated from field: uint64 from_timestamp_start = 24;
   */
  fromTimestampStart = protoInt64.zero;

  /**
   * The end range of "from timestamp"
   *
   * @generated from field: uint64 from_timestamp_end = 25;
   */
  fromTimestampEnd = protoInt64.zero;

  /**
   * The start range of "to timestamp"
   *
   * @generated from field: uint64 to_timestamp_start = 26;
   */
  toTimestampStart = protoInt64.zero;

  /**
   * The end range of "to timestamp"
   *
   * @generated from field: uint64 to_timestamp_end = 27;
   */
  toTimestampEnd = protoInt64.zero;

  /**
   * The list of form data filters
   *
   * @generated from field: repeated Scailo.FormFieldDatumFilterRequest form_data = 500;
   */
  formData: FormFieldDatumFilterRequest[] = [];

  constructor(data?: PartialMessage<LeavesRequestsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesRequestsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 24, name: "from_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "from_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "to_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "to_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 500, name: "form_data", kind: "message", T: FormFieldDatumFilterRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesRequestsServiceCountReq {
    return new LeavesRequestsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesRequestsServiceCountReq {
    return new LeavesRequestsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesRequestsServiceCountReq {
    return new LeavesRequestsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesRequestsServiceCountReq | PlainMessage<LeavesRequestsServiceCountReq> | undefined, b: LeavesRequestsServiceCountReq | PlainMessage<LeavesRequestsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(LeavesRequestsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.LeavesRequestsServiceSearchAllReq
 */
export class LeavesRequestsServiceSearchAllReq extends Message<LeavesRequestsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.LEAVE_REQUEST_SORT_KEY sort_key = 5;
   */
  sortKey = LEAVE_REQUEST_SORT_KEY.LEAVE_REQUEST_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The ID of the user who has requested for leave
   *
   * @generated from field: uint64 user_id = 22;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<LeavesRequestsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesRequestsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(LEAVE_REQUEST_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesRequestsServiceSearchAllReq {
    return new LeavesRequestsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesRequestsServiceSearchAllReq {
    return new LeavesRequestsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesRequestsServiceSearchAllReq {
    return new LeavesRequestsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesRequestsServiceSearchAllReq | PlainMessage<LeavesRequestsServiceSearchAllReq> | undefined, b: LeavesRequestsServiceSearchAllReq | PlainMessage<LeavesRequestsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(LeavesRequestsServiceSearchAllReq, a, b);
  }
}

