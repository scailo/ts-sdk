// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file visitations.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Visitation, VisitationsList, VisitationsServiceCountReq, VisitationsServiceCreateRequest, VisitationsServiceFilterReq, VisitationsServiceImageEntryRequest, VisitationsServiceImageExitRequest, VisitationsServicePaginationReq, VisitationsServicePaginationResponse, VisitationsServiceSearchAllReq, VisitationsServiceUpdateRequest } from "./visitations.scailo_pb.js";
import { ActiveStatus, CountInSLCStatusRequest, CountResponse, GPSCoordinatesResponse, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDWithUserComment, ImageResponse, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each visitation
 *
 * @generated from service Scailo.VisitationsService
 */
export const VisitationsService = {
  typeName: "Scailo.VisitationsService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.VisitationsService.Create
     */
    create: {
      name: "Create",
      I: VisitationsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.VisitationsService.Draft
     */
    draft: {
      name: "Draft",
      I: VisitationsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.VisitationsService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: VisitationsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.VisitationsService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.VisitationsService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.VisitationsService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.VisitationsService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.VisitationsService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: VisitationsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.VisitationsService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.VisitationsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.VisitationsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.VisitationsService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.VisitationsService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (Identifier) returns (IdentifierResponse);
     *
     * @generated from rpc Scailo.VisitationsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Store entry time
     *
     * @generated from rpc Scailo.VisitationsService.RecordImageEntry
     */
    recordImageEntry: {
      name: "RecordImageEntry",
      I: VisitationsServiceImageEntryRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Store exit time
     *
     * @generated from rpc Scailo.VisitationsService.RecordImageExit
     */
    recordImageExit: {
      name: "RecordImageExit",
      I: VisitationsServiceImageExitRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.VisitationsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Visitation,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.VisitationsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: Visitation,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components by ID (without logs)
     *
     * @generated from rpc Scailo.VisitationsService.ViewEssentialByID
     */
    viewEssentialByID: {
      name: "ViewEssentialByID",
      I: Identifier,
      O: Visitation,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components (without logs) that matches the given UUID
     *
     * @generated from rpc Scailo.VisitationsService.ViewEssentialByUUID
     */
    viewEssentialByUUID: {
      name: "ViewEssentialByUUID",
      I: IdentifierUUID,
      O: Visitation,
      kind: MethodKind.Unary,
    },
    /**
     * View all records with the given IDs
     *
     * @generated from rpc Scailo.VisitationsService.ViewFromIDs
     */
    viewFromIDs: {
      name: "ViewFromIDs",
      I: IdentifiersList,
      O: VisitationsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.VisitationsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: VisitationsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.VisitationsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: VisitationsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.VisitationsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: VisitationsServicePaginationReq,
      O: VisitationsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View entry image for visitation ID
     *
     * @generated from rpc Scailo.VisitationsService.ViewEntryImage
     */
    viewEntryImage: {
      name: "ViewEntryImage",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View exit image for visitation ID
     *
     * @generated from rpc Scailo.VisitationsService.ViewExitImage
     */
    viewExitImage: {
      name: "ViewExitImage",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View entry GPS coordinates for visitation ID
     *
     * @generated from rpc Scailo.VisitationsService.ViewEntryGPSCoordinates
     */
    viewEntryGPSCoordinates: {
      name: "ViewEntryGPSCoordinates",
      I: Identifier,
      O: GPSCoordinatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View exit GPS coordinates for visitation ID
     *
     * @generated from rpc Scailo.VisitationsService.ViewExitGPSCoordinates
     */
    viewExitGPSCoordinates: {
      name: "ViewExitGPSCoordinates",
      I: Identifier,
      O: GPSCoordinatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View QR Code
     *
     * @generated from rpc Scailo.VisitationsService.ViewQRCode
     */
    viewQRCode: {
      name: "ViewQRCode",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.VisitationsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: VisitationsServiceSearchAllReq,
      O: VisitationsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.VisitationsService.Filter
     */
    filter: {
      name: "Filter",
      I: VisitationsServiceFilterReq,
      O: VisitationsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.VisitationsService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.VisitationsService.Count
     */
    count: {
      name: "Count",
      I: VisitationsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
     *
     * @generated from rpc Scailo.VisitationsService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: VisitationsServiceFilterReq,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
  }
} as const;

