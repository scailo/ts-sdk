// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file clientstreams.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BOOL_FILTER, EmployeeMetadata, SORT_ORDER } from "./base.scailo_pb.js";

/**
 *
 * Describes the lifecycle status of each client stream
 *
 * @generated from enum Scailo.CLIENT_STREAM_LIFECYCLE
 */
export enum CLIENT_STREAM_LIFECYCLE {
  /**
   * Used only in filters
   *
   * @generated from enum value: CLIENT_STREAM_LIFECYCLE_ANY_UNSPECIFIED = 0;
   */
  CLIENT_STREAM_LIFECYCLE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the client stream is open
   *
   * @generated from enum value: CLIENT_STREAM_LIFECYCLE_OPEN = 1;
   */
  CLIENT_STREAM_LIFECYCLE_OPEN = 1,

  /**
   * Denotes that the client stream has completed
   *
   * @generated from enum value: CLIENT_STREAM_LIFECYCLE_COMPLETED = 2;
   */
  CLIENT_STREAM_LIFECYCLE_COMPLETED = 2,

  /**
   * Denotes that the client stream has been cancelled
   *
   * @generated from enum value: CLIENT_STREAM_LIFECYCLE_CANCELLED = 3;
   */
  CLIENT_STREAM_LIFECYCLE_CANCELLED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CLIENT_STREAM_LIFECYCLE)
proto3.util.setEnumType(CLIENT_STREAM_LIFECYCLE, "Scailo.CLIENT_STREAM_LIFECYCLE", [
  { no: 0, name: "CLIENT_STREAM_LIFECYCLE_ANY_UNSPECIFIED" },
  { no: 1, name: "CLIENT_STREAM_LIFECYCLE_OPEN" },
  { no: 2, name: "CLIENT_STREAM_LIFECYCLE_COMPLETED" },
  { no: 3, name: "CLIENT_STREAM_LIFECYCLE_CANCELLED" },
]);

/**
 *
 * Describes the available client stream references
 *
 * @generated from enum Scailo.CLIENT_STREAM_REF_FROM
 */
export enum CLIENT_STREAM_REF_FROM {
  /**
   * Used only in filters
   *
   * @generated from enum value: CLIENT_STREAM_REF_FROM_ANY_UNSPECIFIED = 0;
   */
  CLIENT_STREAM_REF_FROM_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the reference is from a sales order
   *
   * @generated from enum value: CLIENT_STREAM_REF_FROM_SALES_ORDER = 1;
   */
  CLIENT_STREAM_REF_FROM_SALES_ORDER = 1,

  /**
   * Denotes that the reference is from a goods dispatch
   *
   * @generated from enum value: CLIENT_STREAM_REF_FROM_GOODS_DISPATCH = 10;
   */
  CLIENT_STREAM_REF_FROM_GOODS_DISPATCH = 10,

  /**
   * Denotes that the reference is from a sales invoice
   *
   * @generated from enum value: CLIENT_STREAM_REF_FROM_SALES_INVOICE = 11;
   */
  CLIENT_STREAM_REF_FROM_SALES_INVOICE = 11,

  /**
   * Denotes that the reference is from a sales return
   *
   * @generated from enum value: CLIENT_STREAM_REF_FROM_SALES_RETURN = 20;
   */
  CLIENT_STREAM_REF_FROM_SALES_RETURN = 20,

  /**
   * Denotes that the reference is from a credit note
   *
   * @generated from enum value: CLIENT_STREAM_REF_FROM_CREDIT_NOTE = 21;
   */
  CLIENT_STREAM_REF_FROM_CREDIT_NOTE = 21,

  /**
   * Denotes that the reference is from a sales receipt
   *
   * @generated from enum value: CLIENT_STREAM_REF_FROM_SALES_RECEIPT = 30;
   */
  CLIENT_STREAM_REF_FROM_SALES_RECEIPT = 30,

  /**
   * Denotes that the reference is from a sales quotation
   *
   * @generated from enum value: CLIENT_STREAM_REF_FROM_SALES_QUOTATION = 40;
   */
  CLIENT_STREAM_REF_FROM_SALES_QUOTATION = 40,

  /**
   * Denotes that the reference is from a sales enquiry
   *
   * @generated from enum value: CLIENT_STREAM_REF_FROM_SALES_ENQUIRY = 50;
   */
  CLIENT_STREAM_REF_FROM_SALES_ENQUIRY = 50,
}
// Retrieve enum metadata with: proto3.getEnumType(CLIENT_STREAM_REF_FROM)
proto3.util.setEnumType(CLIENT_STREAM_REF_FROM, "Scailo.CLIENT_STREAM_REF_FROM", [
  { no: 0, name: "CLIENT_STREAM_REF_FROM_ANY_UNSPECIFIED" },
  { no: 1, name: "CLIENT_STREAM_REF_FROM_SALES_ORDER" },
  { no: 10, name: "CLIENT_STREAM_REF_FROM_GOODS_DISPATCH" },
  { no: 11, name: "CLIENT_STREAM_REF_FROM_SALES_INVOICE" },
  { no: 20, name: "CLIENT_STREAM_REF_FROM_SALES_RETURN" },
  { no: 21, name: "CLIENT_STREAM_REF_FROM_CREDIT_NOTE" },
  { no: 30, name: "CLIENT_STREAM_REF_FROM_SALES_RECEIPT" },
  { no: 40, name: "CLIENT_STREAM_REF_FROM_SALES_QUOTATION" },
  { no: 50, name: "CLIENT_STREAM_REF_FROM_SALES_ENQUIRY" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.CLIENT_STREAM_SORT_KEY
 */
export enum CLIENT_STREAM_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: CLIENT_STREAM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  CLIENT_STREAM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: CLIENT_STREAM_SORT_KEY_CREATED_AT = 1;
   */
  CLIENT_STREAM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: CLIENT_STREAM_SORT_KEY_MODIFIED_AT = 2;
   */
  CLIENT_STREAM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: CLIENT_STREAM_SORT_KEY_COMPLETED_ON = 6;
   */
  CLIENT_STREAM_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the title
   *
   * @generated from enum value: CLIENT_STREAM_SORT_KEY_TITLE = 10;
   */
  CLIENT_STREAM_SORT_KEY_TITLE = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(CLIENT_STREAM_SORT_KEY)
proto3.util.setEnumType(CLIENT_STREAM_SORT_KEY, "Scailo.CLIENT_STREAM_SORT_KEY", [
  { no: 0, name: "CLIENT_STREAM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "CLIENT_STREAM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "CLIENT_STREAM_SORT_KEY_MODIFIED_AT" },
  { no: 6, name: "CLIENT_STREAM_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "CLIENT_STREAM_SORT_KEY_TITLE" },
]);

/**
 *
 * Describes the available message types for a client stream message
 *
 * @generated from enum Scailo.CLIENT_STREAM_MESSAGE_TYPE
 */
export enum CLIENT_STREAM_MESSAGE_TYPE {
  /**
   * Used only for filters
   *
   * @generated from enum value: CLIENT_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED = 0;
   */
  CLIENT_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the message was sent by a user
   *
   * @generated from enum value: CLIENT_STREAM_MESSAGE_TYPE_USER = 1;
   */
  CLIENT_STREAM_MESSAGE_TYPE_USER = 1,

  /**
   * Denotes that the message was sent by the system
   *
   * @generated from enum value: CLIENT_STREAM_MESSAGE_TYPE_SYSTEM = 2;
   */
  CLIENT_STREAM_MESSAGE_TYPE_SYSTEM = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CLIENT_STREAM_MESSAGE_TYPE)
proto3.util.setEnumType(CLIENT_STREAM_MESSAGE_TYPE, "Scailo.CLIENT_STREAM_MESSAGE_TYPE", [
  { no: 0, name: "CLIENT_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED" },
  { no: 1, name: "CLIENT_STREAM_MESSAGE_TYPE_USER" },
  { no: 2, name: "CLIENT_STREAM_MESSAGE_TYPE_SYSTEM" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.CLIENT_STREAM_MESSAGE_SORT_KEY
 */
export enum CLIENT_STREAM_MESSAGE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: CLIENT_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  CLIENT_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: CLIENT_STREAM_MESSAGE_SORT_KEY_CREATED_AT = 1;
   */
  CLIENT_STREAM_MESSAGE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: CLIENT_STREAM_MESSAGE_SORT_KEY_MODIFIED_AT = 2;
   */
  CLIENT_STREAM_MESSAGE_SORT_KEY_MODIFIED_AT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CLIENT_STREAM_MESSAGE_SORT_KEY)
proto3.util.setEnumType(CLIENT_STREAM_MESSAGE_SORT_KEY, "Scailo.CLIENT_STREAM_MESSAGE_SORT_KEY", [
  { no: 0, name: "CLIENT_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "CLIENT_STREAM_MESSAGE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "CLIENT_STREAM_MESSAGE_SORT_KEY_MODIFIED_AT" },
]);

/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being an client stream lifecycle status
 *
 * @generated from message Scailo.LogbookLogClientStreamLC
 */
export class LogbookLogClientStreamLC extends Message<LogbookLogClientStreamLC> {
  /**
   * ID of the resource
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Stores if the resource is active
   *
   * @generated from field: bool is_active = 2;
   */
  isActive = false;

  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: uint64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: string ref_uuid = 10;
   */
  refUuid = "";

  /**
   * The operation that was performed
   *
   * @generated from field: Scailo.CLIENT_STREAM_LIFECYCLE operation = 11;
   */
  operation = CLIENT_STREAM_LIFECYCLE.CLIENT_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The name of the person who made this entry
   *
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * The ID of the user who made this entry
   *
   * @generated from field: uint64 user_id = 14;
   */
  userId = protoInt64.zero;

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 15;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 16;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogClientStreamLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LogbookLogClientStreamLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_LIFECYCLE) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogClientStreamLC {
    return new LogbookLogClientStreamLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogClientStreamLC {
    return new LogbookLogClientStreamLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogClientStreamLC {
    return new LogbookLogClientStreamLC().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogClientStreamLC | PlainMessage<LogbookLogClientStreamLC> | undefined, b: LogbookLogClientStreamLC | PlainMessage<LogbookLogClientStreamLC> | undefined): boolean {
    return proto3.util.equals(LogbookLogClientStreamLC, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.ClientStreamsServiceCreateRequest
 */
export class ClientStreamsServiceCreateRequest extends Message<ClientStreamsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The title of the client stream
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The ID of the client
   *
   * @generated from field: uint64 client_id = 11;
   */
  clientId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: Scailo.CLIENT_STREAM_REF_FROM ref_from = 12;
   */
  refFrom = CLIENT_STREAM_REF_FROM.CLIENT_STREAM_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated reference ID
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * Assign self (the user creating the stream) as an internal subscriber
   *
   * @generated from field: bool assign_self_as_internal_subscriber = 80;
   */
  assignSelfAsInternalSubscriber = false;

  /**
   * Assign self (the user creating the stream) as a client subscriber (this would allow client users to also create a stream)
   *
   * @generated from field: bool assign_self_as_client_subscriber = 81;
   */
  assignSelfAsClientSubscriber = false;

  constructor(data?: PartialMessage<ClientStreamsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ref_from", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_REF_FROM) },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 80, name: "assign_self_as_internal_subscriber", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 81, name: "assign_self_as_client_subscriber", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServiceCreateRequest {
    return new ClientStreamsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServiceCreateRequest {
    return new ClientStreamsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServiceCreateRequest {
    return new ClientStreamsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServiceCreateRequest | PlainMessage<ClientStreamsServiceCreateRequest> | undefined, b: ClientStreamsServiceCreateRequest | PlainMessage<ClientStreamsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.ClientStreamsServiceUpdateRequest
 */
export class ClientStreamsServiceUpdateRequest extends Message<ClientStreamsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The title of the client stream
   *
   * @generated from field: string title = 10;
   */
  title = "";

  constructor(data?: PartialMessage<ClientStreamsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServiceUpdateRequest {
    return new ClientStreamsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServiceUpdateRequest {
    return new ClientStreamsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServiceUpdateRequest {
    return new ClientStreamsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServiceUpdateRequest | PlainMessage<ClientStreamsServiceUpdateRequest> | undefined, b: ClientStreamsServiceUpdateRequest | PlainMessage<ClientStreamsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.ClientStream
 */
export class ClientStream extends Message<ClientStream> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this client stream
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The status of this client stream
   *
   * @generated from field: Scailo.CLIENT_STREAM_LIFECYCLE status = 4;
   */
  status = CLIENT_STREAM_LIFECYCLE.CLIENT_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this client stream
   *
   * @generated from field: repeated Scailo.LogbookLogClientStreamLC logs = 5;
   */
  logs: LogbookLogClientStreamLC[] = [];

  /**
   * The timestamp of when this client stream was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The title of the client stream
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The ID of the client
   *
   * @generated from field: uint64 client_id = 11;
   */
  clientId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: Scailo.CLIENT_STREAM_REF_FROM ref_from = 12;
   */
  refFrom = CLIENT_STREAM_REF_FROM.CLIENT_STREAM_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated reference ID
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The associated reference UUID
   *
   * @generated from field: string ref_uuid = 14;
   */
  refUuid = "";

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 50;
   */
  internalRef = "";

  /**
   * Stores the number of unread messages in this stream for the specific user (on the basis of the auth token)
   *
   * @generated from field: uint64 unread_count = 60;
   */
  unreadCount = protoInt64.zero;

  constructor(data?: PartialMessage<ClientStream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_LIFECYCLE) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogClientStreamLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ref_from", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_REF_FROM) },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "unread_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStream {
    return new ClientStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStream {
    return new ClientStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStream {
    return new ClientStream().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStream | PlainMessage<ClientStream> | undefined, b: ClientStream | PlainMessage<ClientStream> | undefined): boolean {
    return proto3.util.equals(ClientStream, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.ClientStreamsList
 */
export class ClientStreamsList extends Message<ClientStreamsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ClientStream list = 1;
   */
  list: ClientStream[] = [];

  constructor(data?: PartialMessage<ClientStreamsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ClientStream, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsList {
    return new ClientStreamsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsList {
    return new ClientStreamsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsList {
    return new ClientStreamsList().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsList | PlainMessage<ClientStreamsList> | undefined, b: ClientStreamsList | PlainMessage<ClientStreamsList> | undefined): boolean {
    return proto3.util.equals(ClientStreamsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.ClientStreamsServicePaginationReq
 */
export class ClientStreamsServicePaginationReq extends Message<ClientStreamsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.CLIENT_STREAM_SORT_KEY sort_key = 5;
   */
  sortKey = CLIENT_STREAM_SORT_KEY.CLIENT_STREAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this client stream
   *
   * @generated from field: Scailo.CLIENT_STREAM_LIFECYCLE status = 6;
   */
  status = CLIENT_STREAM_LIFECYCLE.CLIENT_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<ClientStreamsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_LIFECYCLE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServicePaginationReq {
    return new ClientStreamsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServicePaginationReq {
    return new ClientStreamsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServicePaginationReq {
    return new ClientStreamsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServicePaginationReq | PlainMessage<ClientStreamsServicePaginationReq> | undefined, b: ClientStreamsServicePaginationReq | PlainMessage<ClientStreamsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.ClientStreamsServicePaginationResponse
 */
export class ClientStreamsServicePaginationResponse extends Message<ClientStreamsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.ClientStream payload = 4;
   */
  payload: ClientStream[] = [];

  constructor(data?: PartialMessage<ClientStreamsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: ClientStream, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServicePaginationResponse {
    return new ClientStreamsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServicePaginationResponse {
    return new ClientStreamsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServicePaginationResponse {
    return new ClientStreamsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServicePaginationResponse | PlainMessage<ClientStreamsServicePaginationResponse> | undefined, b: ClientStreamsServicePaginationResponse | PlainMessage<ClientStreamsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.ClientStreamsServiceFilterReq
 */
export class ClientStreamsServiceFilterReq extends Message<ClientStreamsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.CLIENT_STREAM_SORT_KEY sort_key = 5;
   */
  sortKey = CLIENT_STREAM_SORT_KEY.CLIENT_STREAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this client stream
   *
   * @generated from field: Scailo.CLIENT_STREAM_LIFECYCLE status = 10;
   */
  status = CLIENT_STREAM_LIFECYCLE.CLIENT_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 18;
   */
  internalRef = "";

  /**
   * The title of the client stream
   *
   * @generated from field: string title = 30;
   */
  title = "";

  /**
   * ------------------------------------------------
   * Filter by the associated client ID
   *
   * @generated from field: uint64 client_id = 40;
   */
  clientId = protoInt64.zero;

  /**
   * Filter by the associated reference
   *
   * @generated from field: Scailo.CLIENT_STREAM_REF_FROM ref_from = 41;
   */
  refFrom = CLIENT_STREAM_REF_FROM.CLIENT_STREAM_REF_FROM_ANY_UNSPECIFIED;

  /**
   * Filter by the associated reference ID
   *
   * ------------------------------------------------
   *
   * @generated from field: uint64 ref_id = 42;
   */
  refId = protoInt64.zero;

  /**
   * Filter by the associated internal subscriber user ID
   *
   * @generated from field: uint64 internal_subscriber_user_id = 60;
   */
  internalSubscriberUserId = protoInt64.zero;

  /**
   * Filter by the associated client subscriber user ID
   *
   * @generated from field: uint64 client_subscriber_user_id = 61;
   */
  clientSubscriberUserId = protoInt64.zero;

  constructor(data?: PartialMessage<ClientStreamsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "ref_from", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_REF_FROM) },
    { no: 42, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "internal_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 61, name: "client_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServiceFilterReq {
    return new ClientStreamsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServiceFilterReq {
    return new ClientStreamsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServiceFilterReq {
    return new ClientStreamsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServiceFilterReq | PlainMessage<ClientStreamsServiceFilterReq> | undefined, b: ClientStreamsServiceFilterReq | PlainMessage<ClientStreamsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.ClientStreamsServiceCountReq
 */
export class ClientStreamsServiceCountReq extends Message<ClientStreamsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this client stream
   *
   * @generated from field: Scailo.CLIENT_STREAM_LIFECYCLE status = 10;
   */
  status = CLIENT_STREAM_LIFECYCLE.CLIENT_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 18;
   */
  internalRef = "";

  /**
   * The title of the client stream
   *
   * @generated from field: string title = 30;
   */
  title = "";

  /**
   * ------------------------------------------------
   * Filter by the associated client ID
   *
   * @generated from field: uint64 client_id = 40;
   */
  clientId = protoInt64.zero;

  /**
   * Filter by the associated reference
   *
   * @generated from field: Scailo.CLIENT_STREAM_REF_FROM ref_from = 41;
   */
  refFrom = CLIENT_STREAM_REF_FROM.CLIENT_STREAM_REF_FROM_ANY_UNSPECIFIED;

  /**
   * Filter by the associated reference ID
   *
   * ------------------------------------------------
   *
   * @generated from field: uint64 ref_id = 42;
   */
  refId = protoInt64.zero;

  /**
   * Filter by the associated internal subscriber user ID
   *
   * @generated from field: uint64 internal_subscriber_user_id = 60;
   */
  internalSubscriberUserId = protoInt64.zero;

  /**
   * Filter by the associated client subscriber user ID
   *
   * @generated from field: uint64 client_subscriber_user_id = 61;
   */
  clientSubscriberUserId = protoInt64.zero;

  constructor(data?: PartialMessage<ClientStreamsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "ref_from", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_REF_FROM) },
    { no: 42, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "internal_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 61, name: "client_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServiceCountReq {
    return new ClientStreamsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServiceCountReq {
    return new ClientStreamsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServiceCountReq {
    return new ClientStreamsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServiceCountReq | PlainMessage<ClientStreamsServiceCountReq> | undefined, b: ClientStreamsServiceCountReq | PlainMessage<ClientStreamsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.ClientStreamsServiceSearchAllReq
 */
export class ClientStreamsServiceSearchAllReq extends Message<ClientStreamsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.CLIENT_STREAM_SORT_KEY sort_key = 5;
   */
  sortKey = CLIENT_STREAM_SORT_KEY.CLIENT_STREAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.CLIENT_STREAM_LIFECYCLE status = 10;
   */
  status = CLIENT_STREAM_LIFECYCLE.CLIENT_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * ------------------------------------------------
   * Filter by the associated client ID
   *
   * ------------------------------------------------
   *
   * @generated from field: uint64 client_id = 40;
   */
  clientId = protoInt64.zero;

  /**
   * Filter by the associated internal subscriber user ID
   *
   * @generated from field: uint64 internal_subscriber_user_id = 60;
   */
  internalSubscriberUserId = protoInt64.zero;

  /**
   * Filter by the associated client subscriber user ID
   *
   * @generated from field: uint64 client_subscriber_user_id = 61;
   */
  clientSubscriberUserId = protoInt64.zero;

  constructor(data?: PartialMessage<ClientStreamsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_LIFECYCLE) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "internal_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 61, name: "client_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServiceSearchAllReq {
    return new ClientStreamsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServiceSearchAllReq {
    return new ClientStreamsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServiceSearchAllReq {
    return new ClientStreamsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServiceSearchAllReq | PlainMessage<ClientStreamsServiceSearchAllReq> | undefined, b: ClientStreamsServiceSearchAllReq | PlainMessage<ClientStreamsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the parameters required to add a message to an client stream
 *
 * @generated from message Scailo.ClientStreamsServiceMessageCreateRequest
 */
export class ClientStreamsServiceMessageCreateRequest extends Message<ClientStreamsServiceMessageCreateRequest> {
  /**
   * The type of the message
   *
   * @generated from field: Scailo.CLIENT_STREAM_MESSAGE_TYPE message_type = 8;
   */
  messageType = CLIENT_STREAM_MESSAGE_TYPE.CLIENT_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED;

  /**
   * Stores the client stream UUID
   *
   * @generated from field: string client_stream_uuid = 10;
   */
  clientStreamUuid = "";

  /**
   * Stores the optional UUID of the message that this message is a response to
   *
   * @generated from field: string response_to_message_uuid = 11;
   */
  responseToMessageUuid = "";

  /**
   * The content of the message
   *
   * @generated from field: string content = 20;
   */
  content = "";

  constructor(data?: PartialMessage<ClientStreamsServiceMessageCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServiceMessageCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 8, name: "message_type", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_MESSAGE_TYPE) },
    { no: 10, name: "client_stream_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "response_to_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServiceMessageCreateRequest {
    return new ClientStreamsServiceMessageCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServiceMessageCreateRequest {
    return new ClientStreamsServiceMessageCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServiceMessageCreateRequest {
    return new ClientStreamsServiceMessageCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServiceMessageCreateRequest | PlainMessage<ClientStreamsServiceMessageCreateRequest> | undefined, b: ClientStreamsServiceMessageCreateRequest | PlainMessage<ClientStreamsServiceMessageCreateRequest> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServiceMessageCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a message associated to an client stream
 *
 * @generated from message Scailo.ClientStreamMessage
 */
export class ClientStreamMessage extends Message<ClientStreamMessage> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this client stream
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The type of the message
   *
   * @generated from field: Scailo.CLIENT_STREAM_MESSAGE_TYPE message_type = 8;
   */
  messageType = CLIENT_STREAM_MESSAGE_TYPE.CLIENT_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED;

  /**
   * Stores the client stream ID
   *
   * @generated from field: uint64 client_stream_id = 10;
   */
  clientStreamId = protoInt64.zero;

  /**
   * Stores the optional UUID of the message that this message is a response to
   *
   * @generated from field: string response_to_message_uuid = 11;
   */
  responseToMessageUuid = "";

  /**
   * The content of the message
   *
   * @generated from field: string content = 20;
   */
  content = "";

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 50;
   */
  internalRef = "";

  /**
   * Stores if the message has been read by the user
   *
   * @generated from field: bool is_read = 60;
   */
  isRead = false;

  constructor(data?: PartialMessage<ClientStreamMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 8, name: "message_type", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_MESSAGE_TYPE) },
    { no: 10, name: "client_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "response_to_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "is_read", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamMessage {
    return new ClientStreamMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamMessage {
    return new ClientStreamMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamMessage {
    return new ClientStreamMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamMessage | PlainMessage<ClientStreamMessage> | undefined, b: ClientStreamMessage | PlainMessage<ClientStreamMessage> | undefined): boolean {
    return proto3.util.equals(ClientStreamMessage, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of client stream messages
 *
 * @generated from message Scailo.ClientStreamMessagesList
 */
export class ClientStreamMessagesList extends Message<ClientStreamMessagesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ClientStreamMessage list = 1;
   */
  list: ClientStreamMessage[] = [];

  constructor(data?: PartialMessage<ClientStreamMessagesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamMessagesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ClientStreamMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamMessagesList {
    return new ClientStreamMessagesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamMessagesList {
    return new ClientStreamMessagesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamMessagesList {
    return new ClientStreamMessagesList().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamMessagesList | PlainMessage<ClientStreamMessagesList> | undefined, b: ClientStreamMessagesList | PlainMessage<ClientStreamMessagesList> | undefined): boolean {
    return proto3.util.equals(ClientStreamMessagesList, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve messages.
 *
 * @generated from message Scailo.ClientStreamMessagesSearchRequest
 */
export class ClientStreamMessagesSearchRequest extends Message<ClientStreamMessagesSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.CLIENT_STREAM_MESSAGE_SORT_KEY sort_key = 5;
   */
  sortKey = CLIENT_STREAM_MESSAGE_SORT_KEY.CLIENT_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The type of the message
   *
   * @generated from field: Scailo.CLIENT_STREAM_MESSAGE_TYPE message_type = 8;
   */
  messageType = CLIENT_STREAM_MESSAGE_TYPE.CLIENT_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED;

  /**
   * The ID of the client stream
   *
   * @generated from field: uint64 client_stream_id = 20;
   */
  clientStreamId = protoInt64.zero;

  /**
   * Stores the optional UUID of the message that this message is a response to
   *
   * @generated from field: string response_to_message_uuid = 30;
   */
  responseToMessageUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<ClientStreamMessagesSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamMessagesSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_MESSAGE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "message_type", kind: "enum", T: proto3.getEnumType(CLIENT_STREAM_MESSAGE_TYPE) },
    { no: 20, name: "client_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "response_to_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamMessagesSearchRequest {
    return new ClientStreamMessagesSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamMessagesSearchRequest {
    return new ClientStreamMessagesSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamMessagesSearchRequest {
    return new ClientStreamMessagesSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamMessagesSearchRequest | PlainMessage<ClientStreamMessagesSearchRequest> | undefined, b: ClientStreamMessagesSearchRequest | PlainMessage<ClientStreamMessagesSearchRequest> | undefined): boolean {
    return proto3.util.equals(ClientStreamMessagesSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination messages request
 *
 * @generated from message Scailo.ClientStreamsServicePaginatedMessagesResponse
 */
export class ClientStreamsServicePaginatedMessagesResponse extends Message<ClientStreamsServicePaginatedMessagesResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.ClientStreamMessage payload = 4;
   */
  payload: ClientStreamMessage[] = [];

  constructor(data?: PartialMessage<ClientStreamsServicePaginatedMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServicePaginatedMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: ClientStreamMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServicePaginatedMessagesResponse {
    return new ClientStreamsServicePaginatedMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServicePaginatedMessagesResponse {
    return new ClientStreamsServicePaginatedMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServicePaginatedMessagesResponse {
    return new ClientStreamsServicePaginatedMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServicePaginatedMessagesResponse | PlainMessage<ClientStreamsServicePaginatedMessagesResponse> | undefined, b: ClientStreamsServicePaginatedMessagesResponse | PlainMessage<ClientStreamsServicePaginatedMessagesResponse> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServicePaginatedMessagesResponse, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a message receipt
 *
 * @generated from message Scailo.ClientStreamMessageReceipt
 */
export class ClientStreamMessageReceipt extends Message<ClientStreamMessageReceipt> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this client stream
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the client stream message UUID
   *
   * @generated from field: string client_stream_message_uuid = 10;
   */
  clientStreamMessageUuid = "";

  /**
   * The ID of the user who read this
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * Stores if the message has been read by the user
   *
   * @generated from field: bool is_read = 12;
   */
  isRead = false;

  /**
   * Stores the timestamp of when the message was read
   *
   * @generated from field: uint64 read_at = 13;
   */
  readAt = protoInt64.zero;

  constructor(data?: PartialMessage<ClientStreamMessageReceipt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamMessageReceipt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 10, name: "client_stream_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "is_read", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "read_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamMessageReceipt {
    return new ClientStreamMessageReceipt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamMessageReceipt {
    return new ClientStreamMessageReceipt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamMessageReceipt {
    return new ClientStreamMessageReceipt().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamMessageReceipt | PlainMessage<ClientStreamMessageReceipt> | undefined, b: ClientStreamMessageReceipt | PlainMessage<ClientStreamMessageReceipt> | undefined): boolean {
    return proto3.util.equals(ClientStreamMessageReceipt, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of client stream message receipts
 *
 * @generated from message Scailo.ClientStreamMessageReceiptsList
 */
export class ClientStreamMessageReceiptsList extends Message<ClientStreamMessageReceiptsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ClientStreamMessageReceipt list = 1;
   */
  list: ClientStreamMessageReceipt[] = [];

  constructor(data?: PartialMessage<ClientStreamMessageReceiptsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamMessageReceiptsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ClientStreamMessageReceipt, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamMessageReceiptsList {
    return new ClientStreamMessageReceiptsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamMessageReceiptsList {
    return new ClientStreamMessageReceiptsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamMessageReceiptsList {
    return new ClientStreamMessageReceiptsList().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamMessageReceiptsList | PlainMessage<ClientStreamMessageReceiptsList> | undefined, b: ClientStreamMessageReceiptsList | PlainMessage<ClientStreamMessageReceiptsList> | undefined): boolean {
    return proto3.util.equals(ClientStreamMessageReceiptsList, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create an internal subscriber
 *
 * @generated from message Scailo.ClientStreamsServiceInternalSubscriberCreateRequest
 */
export class ClientStreamsServiceInternalSubscriberCreateRequest extends Message<ClientStreamsServiceInternalSubscriberCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the client stream ID
   *
   * @generated from field: uint64 client_stream_id = 10;
   */
  clientStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<ClientStreamsServiceInternalSubscriberCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServiceInternalSubscriberCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "client_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServiceInternalSubscriberCreateRequest {
    return new ClientStreamsServiceInternalSubscriberCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServiceInternalSubscriberCreateRequest {
    return new ClientStreamsServiceInternalSubscriberCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServiceInternalSubscriberCreateRequest {
    return new ClientStreamsServiceInternalSubscriberCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServiceInternalSubscriberCreateRequest | PlainMessage<ClientStreamsServiceInternalSubscriberCreateRequest> | undefined, b: ClientStreamsServiceInternalSubscriberCreateRequest | PlainMessage<ClientStreamsServiceInternalSubscriberCreateRequest> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServiceInternalSubscriberCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an internal subscriber
 *
 * @generated from message Scailo.ClientStreamInternalSubscriber
 */
export class ClientStreamInternalSubscriber extends Message<ClientStreamInternalSubscriber> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this client stream internal subscriber
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the client stream ID
   *
   * @generated from field: uint64 client_stream_id = 10;
   */
  clientStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * Stores the user UUID (determined by the user_id)
   *
   * @generated from field: string user_uuid = 30;
   */
  userUuid = "";

  constructor(data?: PartialMessage<ClientStreamInternalSubscriber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamInternalSubscriber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "client_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamInternalSubscriber {
    return new ClientStreamInternalSubscriber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamInternalSubscriber {
    return new ClientStreamInternalSubscriber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamInternalSubscriber {
    return new ClientStreamInternalSubscriber().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamInternalSubscriber | PlainMessage<ClientStreamInternalSubscriber> | undefined, b: ClientStreamInternalSubscriber | PlainMessage<ClientStreamInternalSubscriber> | undefined): boolean {
    return proto3.util.equals(ClientStreamInternalSubscriber, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of internal subscribers
 *
 * @generated from message Scailo.ClientStreamInternalSubscribersList
 */
export class ClientStreamInternalSubscribersList extends Message<ClientStreamInternalSubscribersList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ClientStreamInternalSubscriber list = 1;
   */
  list: ClientStreamInternalSubscriber[] = [];

  constructor(data?: PartialMessage<ClientStreamInternalSubscribersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamInternalSubscribersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ClientStreamInternalSubscriber, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamInternalSubscribersList {
    return new ClientStreamInternalSubscribersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamInternalSubscribersList {
    return new ClientStreamInternalSubscribersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamInternalSubscribersList {
    return new ClientStreamInternalSubscribersList().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamInternalSubscribersList | PlainMessage<ClientStreamInternalSubscribersList> | undefined, b: ClientStreamInternalSubscribersList | PlainMessage<ClientStreamInternalSubscribersList> | undefined): boolean {
    return proto3.util.equals(ClientStreamInternalSubscribersList, a, b);
  }
}

/**
 *
 * Describes the data model to handle importing of internal subscribers from the given identifier representing a team or a department
 *
 * @generated from message Scailo.ClientStreamsServiceImportInternalSubscribersRequest
 */
export class ClientStreamsServiceImportInternalSubscribersRequest extends Message<ClientStreamsServiceImportInternalSubscribersRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the client stream
   *
   * @generated from field: uint64 client_stream_id = 2;
   */
  clientStreamId = protoInt64.zero;

  /**
   * The ID of the team or the department from which internal subscribers need to be added to the client stream
   *
   * @generated from field: uint64 resource_id = 3;
   */
  resourceId = protoInt64.zero;

  /**
   * Stores if the existing internal subscribers in the client stream need to be deleted before adding from the source record
   *
   * @generated from field: bool delete_existing = 4;
   */
  deleteExisting = false;

  constructor(data?: PartialMessage<ClientStreamsServiceImportInternalSubscribersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServiceImportInternalSubscribersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "resource_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "delete_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServiceImportInternalSubscribersRequest {
    return new ClientStreamsServiceImportInternalSubscribersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServiceImportInternalSubscribersRequest {
    return new ClientStreamsServiceImportInternalSubscribersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServiceImportInternalSubscribersRequest {
    return new ClientStreamsServiceImportInternalSubscribersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServiceImportInternalSubscribersRequest | PlainMessage<ClientStreamsServiceImportInternalSubscribersRequest> | undefined, b: ClientStreamsServiceImportInternalSubscribersRequest | PlainMessage<ClientStreamsServiceImportInternalSubscribersRequest> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServiceImportInternalSubscribersRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a client stream client subscriber
 *
 * @generated from message Scailo.ClientStreamsServiceClientSubscriberCreateRequest
 */
export class ClientStreamsServiceClientSubscriberCreateRequest extends Message<ClientStreamsServiceClientSubscriberCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the client stream ID
   *
   * @generated from field: uint64 client_stream_id = 10;
   */
  clientStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<ClientStreamsServiceClientSubscriberCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamsServiceClientSubscriberCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "client_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamsServiceClientSubscriberCreateRequest {
    return new ClientStreamsServiceClientSubscriberCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamsServiceClientSubscriberCreateRequest {
    return new ClientStreamsServiceClientSubscriberCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamsServiceClientSubscriberCreateRequest {
    return new ClientStreamsServiceClientSubscriberCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamsServiceClientSubscriberCreateRequest | PlainMessage<ClientStreamsServiceClientSubscriberCreateRequest> | undefined, b: ClientStreamsServiceClientSubscriberCreateRequest | PlainMessage<ClientStreamsServiceClientSubscriberCreateRequest> | undefined): boolean {
    return proto3.util.equals(ClientStreamsServiceClientSubscriberCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a client stream client subscriber
 *
 * @generated from message Scailo.ClientStreamClientSubscriber
 */
export class ClientStreamClientSubscriber extends Message<ClientStreamClientSubscriber> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this client stream client subscriber
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the client stream ID
   *
   * @generated from field: uint64 client_stream_id = 10;
   */
  clientStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * Stores the user UUID (determined by the user_id)
   *
   * @generated from field: string user_uuid = 30;
   */
  userUuid = "";

  constructor(data?: PartialMessage<ClientStreamClientSubscriber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamClientSubscriber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "client_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamClientSubscriber {
    return new ClientStreamClientSubscriber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamClientSubscriber {
    return new ClientStreamClientSubscriber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamClientSubscriber {
    return new ClientStreamClientSubscriber().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamClientSubscriber | PlainMessage<ClientStreamClientSubscriber> | undefined, b: ClientStreamClientSubscriber | PlainMessage<ClientStreamClientSubscriber> | undefined): boolean {
    return proto3.util.equals(ClientStreamClientSubscriber, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of client stream client subscribers
 *
 * @generated from message Scailo.ClientStreamClientSubscribersList
 */
export class ClientStreamClientSubscribersList extends Message<ClientStreamClientSubscribersList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ClientStreamClientSubscriber list = 1;
   */
  list: ClientStreamClientSubscriber[] = [];

  constructor(data?: PartialMessage<ClientStreamClientSubscribersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ClientStreamClientSubscribersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ClientStreamClientSubscriber, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamClientSubscribersList {
    return new ClientStreamClientSubscribersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamClientSubscribersList {
    return new ClientStreamClientSubscribersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamClientSubscribersList {
    return new ClientStreamClientSubscribersList().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamClientSubscribersList | PlainMessage<ClientStreamClientSubscribersList> | undefined, b: ClientStreamClientSubscribersList | PlainMessage<ClientStreamClientSubscribersList> | undefined): boolean {
    return proto3.util.equals(ClientStreamClientSubscribersList, a, b);
  }
}

