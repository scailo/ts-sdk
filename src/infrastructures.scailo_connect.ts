// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file infrastructures.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Infrastructure, InfrastructuresList, InfrastructuresServiceCountReq, InfrastructuresServiceCreateRequest, InfrastructuresServiceFilterReq, InfrastructuresServicePaginationReq, InfrastructuresServicePaginationResponse, InfrastructuresServiceSearchAllReq, InfrastructuresServiceSendToStoreRequest, InfrastructuresServiceUpdateRequest } from "./infrastructures.scailo_pb.js";
import { ActiveStatus, CountResponse, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDWithUserComment, InventoryInteractionsList, InventoryPartitionRequest, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each infrastructure
 *
 * @generated from service Scailo.InfrastructuresService
 */
export const InfrastructuresService = {
  typeName: "Scailo.InfrastructuresService",
  methods: {
    /**
     * Create (and Send for QC)
     *
     * @generated from rpc Scailo.InfrastructuresService.Create
     */
    create: {
      name: "Create",
      I: InfrastructuresServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send to Store
     *
     * @generated from rpc Scailo.InfrastructuresService.SendToStore
     */
    sendToStore: {
      name: "SendToStore",
      I: InfrastructuresServiceSendToStoreRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update
     *
     * @generated from rpc Scailo.InfrastructuresService.Update
     */
    update: {
      name: "Update",
      I: InfrastructuresServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for Rework
     *
     * @generated from rpc Scailo.InfrastructuresService.SendForRework
     */
    sendForRework: {
      name: "SendForRework",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for QC
     *
     * @generated from rpc Scailo.InfrastructuresService.SendForQC
     */
    sendForQC: {
      name: "SendForQC",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Split into unit quantities
     *
     * @generated from rpc Scailo.InfrastructuresService.SplitLot
     */
    splitLot: {
      name: "SplitLot",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a partition from the parent lot (and returns the identifier of the new partition)
     *
     * @generated from rpc Scailo.InfrastructuresService.Partition
     */
    partition: {
      name: "Partition",
      I: InventoryPartitionRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Consume
     *
     * @generated from rpc Scailo.InfrastructuresService.Consume
     */
    consume: {
      name: "Consume",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reject
     *
     * @generated from rpc Scailo.InfrastructuresService.Reject
     */
    reject: {
      name: "Reject",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Scrap
     *
     * @generated from rpc Scailo.InfrastructuresService.Scrap
     */
    scrap: {
      name: "Scrap",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Return
     *
     * @generated from rpc Scailo.InfrastructuresService.ReturnMaterial
     */
    returnMaterial: {
      name: "ReturnMaterial",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.InfrastructuresService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.InfrastructuresService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.InfrastructuresService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Infrastructure,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.InfrastructuresService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: Infrastructure,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components by ID (without logs)
     *
     * @generated from rpc Scailo.InfrastructuresService.ViewEssentialByID
     */
    viewEssentialByID: {
      name: "ViewEssentialByID",
      I: Identifier,
      O: Infrastructure,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components (without logs) that matches the given UUID
     *
     * @generated from rpc Scailo.InfrastructuresService.ViewEssentialByUUID
     */
    viewEssentialByUUID: {
      name: "ViewEssentialByUUID",
      I: IdentifierUUID,
      O: Infrastructure,
      kind: MethodKind.Unary,
    },
    /**
     * View all records with the given IDs
     *
     * @generated from rpc Scailo.InfrastructuresService.ViewFromIDs
     */
    viewFromIDs: {
      name: "ViewFromIDs",
      I: IdentifiersList,
      O: InfrastructuresList,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.InfrastructuresService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: InfrastructuresList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.InfrastructuresService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: InfrastructuresServicePaginationReq,
      O: InfrastructuresServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Download QC Report with the given Identifier
     *
     * @generated from rpc Scailo.InfrastructuresService.DownloadQCReportByID
     */
    downloadQCReportByID: {
      name: "DownloadQCReportByID",
      I: Identifier,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download QC Report with the given IdentifierUUID (can be used to allow public downloads)
     *
     * @generated from rpc Scailo.InfrastructuresService.DownloadQCReportByUUID
     */
    downloadQCReportByUUID: {
      name: "DownloadQCReportByUUID",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download Label for the given Identifier
     *
     * @generated from rpc Scailo.InfrastructuresService.DownloadLabelByID
     */
    downloadLabelByID: {
      name: "DownloadLabelByID",
      I: Identifier,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download Label for the given IdentifierUUID (can be used to allow public downloads)
     *
     * @generated from rpc Scailo.InfrastructuresService.DownloadLabelByUUID
     */
    downloadLabelByUUID: {
      name: "DownloadLabelByUUID",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * View all inventory interactions for infrastructure with the given IdentifierUUID
     *
     * @generated from rpc Scailo.InfrastructuresService.ViewInventoryInteractions
     */
    viewInventoryInteractions: {
      name: "ViewInventoryInteractions",
      I: IdentifierUUID,
      O: InventoryInteractionsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.InfrastructuresService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: InfrastructuresServiceSearchAllReq,
      O: InfrastructuresList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.InfrastructuresService.Filter
     */
    filter: {
      name: "Filter",
      I: InfrastructuresServiceFilterReq,
      O: InfrastructuresList,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.InfrastructuresService.Count
     */
    count: {
      name: "Count",
      I: InfrastructuresServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

