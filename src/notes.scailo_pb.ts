// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file notes.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BOOL_FILTER, EmployeeMetadata, SORT_ORDER } from "./base.scailo_pb.js";

/**
 *
 * Describes the lifecycle status of each note
 *
 * @generated from enum Scailo.NOTE_LIFECYCLE
 */
export enum NOTE_LIFECYCLE {
  /**
   * Used only in filters
   *
   * @generated from enum value: NOTE_LIFECYCLE_ANY_UNSPECIFIED = 0;
   */
  NOTE_LIFECYCLE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the note is open
   *
   * @generated from enum value: NOTE_LIFECYCLE_OPEN = 1;
   */
  NOTE_LIFECYCLE_OPEN = 1,

  /**
   * Denotes that the note has completed
   *
   * @generated from enum value: NOTE_LIFECYCLE_COMPLETED = 2;
   */
  NOTE_LIFECYCLE_COMPLETED = 2,

  /**
   * Denotes that the note has been cancelled
   *
   * @generated from enum value: NOTE_LIFECYCLE_CANCELLED = 3;
   */
  NOTE_LIFECYCLE_CANCELLED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(NOTE_LIFECYCLE)
proto3.util.setEnumType(NOTE_LIFECYCLE, "Scailo.NOTE_LIFECYCLE", [
  { no: 0, name: "NOTE_LIFECYCLE_ANY_UNSPECIFIED" },
  { no: 1, name: "NOTE_LIFECYCLE_OPEN" },
  { no: 2, name: "NOTE_LIFECYCLE_COMPLETED" },
  { no: 3, name: "NOTE_LIFECYCLE_CANCELLED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.NOTE_SORT_KEY
 */
export enum NOTE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: NOTE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  NOTE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: NOTE_SORT_KEY_CREATED_AT = 1;
   */
  NOTE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: NOTE_SORT_KEY_MODIFIED_AT = 2;
   */
  NOTE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: NOTE_SORT_KEY_COMPLETED_ON = 6;
   */
  NOTE_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the title
   *
   * @generated from enum value: NOTE_SORT_KEY_TITLE = 10;
   */
  NOTE_SORT_KEY_TITLE = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(NOTE_SORT_KEY)
proto3.util.setEnumType(NOTE_SORT_KEY, "Scailo.NOTE_SORT_KEY", [
  { no: 0, name: "NOTE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "NOTE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "NOTE_SORT_KEY_MODIFIED_AT" },
  { no: 6, name: "NOTE_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "NOTE_SORT_KEY_TITLE" },
]);

/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being an note lifecycle status
 *
 * @generated from message Scailo.LogbookLogNoteLC
 */
export class LogbookLogNoteLC extends Message<LogbookLogNoteLC> {
  /**
   * ID of the resource
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Stores if the resource is active
   *
   * @generated from field: bool is_active = 2;
   */
  isActive = false;

  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: uint64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: string ref_uuid = 10;
   */
  refUuid = "";

  /**
   * The operation that was performed
   *
   * @generated from field: Scailo.NOTE_LIFECYCLE operation = 11;
   */
  operation = NOTE_LIFECYCLE.NOTE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The name of the person who made this entry
   *
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * The ID of the user who made this entry
   *
   * @generated from field: uint64 user_id = 14;
   */
  userId = protoInt64.zero;

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 15;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 16;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogNoteLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LogbookLogNoteLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(NOTE_LIFECYCLE) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogNoteLC {
    return new LogbookLogNoteLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogNoteLC {
    return new LogbookLogNoteLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogNoteLC {
    return new LogbookLogNoteLC().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogNoteLC | PlainMessage<LogbookLogNoteLC> | undefined, b: LogbookLogNoteLC | PlainMessage<LogbookLogNoteLC> | undefined): boolean {
    return proto3.util.equals(LogbookLogNoteLC, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.NotesServiceCreateRequest
 */
export class NotesServiceCreateRequest extends Message<NotesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 8;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 9;
   */
  projectId = protoInt64.zero;

  /**
   * The title of the note
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The description of the note
   *
   * @generated from field: string description = 11;
   */
  description = "";

  /**
   * The associated employee ID
   *
   * @generated from field: uint64 employee_id = 20;
   */
  employeeId = protoInt64.zero;

  /**
   * The associated activity ID
   *
   * @generated from field: uint64 activity_id = 21;
   */
  activityId = protoInt64.zero;

  /**
   * The associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 22;
   */
  activityStatusId = protoInt64.zero;

  constructor(data?: PartialMessage<NotesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.NotesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceCreateRequest {
    return new NotesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceCreateRequest {
    return new NotesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceCreateRequest {
    return new NotesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NotesServiceCreateRequest | PlainMessage<NotesServiceCreateRequest> | undefined, b: NotesServiceCreateRequest | PlainMessage<NotesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(NotesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.NotesServiceUpdateRequest
 */
export class NotesServiceUpdateRequest extends Message<NotesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 8;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 9;
   */
  projectId = protoInt64.zero;

  /**
   * The title of the note
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The description of the note
   *
   * @generated from field: string description = 11;
   */
  description = "";

  /**
   * The associated activity ID
   *
   * @generated from field: uint64 activity_id = 21;
   */
  activityId = protoInt64.zero;

  /**
   * The associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 22;
   */
  activityStatusId = protoInt64.zero;

  constructor(data?: PartialMessage<NotesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.NotesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceUpdateRequest {
    return new NotesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceUpdateRequest {
    return new NotesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceUpdateRequest {
    return new NotesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NotesServiceUpdateRequest | PlainMessage<NotesServiceUpdateRequest> | undefined, b: NotesServiceUpdateRequest | PlainMessage<NotesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(NotesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.Note
 */
export class Note extends Message<Note> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this note
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The status of this note
   *
   * @generated from field: Scailo.NOTE_LIFECYCLE status = 4;
   */
  status = NOTE_LIFECYCLE.NOTE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this note
   *
   * @generated from field: repeated Scailo.LogbookLogNoteLC logs = 5;
   */
  logs: LogbookLogNoteLC[] = [];

  /**
   * The timestamp of when this note was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 8;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 9;
   */
  projectId = protoInt64.zero;

  /**
   * The title of the note
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The description of the note
   *
   * @generated from field: string description = 11;
   */
  description = "";

  /**
   * The associated employee ID
   *
   * @generated from field: uint64 employee_id = 20;
   */
  employeeId = protoInt64.zero;

  /**
   * The associated activity ID
   *
   * @generated from field: uint64 activity_id = 21;
   */
  activityId = protoInt64.zero;

  /**
   * The associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 22;
   */
  activityStatusId = protoInt64.zero;

  constructor(data?: PartialMessage<Note>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.Note";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(NOTE_LIFECYCLE) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogNoteLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Note {
    return new Note().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Note {
    return new Note().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Note {
    return new Note().fromJsonString(jsonString, options);
  }

  static equals(a: Note | PlainMessage<Note> | undefined, b: Note | PlainMessage<Note> | undefined): boolean {
    return proto3.util.equals(Note, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.NotesList
 */
export class NotesList extends Message<NotesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.Note list = 1;
   */
  list: Note[] = [];

  constructor(data?: PartialMessage<NotesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.NotesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Note, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesList {
    return new NotesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesList {
    return new NotesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesList {
    return new NotesList().fromJsonString(jsonString, options);
  }

  static equals(a: NotesList | PlainMessage<NotesList> | undefined, b: NotesList | PlainMessage<NotesList> | undefined): boolean {
    return proto3.util.equals(NotesList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.NotesServicePaginationReq
 */
export class NotesServicePaginationReq extends Message<NotesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.NOTE_SORT_KEY sort_key = 5;
   */
  sortKey = NOTE_SORT_KEY.NOTE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this note
   *
   * @generated from field: Scailo.NOTE_LIFECYCLE status = 6;
   */
  status = NOTE_LIFECYCLE.NOTE_LIFECYCLE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<NotesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.NotesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(NOTE_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(NOTE_LIFECYCLE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServicePaginationReq {
    return new NotesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServicePaginationReq {
    return new NotesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServicePaginationReq {
    return new NotesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: NotesServicePaginationReq | PlainMessage<NotesServicePaginationReq> | undefined, b: NotesServicePaginationReq | PlainMessage<NotesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(NotesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.NotesServicePaginationResponse
 */
export class NotesServicePaginationResponse extends Message<NotesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.Note payload = 4;
   */
  payload: Note[] = [];

  constructor(data?: PartialMessage<NotesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.NotesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: Note, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServicePaginationResponse {
    return new NotesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServicePaginationResponse {
    return new NotesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServicePaginationResponse {
    return new NotesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NotesServicePaginationResponse | PlainMessage<NotesServicePaginationResponse> | undefined, b: NotesServicePaginationResponse | PlainMessage<NotesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(NotesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.NotesServiceFilterReq
 */
export class NotesServiceFilterReq extends Message<NotesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.NOTE_SORT_KEY sort_key = 5;
   */
  sortKey = NOTE_SORT_KEY.NOTE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this note
   *
   * @generated from field: Scailo.NOTE_LIFECYCLE status = 10;
   */
  status = NOTE_LIFECYCLE.NOTE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The title of the note
   *
   * @generated from field: string title = 20;
   */
  title = "";

  /**
   * The ID of the associated project
   *
   * @generated from field: uint64 project_id = 25;
   */
  projectId = protoInt64.zero;

  /**
   * The ID of the employee
   *
   * @generated from field: uint64 employee_id = 26;
   */
  employeeId = protoInt64.zero;

  /**
   * Filter by the associated activity ID
   *
   * @generated from field: uint64 activity_id = 27;
   */
  activityId = protoInt64.zero;

  /**
   * Filter by the associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 28;
   */
  activityStatusId = protoInt64.zero;

  constructor(data?: PartialMessage<NotesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.NotesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(NOTE_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(NOTE_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceFilterReq {
    return new NotesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceFilterReq {
    return new NotesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceFilterReq {
    return new NotesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: NotesServiceFilterReq | PlainMessage<NotesServiceFilterReq> | undefined, b: NotesServiceFilterReq | PlainMessage<NotesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(NotesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.NotesServiceCountReq
 */
export class NotesServiceCountReq extends Message<NotesServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this note
   *
   * @generated from field: Scailo.NOTE_LIFECYCLE status = 10;
   */
  status = NOTE_LIFECYCLE.NOTE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The title of the note
   *
   * @generated from field: string title = 20;
   */
  title = "";

  /**
   * The ID of the associated project
   *
   * @generated from field: uint64 project_id = 25;
   */
  projectId = protoInt64.zero;

  /**
   * The ID of the employee
   *
   * @generated from field: uint64 employee_id = 26;
   */
  employeeId = protoInt64.zero;

  /**
   * Filter by the associated activity ID
   *
   * @generated from field: uint64 activity_id = 27;
   */
  activityId = protoInt64.zero;

  /**
   * Filter by the associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 28;
   */
  activityStatusId = protoInt64.zero;

  constructor(data?: PartialMessage<NotesServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.NotesServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(NOTE_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceCountReq {
    return new NotesServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceCountReq {
    return new NotesServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceCountReq {
    return new NotesServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: NotesServiceCountReq | PlainMessage<NotesServiceCountReq> | undefined, b: NotesServiceCountReq | PlainMessage<NotesServiceCountReq> | undefined): boolean {
    return proto3.util.equals(NotesServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.NotesServiceSearchAllReq
 */
export class NotesServiceSearchAllReq extends Message<NotesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.NOTE_SORT_KEY sort_key = 5;
   */
  sortKey = NOTE_SORT_KEY.NOTE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.NOTE_LIFECYCLE status = 10;
   */
  status = NOTE_LIFECYCLE.NOTE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The ID of the associated project
   *
   * @generated from field: uint64 project_id = 25;
   */
  projectId = protoInt64.zero;

  /**
   * The ID of the employee
   *
   * @generated from field: uint64 employee_id = 26;
   */
  employeeId = protoInt64.zero;

  /**
   * Filter by the associated activity ID
   *
   * @generated from field: uint64 activity_id = 27;
   */
  activityId = protoInt64.zero;

  /**
   * Filter by the associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 28;
   */
  activityStatusId = protoInt64.zero;

  constructor(data?: PartialMessage<NotesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.NotesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(NOTE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(NOTE_LIFECYCLE) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotesServiceSearchAllReq {
    return new NotesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotesServiceSearchAllReq {
    return new NotesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotesServiceSearchAllReq {
    return new NotesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: NotesServiceSearchAllReq | PlainMessage<NotesServiceSearchAllReq> | undefined, b: NotesServiceSearchAllReq | PlainMessage<NotesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(NotesServiceSearchAllReq, a, b);
  }
}

