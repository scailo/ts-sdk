// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file qc_hubs.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.QC_HUB_SORT_KEY
 */
export enum QC_HUB_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: QC_HUB_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  QC_HUB_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: QC_HUB_SORT_KEY_CREATED_AT = 1;
   */
  QC_HUB_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: QC_HUB_SORT_KEY_MODIFIED_AT = 2;
   */
  QC_HUB_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: QC_HUB_SORT_KEY_APPROVED_ON = 3;
   */
  QC_HUB_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: QC_HUB_SORT_KEY_APPROVED_BY = 4;
   */
  QC_HUB_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: QC_HUB_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  QC_HUB_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the name
   *
   * @generated from enum value: QC_HUB_SORT_KEY_NAME = 10;
   */
  QC_HUB_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by the code
   *
   * @generated from enum value: QC_HUB_SORT_KEY_CODE = 11;
   */
  QC_HUB_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(QC_HUB_SORT_KEY)
proto3.util.setEnumType(QC_HUB_SORT_KEY, "Scailo.QC_HUB_SORT_KEY", [
  { no: 0, name: "QC_HUB_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "QC_HUB_SORT_KEY_CREATED_AT" },
  { no: 2, name: "QC_HUB_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "QC_HUB_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "QC_HUB_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "QC_HUB_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "QC_HUB_SORT_KEY_NAME" },
  { no: 11, name: "QC_HUB_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.QCHubsServiceCreateRequest
 */
export class QCHubsServiceCreateRequest extends Message<QCHubsServiceCreateRequest> {
  /**
   * QCHubs a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * QCHubs any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The ID of the associated location
   *
   * @generated from field: uint64 location_id = 9;
   */
  locationId = protoInt64.zero;

  /**
   * The name of the qc hub
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The unique code by which the qc hub is classified
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The description of the qc hub
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The username of the incharge
   *
   * @generated from field: string incharge_username = 13;
   */
  inchargeUsername = "";

  /**
   * The contact number of the qc hub
   *
   * @generated from field: string phone = 14;
   */
  phone = "";

  constructor(data?: PartialMessage<QCHubsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCHubsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "incharge_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCHubsServiceCreateRequest {
    return new QCHubsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCHubsServiceCreateRequest {
    return new QCHubsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCHubsServiceCreateRequest {
    return new QCHubsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCHubsServiceCreateRequest | PlainMessage<QCHubsServiceCreateRequest> | undefined, b: QCHubsServiceCreateRequest | PlainMessage<QCHubsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(QCHubsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.QCHubsServiceUpdateRequest
 */
export class QCHubsServiceUpdateRequest extends Message<QCHubsServiceUpdateRequest> {
  /**
   * QCHubs any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that qc hubs if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The name of the qc hub
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The unique code by which the qc hub is classified
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The description of the qc hub
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The username of the incharge
   *
   * @generated from field: string incharge_username = 13;
   */
  inchargeUsername = "";

  /**
   * The contact number of the qc hub
   *
   * @generated from field: string phone = 14;
   */
  phone = "";

  constructor(data?: PartialMessage<QCHubsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCHubsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "incharge_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCHubsServiceUpdateRequest {
    return new QCHubsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCHubsServiceUpdateRequest {
    return new QCHubsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCHubsServiceUpdateRequest {
    return new QCHubsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCHubsServiceUpdateRequest | PlainMessage<QCHubsServiceUpdateRequest> | undefined, b: QCHubsServiceUpdateRequest | PlainMessage<QCHubsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(QCHubsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.QCHub
 */
export class QCHub extends Message<QCHub> {
  /**
   * QCHubs a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * QCHubs the metadata of this qc hub
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * QCHubs the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this qc hub
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * QCHubs the logs of every operation performed on this qc hub
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The ID of the associated location
   *
   * @generated from field: uint64 location_id = 9;
   */
  locationId = protoInt64.zero;

  /**
   * The name of the qc hub
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The unique code by which the qc hub is classified
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The description of the qc hub
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The username of the incharge
   *
   * @generated from field: string incharge_username = 13;
   */
  inchargeUsername = "";

  /**
   * The contact number of the qc hub
   *
   * @generated from field: string phone = 14;
   */
  phone = "";

  constructor(data?: PartialMessage<QCHub>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCHub";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 9, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "incharge_username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCHub {
    return new QCHub().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCHub {
    return new QCHub().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCHub {
    return new QCHub().fromJsonString(jsonString, options);
  }

  static equals(a: QCHub | PlainMessage<QCHub> | undefined, b: QCHub | PlainMessage<QCHub> | undefined): boolean {
    return proto3.util.equals(QCHub, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.QCHubsList
 */
export class QCHubsList extends Message<QCHubsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.QCHub list = 1;
   */
  list: QCHub[] = [];

  constructor(data?: PartialMessage<QCHubsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCHubsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: QCHub, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCHubsList {
    return new QCHubsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCHubsList {
    return new QCHubsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCHubsList {
    return new QCHubsList().fromJsonString(jsonString, options);
  }

  static equals(a: QCHubsList | PlainMessage<QCHubsList> | undefined, b: QCHubsList | PlainMessage<QCHubsList> | undefined): boolean {
    return proto3.util.equals(QCHubsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.QCHubsServicePaginationReq
 */
export class QCHubsServicePaginationReq extends Message<QCHubsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_HUB_SORT_KEY sort_key = 5;
   */
  sortKey = QC_HUB_SORT_KEY.QC_HUB_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this qc hub
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<QCHubsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCHubsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_HUB_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCHubsServicePaginationReq {
    return new QCHubsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCHubsServicePaginationReq {
    return new QCHubsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCHubsServicePaginationReq {
    return new QCHubsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCHubsServicePaginationReq | PlainMessage<QCHubsServicePaginationReq> | undefined, b: QCHubsServicePaginationReq | PlainMessage<QCHubsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(QCHubsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.QCHubsServicePaginationResponse
 */
export class QCHubsServicePaginationResponse extends Message<QCHubsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.QCHub payload = 4;
   */
  payload: QCHub[] = [];

  constructor(data?: PartialMessage<QCHubsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCHubsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: QCHub, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCHubsServicePaginationResponse {
    return new QCHubsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCHubsServicePaginationResponse {
    return new QCHubsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCHubsServicePaginationResponse {
    return new QCHubsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QCHubsServicePaginationResponse | PlainMessage<QCHubsServicePaginationResponse> | undefined, b: QCHubsServicePaginationResponse | PlainMessage<QCHubsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(QCHubsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.QCHubsServiceFilterReq
 */
export class QCHubsServiceFilterReq extends Message<QCHubsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_HUB_SORT_KEY sort_key = 5;
   */
  sortKey = QC_HUB_SORT_KEY.QC_HUB_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this qc hub
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The name of the qc hub
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The unique code by which the qc hub is classified
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The ID of the associated location
   *
   * @generated from field: uint64 location_id = 22;
   */
  locationId = protoInt64.zero;

  constructor(data?: PartialMessage<QCHubsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCHubsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_HUB_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCHubsServiceFilterReq {
    return new QCHubsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCHubsServiceFilterReq {
    return new QCHubsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCHubsServiceFilterReq {
    return new QCHubsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCHubsServiceFilterReq | PlainMessage<QCHubsServiceFilterReq> | undefined, b: QCHubsServiceFilterReq | PlainMessage<QCHubsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(QCHubsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.QCHubsServiceCountReq
 */
export class QCHubsServiceCountReq extends Message<QCHubsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this qc hub
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The name of the qc hub
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The unique code by which the qc hub is classified
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The ID of the associated location
   *
   * @generated from field: uint64 location_id = 22;
   */
  locationId = protoInt64.zero;

  constructor(data?: PartialMessage<QCHubsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCHubsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCHubsServiceCountReq {
    return new QCHubsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCHubsServiceCountReq {
    return new QCHubsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCHubsServiceCountReq {
    return new QCHubsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCHubsServiceCountReq | PlainMessage<QCHubsServiceCountReq> | undefined, b: QCHubsServiceCountReq | PlainMessage<QCHubsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(QCHubsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.QCHubsServiceSearchAllReq
 */
export class QCHubsServiceSearchAllReq extends Message<QCHubsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_HUB_SORT_KEY sort_key = 5;
   */
  sortKey = QC_HUB_SORT_KEY.QC_HUB_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The ID of the associated location
   *
   * @generated from field: uint64 location_id = 12;
   */
  locationId = protoInt64.zero;

  constructor(data?: PartialMessage<QCHubsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCHubsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_HUB_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCHubsServiceSearchAllReq {
    return new QCHubsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCHubsServiceSearchAllReq {
    return new QCHubsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCHubsServiceSearchAllReq {
    return new QCHubsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCHubsServiceSearchAllReq | PlainMessage<QCHubsServiceSearchAllReq> | undefined, b: QCHubsServiceSearchAllReq | PlainMessage<QCHubsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(QCHubsServiceSearchAllReq, a, b);
  }
}

