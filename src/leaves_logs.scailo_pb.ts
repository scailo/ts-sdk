// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file leaves_logs.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BOOL_FILTER, EmployeeMetadata, SORT_ORDER } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.LEAVE_LOG_SORT_KEY
 */
export enum LEAVE_LOG_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: LEAVE_LOG_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  LEAVE_LOG_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: LEAVE_LOG_SORT_KEY_CREATED_AT = 1;
   */
  LEAVE_LOG_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: LEAVE_LOG_SORT_KEY_MODIFIED_AT = 2;
   */
  LEAVE_LOG_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the user ID
   *
   * @generated from enum value: LEAVE_LOG_SORT_KEY_USER_ID = 10;
   */
  LEAVE_LOG_SORT_KEY_USER_ID = 10,

  /**
   * Fetch ordered results by the uom ID
   *
   * @generated from enum value: LEAVE_LOG_SORT_KEY_UOM_ID = 11;
   */
  LEAVE_LOG_SORT_KEY_UOM_ID = 11,

  /**
   * Fetch ordered results by the leave type ID
   *
   * @generated from enum value: LEAVE_LOG_SORT_KEY_LEAVE_TYPE_ID = 12;
   */
  LEAVE_LOG_SORT_KEY_LEAVE_TYPE_ID = 12,

  /**
   * Fetch ordered results by the quantity
   *
   * @generated from enum value: LEAVE_LOG_SORT_KEY_QUANTITY = 13;
   */
  LEAVE_LOG_SORT_KEY_QUANTITY = 13,

  /**
   * Fetch ordered results by the reference from attribute
   *
   * @generated from enum value: LEAVE_LOG_SORT_KEY_REF_FROM = 14;
   */
  LEAVE_LOG_SORT_KEY_REF_FROM = 14,
}
// Retrieve enum metadata with: proto3.getEnumType(LEAVE_LOG_SORT_KEY)
proto3.util.setEnumType(LEAVE_LOG_SORT_KEY, "Scailo.LEAVE_LOG_SORT_KEY", [
  { no: 0, name: "LEAVE_LOG_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "LEAVE_LOG_SORT_KEY_CREATED_AT" },
  { no: 2, name: "LEAVE_LOG_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "LEAVE_LOG_SORT_KEY_USER_ID" },
  { no: 11, name: "LEAVE_LOG_SORT_KEY_UOM_ID" },
  { no: 12, name: "LEAVE_LOG_SORT_KEY_LEAVE_TYPE_ID" },
  { no: 13, name: "LEAVE_LOG_SORT_KEY_QUANTITY" },
  { no: 14, name: "LEAVE_LOG_SORT_KEY_REF_FROM" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.LeavesLogsServiceCreateRequest
 */
export class LeavesLogsServiceCreateRequest extends Message<LeavesLogsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * The ID of the user for whom this log needs to be made
   *
   * @generated from field: uint64 user_id = 10;
   */
  userId = protoInt64.zero;

  /**
   * The ID of the uom
   *
   * @generated from field: uint64 uom_id = 11;
   */
  uomId = protoInt64.zero;

  /**
   * The reference on the basis of which this record is created
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The corresponding reference ID
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The leave type ID
   *
   * @generated from field: uint64 leave_type_id = 14;
   */
  leaveTypeId = protoInt64.zero;

  /**
   * The quantity of leaves (in cents)
   *
   * @generated from field: uint64 quantity = 15;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<LeavesLogsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesLogsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesLogsServiceCreateRequest {
    return new LeavesLogsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesLogsServiceCreateRequest {
    return new LeavesLogsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesLogsServiceCreateRequest {
    return new LeavesLogsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesLogsServiceCreateRequest | PlainMessage<LeavesLogsServiceCreateRequest> | undefined, b: LeavesLogsServiceCreateRequest | PlainMessage<LeavesLogsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(LeavesLogsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.LeaveLog
 */
export class LeaveLog extends Message<LeaveLog> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this record
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The ID of the user for whom this log needs to be made
   *
   * @generated from field: uint64 user_id = 10;
   */
  userId = protoInt64.zero;

  /**
   * The ID of the uom
   *
   * @generated from field: uint64 uom_id = 11;
   */
  uomId = protoInt64.zero;

  /**
   * The reference on the basis of which this record is created
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The corresponding reference ID
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The leave type ID
   *
   * @generated from field: uint64 leave_type_id = 14;
   */
  leaveTypeId = protoInt64.zero;

  /**
   * The quantity of leaves (in cents)
   *
   * @generated from field: uint64 quantity = 15;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<LeaveLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeaveLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 10, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveLog {
    return new LeaveLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveLog {
    return new LeaveLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveLog {
    return new LeaveLog().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveLog | PlainMessage<LeaveLog> | undefined, b: LeaveLog | PlainMessage<LeaveLog> | undefined): boolean {
    return proto3.util.equals(LeaveLog, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to fetch the number of leaves available for an employee
 *
 * @generated from message Scailo.LeavesLogsCountEmployeeLeavesRequest
 */
export class LeavesLogsCountEmployeeLeavesRequest extends Message<LeavesLogsCountEmployeeLeavesRequest> {
  /**
   * The ID of the user for whom this log needs to be made
   *
   * @generated from field: uint64 user_id = 10;
   */
  userId = protoInt64.zero;

  /**
   * The leave type ID
   *
   * @generated from field: uint64 leave_type_id = 14;
   */
  leaveTypeId = protoInt64.zero;

  constructor(data?: PartialMessage<LeavesLogsCountEmployeeLeavesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesLogsCountEmployeeLeavesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesLogsCountEmployeeLeavesRequest {
    return new LeavesLogsCountEmployeeLeavesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesLogsCountEmployeeLeavesRequest {
    return new LeavesLogsCountEmployeeLeavesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesLogsCountEmployeeLeavesRequest {
    return new LeavesLogsCountEmployeeLeavesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesLogsCountEmployeeLeavesRequest | PlainMessage<LeavesLogsCountEmployeeLeavesRequest> | undefined, b: LeavesLogsCountEmployeeLeavesRequest | PlainMessage<LeavesLogsCountEmployeeLeavesRequest> | undefined): boolean {
    return proto3.util.equals(LeavesLogsCountEmployeeLeavesRequest, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.LeavesLogsList
 */
export class LeavesLogsList extends Message<LeavesLogsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.LeaveLog list = 1;
   */
  list: LeaveLog[] = [];

  constructor(data?: PartialMessage<LeavesLogsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesLogsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: LeaveLog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesLogsList {
    return new LeavesLogsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesLogsList {
    return new LeavesLogsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesLogsList {
    return new LeavesLogsList().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesLogsList | PlainMessage<LeavesLogsList> | undefined, b: LeavesLogsList | PlainMessage<LeavesLogsList> | undefined): boolean {
    return proto3.util.equals(LeavesLogsList, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.LeavesLogsServiceFilterReq
 */
export class LeavesLogsServiceFilterReq extends Message<LeavesLogsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.LEAVE_LOG_SORT_KEY sort_key = 5;
   */
  sortKey = LEAVE_LOG_SORT_KEY.LEAVE_LOG_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The ID of the user for whom this log needs to be made
   *
   * @generated from field: uint64 user_id = 10;
   */
  userId = protoInt64.zero;

  /**
   * The ID of the uom
   *
   * @generated from field: uint64 uom_id = 11;
   */
  uomId = protoInt64.zero;

  /**
   * The reference on the basis of which this record is created
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The corresponding reference ID
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The leave type ID
   *
   * @generated from field: uint64 leave_type_id = 14;
   */
  leaveTypeId = protoInt64.zero;

  /**
   * The minimum quantity of leaves (in cents)
   *
   * @generated from field: uint64 quantity_min = 15;
   */
  quantityMin = protoInt64.zero;

  /**
   * The maximum quantity of leaves (in cents)
   *
   * @generated from field: uint64 quantity_max = 16;
   */
  quantityMax = protoInt64.zero;

  constructor(data?: PartialMessage<LeavesLogsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesLogsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(LEAVE_LOG_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "quantity_min", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "quantity_max", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesLogsServiceFilterReq {
    return new LeavesLogsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesLogsServiceFilterReq {
    return new LeavesLogsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesLogsServiceFilterReq {
    return new LeavesLogsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesLogsServiceFilterReq | PlainMessage<LeavesLogsServiceFilterReq> | undefined, b: LeavesLogsServiceFilterReq | PlainMessage<LeavesLogsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(LeavesLogsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.LeavesLogsServiceCountReq
 */
export class LeavesLogsServiceCountReq extends Message<LeavesLogsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The ID of the user for whom this log needs to be made
   *
   * @generated from field: uint64 user_id = 10;
   */
  userId = protoInt64.zero;

  /**
   * The ID of the uom
   *
   * @generated from field: uint64 uom_id = 11;
   */
  uomId = protoInt64.zero;

  /**
   * The reference on the basis of which this record is created
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The corresponding reference ID
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The leave type ID
   *
   * @generated from field: uint64 leave_type_id = 14;
   */
  leaveTypeId = protoInt64.zero;

  /**
   * The minimum quantity of leaves (in cents)
   *
   * @generated from field: uint64 quantity_min = 15;
   */
  quantityMin = protoInt64.zero;

  /**
   * The maximum quantity of leaves (in cents)
   *
   * @generated from field: uint64 quantity_max = 16;
   */
  quantityMax = protoInt64.zero;

  constructor(data?: PartialMessage<LeavesLogsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LeavesLogsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "leave_type_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "quantity_min", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "quantity_max", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeavesLogsServiceCountReq {
    return new LeavesLogsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeavesLogsServiceCountReq {
    return new LeavesLogsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeavesLogsServiceCountReq {
    return new LeavesLogsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: LeavesLogsServiceCountReq | PlainMessage<LeavesLogsServiceCountReq> | undefined, b: LeavesLogsServiceCountReq | PlainMessage<LeavesLogsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(LeavesLogsServiceCountReq, a, b);
  }
}

