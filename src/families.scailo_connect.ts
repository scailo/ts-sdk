// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file families.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { FamiliesList, FamiliesServiceCountReq, FamiliesServiceCreateRequest, FamiliesServiceFilterReq, FamiliesServicePaginationReq, FamiliesServicePaginationResponse, FamiliesServiceQCGroupCreateRequest, FamiliesServiceSearchAllReq, FamiliesServiceStorageCreateRequest, FamiliesServiceUnitConversionCreateRequest, FamiliesServiceUnitConversionPresenceRequest, FamiliesServiceUpdateRequest, Family, FamilyQCGroup, FamilyQCGroupsList, FamilyStorage, FamilyStoragesList, FamilyTypesList, FamilyUnitConversion, FamilyUnitConversionsList } from "./families.scailo_pb.js";
import { ActiveStatus, AmendmentLogsList, CountInSLCStatusRequest, CountResponse, Identifier, IdentifiersList, IdentifierUUID, IdentifierWithFile, IdentifierWithUserComment, SimpleSearchReq, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each family
 *
 * @generated from service Scailo.FamiliesService
 */
export const FamiliesService = {
  typeName: "Scailo.FamiliesService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.FamiliesService.Create
     */
    create: {
      name: "Create",
      I: FamiliesServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.FamiliesService.Draft
     */
    draft: {
      name: "Draft",
      I: FamiliesServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.FamiliesService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: FamiliesServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.FamiliesService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.FamiliesService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.FamiliesService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.FamiliesService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.FamiliesService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: FamiliesServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.FamiliesService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.FamiliesService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.FamiliesService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (Identifier) returns (Identifier);
     *
     * @generated from rpc Scailo.FamiliesService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Amend the family and send for revision
     *
     * @generated from rpc Scailo.FamiliesService.Amend
     */
    amend: {
      name: "Amend",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that could be used to upload items from the filled CSV file. The same file can also be used as a template when there are no existing records
     *
     * @generated from rpc Scailo.FamiliesService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: Identifier,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Upload items using a CSV file (duplicate codes will be skipped)
     *
     * @generated from rpc Scailo.FamiliesService.UploadFamilies
     */
    uploadFamilies: {
      name: "UploadFamilies",
      I: IdentifierWithFile,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * Add a storage
     *
     * @generated from rpc Scailo.FamiliesService.AddStorage
     */
    addStorage: {
      name: "AddStorage",
      I: FamiliesServiceStorageCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve a storage
     *
     * @generated from rpc Scailo.FamiliesService.ApproveStorage
     */
    approveStorage: {
      name: "ApproveStorage",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a storage
     *
     * @generated from rpc Scailo.FamiliesService.DeleteStorage
     */
    deleteStorage: {
      name: "DeleteStorage",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View a storage for the given ID
     *
     * @generated from rpc Scailo.FamiliesService.ViewStorageByID
     */
    viewStorageByID: {
      name: "ViewStorageByID",
      I: Identifier,
      O: FamilyStorage,
      kind: MethodKind.Unary,
    },
    /**
     * View all storages for given family ID
     *
     * @generated from rpc Scailo.FamiliesService.ViewStorages
     */
    viewStorages: {
      name: "ViewStorages",
      I: Identifier,
      O: FamilyStoragesList,
      kind: MethodKind.Unary,
    },
    /**
     * Add a unit conversion
     *
     * @generated from rpc Scailo.FamiliesService.AddUnitConversion
     */
    addUnitConversion: {
      name: "AddUnitConversion",
      I: FamiliesServiceUnitConversionCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve a unit conversion
     *
     * @generated from rpc Scailo.FamiliesService.ApproveUnitConversion
     */
    approveUnitConversion: {
      name: "ApproveUnitConversion",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a unit conversion
     *
     * @generated from rpc Scailo.FamiliesService.DeleteUnitConversion
     */
    deleteUnitConversion: {
      name: "DeleteUnitConversion",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View a unit conversion for the given ID
     *
     * @generated from rpc Scailo.FamiliesService.ViewUnitConversionByID
     */
    viewUnitConversionByID: {
      name: "ViewUnitConversionByID",
      I: Identifier,
      O: FamilyUnitConversion,
      kind: MethodKind.Unary,
    },
    /**
     * View all unit conversions for given family ID
     *
     * @generated from rpc Scailo.FamiliesService.ViewUnitConversions
     */
    viewUnitConversions: {
      name: "ViewUnitConversions",
      I: Identifier,
      O: FamilyUnitConversionsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the unit conversion for the given family ID and the given uom ID
     *
     * @generated from rpc Scailo.FamiliesService.ViewUnitConversionFor
     */
    viewUnitConversionFor: {
      name: "ViewUnitConversionFor",
      I: FamiliesServiceUnitConversionPresenceRequest,
      O: FamilyUnitConversion,
      kind: MethodKind.Unary,
    },
    /**
     * Add a qc group
     *
     * @generated from rpc Scailo.FamiliesService.AddQCGroup
     */
    addQCGroup: {
      name: "AddQCGroup",
      I: FamiliesServiceQCGroupCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve a qc group
     *
     * @generated from rpc Scailo.FamiliesService.ApproveQCGroup
     */
    approveQCGroup: {
      name: "ApproveQCGroup",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a qc group
     *
     * @generated from rpc Scailo.FamiliesService.DeleteQCGroup
     */
    deleteQCGroup: {
      name: "DeleteQCGroup",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View a qc group for the given ID
     *
     * @generated from rpc Scailo.FamiliesService.ViewQCGroupByID
     */
    viewQCGroupByID: {
      name: "ViewQCGroupByID",
      I: Identifier,
      O: FamilyQCGroup,
      kind: MethodKind.Unary,
    },
    /**
     * View all qc groups for given family ID
     *
     * @generated from rpc Scailo.FamiliesService.ViewQCGroups
     */
    viewQCGroups: {
      name: "ViewQCGroups",
      I: Identifier,
      O: FamilyQCGroupsList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.FamiliesService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Family,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components of the family (without logs)
     *
     * @generated from rpc Scailo.FamiliesService.ViewEssentialByID
     */
    viewEssentialByID: {
      name: "ViewEssentialByID",
      I: Identifier,
      O: Family,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components of the family (without logs) that matches the given code
     *
     * @generated from rpc Scailo.FamiliesService.ViewEssentialByCode
     */
    viewEssentialByCode: {
      name: "ViewEssentialByCode",
      I: SimpleSearchReq,
      O: Family,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.FamiliesService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.FamiliesService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.FamiliesService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: FamiliesServicePaginationReq,
      O: FamiliesServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all families with the given IDs
     *
     * @generated from rpc Scailo.FamiliesService.ViewFromIDs
     */
    viewFromIDs: {
      name: "ViewFromIDs",
      I: IdentifiersList,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all families with required quantity greater than 0 from the given family types
     *
     * @generated from rpc Scailo.FamiliesService.ViewAllRequirable
     */
    viewAllRequirable: {
      name: "ViewAllRequirable",
      I: FamilyTypesList,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all the amendments made
     *
     * @generated from rpc Scailo.FamiliesService.ViewAmendments
     */
    viewAmendments: {
      name: "ViewAmendments",
      I: Identifier,
      O: AmendmentLogsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.FamiliesService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: FamiliesServiceSearchAllReq,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.FamiliesService.Filter
     */
    filter: {
      name: "Filter",
      I: FamiliesServiceFilterReq,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all families for purchase that match the given search key
     *
     * @generated from rpc Scailo.FamiliesService.SearchForPurchase
     */
    searchForPurchase: {
      name: "SearchForPurchase",
      I: SimpleSearchReq,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all families for sale that match the given search key
     *
     * @generated from rpc Scailo.FamiliesService.SearchForSale
     */
    searchForSale: {
      name: "SearchForSale",
      I: SimpleSearchReq,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all families for production that match the given search key
     *
     * @generated from rpc Scailo.FamiliesService.SearchForProduction
     */
    searchForProduction: {
      name: "SearchForProduction",
      I: SimpleSearchReq,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all families for replaceables that match the given search key
     *
     * @generated from rpc Scailo.FamiliesService.SearchForReplaceables
     */
    searchForReplaceables: {
      name: "SearchForReplaceables",
      I: SimpleSearchReq,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all families for equation family that match the given search key
     *
     * @generated from rpc Scailo.FamiliesService.SearchForEquationFamily
     */
    searchForEquationFamily: {
      name: "SearchForEquationFamily",
      I: SimpleSearchReq,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all families for equation replaceable that match the given search key
     *
     * @generated from rpc Scailo.FamiliesService.SearchForEquationReplaceable
     */
    searchForEquationReplaceable: {
      name: "SearchForEquationReplaceable",
      I: SimpleSearchReq,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all families for equation sales bundle that match the given search key
     *
     * @generated from rpc Scailo.FamiliesService.SearchForEquationSalesBundle
     */
    searchForEquationSalesBundle: {
      name: "SearchForEquationSalesBundle",
      I: SimpleSearchReq,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.FamiliesService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.FamiliesService.Count
     */
    count: {
      name: "Count",
      I: FamiliesServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

