// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file generalstreams.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BOOL_FILTER, EmployeeMetadata, SORT_ORDER } from "./base.scailo_pb.js";

/**
 *
 * Describes the lifecycle status of each general stream
 *
 * @generated from enum Scailo.GENERAL_STREAM_LIFECYCLE
 */
export enum GENERAL_STREAM_LIFECYCLE {
  /**
   * Used only in filters
   *
   * @generated from enum value: GENERAL_STREAM_LIFECYCLE_ANY_UNSPECIFIED = 0;
   */
  GENERAL_STREAM_LIFECYCLE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the general stream is open
   *
   * @generated from enum value: GENERAL_STREAM_LIFECYCLE_OPEN = 1;
   */
  GENERAL_STREAM_LIFECYCLE_OPEN = 1,

  /**
   * Denotes that the general stream has completed
   *
   * @generated from enum value: GENERAL_STREAM_LIFECYCLE_COMPLETED = 2;
   */
  GENERAL_STREAM_LIFECYCLE_COMPLETED = 2,

  /**
   * Denotes that the general stream has been cancelled
   *
   * @generated from enum value: GENERAL_STREAM_LIFECYCLE_CANCELLED = 3;
   */
  GENERAL_STREAM_LIFECYCLE_CANCELLED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(GENERAL_STREAM_LIFECYCLE)
proto3.util.setEnumType(GENERAL_STREAM_LIFECYCLE, "Scailo.GENERAL_STREAM_LIFECYCLE", [
  { no: 0, name: "GENERAL_STREAM_LIFECYCLE_ANY_UNSPECIFIED" },
  { no: 1, name: "GENERAL_STREAM_LIFECYCLE_OPEN" },
  { no: 2, name: "GENERAL_STREAM_LIFECYCLE_COMPLETED" },
  { no: 3, name: "GENERAL_STREAM_LIFECYCLE_CANCELLED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.GENERAL_STREAM_SORT_KEY
 */
export enum GENERAL_STREAM_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: GENERAL_STREAM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  GENERAL_STREAM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: GENERAL_STREAM_SORT_KEY_CREATED_AT = 1;
   */
  GENERAL_STREAM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: GENERAL_STREAM_SORT_KEY_MODIFIED_AT = 2;
   */
  GENERAL_STREAM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: GENERAL_STREAM_SORT_KEY_COMPLETED_ON = 6;
   */
  GENERAL_STREAM_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the title
   *
   * @generated from enum value: GENERAL_STREAM_SORT_KEY_TITLE = 10;
   */
  GENERAL_STREAM_SORT_KEY_TITLE = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(GENERAL_STREAM_SORT_KEY)
proto3.util.setEnumType(GENERAL_STREAM_SORT_KEY, "Scailo.GENERAL_STREAM_SORT_KEY", [
  { no: 0, name: "GENERAL_STREAM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "GENERAL_STREAM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "GENERAL_STREAM_SORT_KEY_MODIFIED_AT" },
  { no: 6, name: "GENERAL_STREAM_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "GENERAL_STREAM_SORT_KEY_TITLE" },
]);

/**
 *
 * Describes the available message types for a general stream message
 *
 * @generated from enum Scailo.GENERAL_STREAM_MESSAGE_TYPE
 */
export enum GENERAL_STREAM_MESSAGE_TYPE {
  /**
   * Used only for filters
   *
   * @generated from enum value: GENERAL_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED = 0;
   */
  GENERAL_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the message was sent by a user
   *
   * @generated from enum value: GENERAL_STREAM_MESSAGE_TYPE_USER = 1;
   */
  GENERAL_STREAM_MESSAGE_TYPE_USER = 1,

  /**
   * Denotes that the message was sent by the system
   *
   * @generated from enum value: GENERAL_STREAM_MESSAGE_TYPE_SYSTEM = 2;
   */
  GENERAL_STREAM_MESSAGE_TYPE_SYSTEM = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GENERAL_STREAM_MESSAGE_TYPE)
proto3.util.setEnumType(GENERAL_STREAM_MESSAGE_TYPE, "Scailo.GENERAL_STREAM_MESSAGE_TYPE", [
  { no: 0, name: "GENERAL_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED" },
  { no: 1, name: "GENERAL_STREAM_MESSAGE_TYPE_USER" },
  { no: 2, name: "GENERAL_STREAM_MESSAGE_TYPE_SYSTEM" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.GENERAL_STREAM_MESSAGE_SORT_KEY
 */
export enum GENERAL_STREAM_MESSAGE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: GENERAL_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  GENERAL_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: GENERAL_STREAM_MESSAGE_SORT_KEY_CREATED_AT = 1;
   */
  GENERAL_STREAM_MESSAGE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: GENERAL_STREAM_MESSAGE_SORT_KEY_MODIFIED_AT = 2;
   */
  GENERAL_STREAM_MESSAGE_SORT_KEY_MODIFIED_AT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(GENERAL_STREAM_MESSAGE_SORT_KEY)
proto3.util.setEnumType(GENERAL_STREAM_MESSAGE_SORT_KEY, "Scailo.GENERAL_STREAM_MESSAGE_SORT_KEY", [
  { no: 0, name: "GENERAL_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "GENERAL_STREAM_MESSAGE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "GENERAL_STREAM_MESSAGE_SORT_KEY_MODIFIED_AT" },
]);

/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being an general stream lifecycle status
 *
 * @generated from message Scailo.LogbookLogGeneralStreamLC
 */
export class LogbookLogGeneralStreamLC extends Message<LogbookLogGeneralStreamLC> {
  /**
   * ID of the resource
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Stores if the resource is active
   *
   * @generated from field: bool is_active = 2;
   */
  isActive = false;

  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: uint64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: string ref_uuid = 10;
   */
  refUuid = "";

  /**
   * The operation that was performed
   *
   * @generated from field: Scailo.GENERAL_STREAM_LIFECYCLE operation = 11;
   */
  operation = GENERAL_STREAM_LIFECYCLE.GENERAL_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The name of the person who made this entry
   *
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * The ID of the user who made this entry
   *
   * @generated from field: uint64 user_id = 14;
   */
  userId = protoInt64.zero;

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 15;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 16;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogGeneralStreamLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LogbookLogGeneralStreamLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_LIFECYCLE) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogGeneralStreamLC {
    return new LogbookLogGeneralStreamLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogGeneralStreamLC {
    return new LogbookLogGeneralStreamLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogGeneralStreamLC {
    return new LogbookLogGeneralStreamLC().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogGeneralStreamLC | PlainMessage<LogbookLogGeneralStreamLC> | undefined, b: LogbookLogGeneralStreamLC | PlainMessage<LogbookLogGeneralStreamLC> | undefined): boolean {
    return proto3.util.equals(LogbookLogGeneralStreamLC, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.GeneralStreamsServiceCreateRequest
 */
export class GeneralStreamsServiceCreateRequest extends Message<GeneralStreamsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The title of the general stream
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * Assign self (the user creating the stream) as an internal subscriber
   *
   * @generated from field: bool assign_self_as_internal_subscriber = 80;
   */
  assignSelfAsInternalSubscriber = false;

  constructor(data?: PartialMessage<GeneralStreamsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 80, name: "assign_self_as_internal_subscriber", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServiceCreateRequest {
    return new GeneralStreamsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServiceCreateRequest {
    return new GeneralStreamsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServiceCreateRequest {
    return new GeneralStreamsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServiceCreateRequest | PlainMessage<GeneralStreamsServiceCreateRequest> | undefined, b: GeneralStreamsServiceCreateRequest | PlainMessage<GeneralStreamsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.GeneralStreamsServiceUpdateRequest
 */
export class GeneralStreamsServiceUpdateRequest extends Message<GeneralStreamsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The title of the general stream
   *
   * @generated from field: string title = 10;
   */
  title = "";

  constructor(data?: PartialMessage<GeneralStreamsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServiceUpdateRequest {
    return new GeneralStreamsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServiceUpdateRequest {
    return new GeneralStreamsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServiceUpdateRequest {
    return new GeneralStreamsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServiceUpdateRequest | PlainMessage<GeneralStreamsServiceUpdateRequest> | undefined, b: GeneralStreamsServiceUpdateRequest | PlainMessage<GeneralStreamsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.GeneralStream
 */
export class GeneralStream extends Message<GeneralStream> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this general stream
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The status of this general stream
   *
   * @generated from field: Scailo.GENERAL_STREAM_LIFECYCLE status = 4;
   */
  status = GENERAL_STREAM_LIFECYCLE.GENERAL_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this general stream
   *
   * @generated from field: repeated Scailo.LogbookLogGeneralStreamLC logs = 5;
   */
  logs: LogbookLogGeneralStreamLC[] = [];

  /**
   * The timestamp of when this general stream was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The title of the general stream
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 50;
   */
  internalRef = "";

  /**
   * Stores the number of unread messages in this stream for the specific user (on the basis of the auth token)
   *
   * @generated from field: uint64 unread_count = 60;
   */
  unreadCount = protoInt64.zero;

  constructor(data?: PartialMessage<GeneralStream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_LIFECYCLE) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogGeneralStreamLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "unread_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStream {
    return new GeneralStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStream {
    return new GeneralStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStream {
    return new GeneralStream().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStream | PlainMessage<GeneralStream> | undefined, b: GeneralStream | PlainMessage<GeneralStream> | undefined): boolean {
    return proto3.util.equals(GeneralStream, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.GeneralStreamsList
 */
export class GeneralStreamsList extends Message<GeneralStreamsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.GeneralStream list = 1;
   */
  list: GeneralStream[] = [];

  constructor(data?: PartialMessage<GeneralStreamsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: GeneralStream, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsList {
    return new GeneralStreamsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsList {
    return new GeneralStreamsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsList {
    return new GeneralStreamsList().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsList | PlainMessage<GeneralStreamsList> | undefined, b: GeneralStreamsList | PlainMessage<GeneralStreamsList> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.GeneralStreamsServicePaginationReq
 */
export class GeneralStreamsServicePaginationReq extends Message<GeneralStreamsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.GENERAL_STREAM_SORT_KEY sort_key = 5;
   */
  sortKey = GENERAL_STREAM_SORT_KEY.GENERAL_STREAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this general stream
   *
   * @generated from field: Scailo.GENERAL_STREAM_LIFECYCLE status = 6;
   */
  status = GENERAL_STREAM_LIFECYCLE.GENERAL_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<GeneralStreamsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_LIFECYCLE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServicePaginationReq {
    return new GeneralStreamsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServicePaginationReq {
    return new GeneralStreamsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServicePaginationReq {
    return new GeneralStreamsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServicePaginationReq | PlainMessage<GeneralStreamsServicePaginationReq> | undefined, b: GeneralStreamsServicePaginationReq | PlainMessage<GeneralStreamsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.GeneralStreamsServicePaginationResponse
 */
export class GeneralStreamsServicePaginationResponse extends Message<GeneralStreamsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.GeneralStream payload = 4;
   */
  payload: GeneralStream[] = [];

  constructor(data?: PartialMessage<GeneralStreamsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: GeneralStream, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServicePaginationResponse {
    return new GeneralStreamsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServicePaginationResponse {
    return new GeneralStreamsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServicePaginationResponse {
    return new GeneralStreamsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServicePaginationResponse | PlainMessage<GeneralStreamsServicePaginationResponse> | undefined, b: GeneralStreamsServicePaginationResponse | PlainMessage<GeneralStreamsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.GeneralStreamsServiceFilterReq
 */
export class GeneralStreamsServiceFilterReq extends Message<GeneralStreamsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.GENERAL_STREAM_SORT_KEY sort_key = 5;
   */
  sortKey = GENERAL_STREAM_SORT_KEY.GENERAL_STREAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this general stream
   *
   * @generated from field: Scailo.GENERAL_STREAM_LIFECYCLE status = 10;
   */
  status = GENERAL_STREAM_LIFECYCLE.GENERAL_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 18;
   */
  internalRef = "";

  /**
   * The title of the general stream
   *
   * @generated from field: string title = 30;
   */
  title = "";

  /**
   * Filter by the associated internal subscriber user ID
   *
   * @generated from field: uint64 internal_subscriber_user_id = 60;
   */
  internalSubscriberUserId = protoInt64.zero;

  constructor(data?: PartialMessage<GeneralStreamsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "internal_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServiceFilterReq {
    return new GeneralStreamsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServiceFilterReq {
    return new GeneralStreamsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServiceFilterReq {
    return new GeneralStreamsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServiceFilterReq | PlainMessage<GeneralStreamsServiceFilterReq> | undefined, b: GeneralStreamsServiceFilterReq | PlainMessage<GeneralStreamsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.GeneralStreamsServiceCountReq
 */
export class GeneralStreamsServiceCountReq extends Message<GeneralStreamsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this general stream
   *
   * @generated from field: Scailo.GENERAL_STREAM_LIFECYCLE status = 10;
   */
  status = GENERAL_STREAM_LIFECYCLE.GENERAL_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 18;
   */
  internalRef = "";

  /**
   * The title of the general stream
   *
   * @generated from field: string title = 30;
   */
  title = "";

  /**
   * Filter by the associated internal subscriber user ID
   *
   * @generated from field: uint64 internal_subscriber_user_id = 60;
   */
  internalSubscriberUserId = protoInt64.zero;

  constructor(data?: PartialMessage<GeneralStreamsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "internal_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServiceCountReq {
    return new GeneralStreamsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServiceCountReq {
    return new GeneralStreamsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServiceCountReq {
    return new GeneralStreamsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServiceCountReq | PlainMessage<GeneralStreamsServiceCountReq> | undefined, b: GeneralStreamsServiceCountReq | PlainMessage<GeneralStreamsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.GeneralStreamsServiceSearchAllReq
 */
export class GeneralStreamsServiceSearchAllReq extends Message<GeneralStreamsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.GENERAL_STREAM_SORT_KEY sort_key = 5;
   */
  sortKey = GENERAL_STREAM_SORT_KEY.GENERAL_STREAM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.GENERAL_STREAM_LIFECYCLE status = 10;
   */
  status = GENERAL_STREAM_LIFECYCLE.GENERAL_STREAM_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * Filter by the associated internal subscriber user ID
   *
   * @generated from field: uint64 internal_subscriber_user_id = 60;
   */
  internalSubscriberUserId = protoInt64.zero;

  constructor(data?: PartialMessage<GeneralStreamsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_LIFECYCLE) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "internal_subscriber_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServiceSearchAllReq {
    return new GeneralStreamsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServiceSearchAllReq {
    return new GeneralStreamsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServiceSearchAllReq {
    return new GeneralStreamsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServiceSearchAllReq | PlainMessage<GeneralStreamsServiceSearchAllReq> | undefined, b: GeneralStreamsServiceSearchAllReq | PlainMessage<GeneralStreamsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the parameters required to add a message to an general stream
 *
 * @generated from message Scailo.GeneralStreamsServiceMessageCreateRequest
 */
export class GeneralStreamsServiceMessageCreateRequest extends Message<GeneralStreamsServiceMessageCreateRequest> {
  /**
   * The type of the message
   *
   * @generated from field: Scailo.GENERAL_STREAM_MESSAGE_TYPE message_type = 8;
   */
  messageType = GENERAL_STREAM_MESSAGE_TYPE.GENERAL_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED;

  /**
   * Stores the general stream UUID
   *
   * @generated from field: string general_stream_uuid = 10;
   */
  generalStreamUuid = "";

  /**
   * Stores the optional UUID of the message that this message is a response to
   *
   * @generated from field: string response_to_message_uuid = 11;
   */
  responseToMessageUuid = "";

  /**
   * The content of the message
   *
   * @generated from field: string content = 20;
   */
  content = "";

  constructor(data?: PartialMessage<GeneralStreamsServiceMessageCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServiceMessageCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 8, name: "message_type", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_MESSAGE_TYPE) },
    { no: 10, name: "general_stream_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "response_to_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServiceMessageCreateRequest {
    return new GeneralStreamsServiceMessageCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServiceMessageCreateRequest {
    return new GeneralStreamsServiceMessageCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServiceMessageCreateRequest {
    return new GeneralStreamsServiceMessageCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServiceMessageCreateRequest | PlainMessage<GeneralStreamsServiceMessageCreateRequest> | undefined, b: GeneralStreamsServiceMessageCreateRequest | PlainMessage<GeneralStreamsServiceMessageCreateRequest> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServiceMessageCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a message associated to an general stream
 *
 * @generated from message Scailo.GeneralStreamMessage
 */
export class GeneralStreamMessage extends Message<GeneralStreamMessage> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this general stream
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The type of the message
   *
   * @generated from field: Scailo.GENERAL_STREAM_MESSAGE_TYPE message_type = 8;
   */
  messageType = GENERAL_STREAM_MESSAGE_TYPE.GENERAL_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED;

  /**
   * Stores the general stream ID
   *
   * @generated from field: uint64 general_stream_id = 10;
   */
  generalStreamId = protoInt64.zero;

  /**
   * Stores the optional UUID of the message that this message is a response to
   *
   * @generated from field: string response_to_message_uuid = 11;
   */
  responseToMessageUuid = "";

  /**
   * The content of the message
   *
   * @generated from field: string content = 20;
   */
  content = "";

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 50;
   */
  internalRef = "";

  /**
   * Stores if the message has been read by the user
   *
   * @generated from field: bool is_read = 60;
   */
  isRead = false;

  constructor(data?: PartialMessage<GeneralStreamMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 8, name: "message_type", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_MESSAGE_TYPE) },
    { no: 10, name: "general_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "response_to_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 60, name: "is_read", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamMessage {
    return new GeneralStreamMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamMessage {
    return new GeneralStreamMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamMessage {
    return new GeneralStreamMessage().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamMessage | PlainMessage<GeneralStreamMessage> | undefined, b: GeneralStreamMessage | PlainMessage<GeneralStreamMessage> | undefined): boolean {
    return proto3.util.equals(GeneralStreamMessage, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of general stream messages
 *
 * @generated from message Scailo.GeneralStreamMessagesList
 */
export class GeneralStreamMessagesList extends Message<GeneralStreamMessagesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.GeneralStreamMessage list = 1;
   */
  list: GeneralStreamMessage[] = [];

  constructor(data?: PartialMessage<GeneralStreamMessagesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamMessagesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: GeneralStreamMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamMessagesList {
    return new GeneralStreamMessagesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamMessagesList {
    return new GeneralStreamMessagesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamMessagesList {
    return new GeneralStreamMessagesList().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamMessagesList | PlainMessage<GeneralStreamMessagesList> | undefined, b: GeneralStreamMessagesList | PlainMessage<GeneralStreamMessagesList> | undefined): boolean {
    return proto3.util.equals(GeneralStreamMessagesList, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve messages.
 *
 * @generated from message Scailo.GeneralStreamMessagesSearchRequest
 */
export class GeneralStreamMessagesSearchRequest extends Message<GeneralStreamMessagesSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.GENERAL_STREAM_MESSAGE_SORT_KEY sort_key = 5;
   */
  sortKey = GENERAL_STREAM_MESSAGE_SORT_KEY.GENERAL_STREAM_MESSAGE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The type of the message
   *
   * @generated from field: Scailo.GENERAL_STREAM_MESSAGE_TYPE message_type = 8;
   */
  messageType = GENERAL_STREAM_MESSAGE_TYPE.GENERAL_STREAM_MESSAGE_TYPE_ANY_UNSPECIFIED;

  /**
   * The ID of the general stream
   *
   * @generated from field: uint64 general_stream_id = 20;
   */
  generalStreamId = protoInt64.zero;

  /**
   * Stores the optional UUID of the message that this message is a response to
   *
   * @generated from field: string response_to_message_uuid = 30;
   */
  responseToMessageUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<GeneralStreamMessagesSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamMessagesSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_MESSAGE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "message_type", kind: "enum", T: proto3.getEnumType(GENERAL_STREAM_MESSAGE_TYPE) },
    { no: 20, name: "general_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "response_to_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamMessagesSearchRequest {
    return new GeneralStreamMessagesSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamMessagesSearchRequest {
    return new GeneralStreamMessagesSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamMessagesSearchRequest {
    return new GeneralStreamMessagesSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamMessagesSearchRequest | PlainMessage<GeneralStreamMessagesSearchRequest> | undefined, b: GeneralStreamMessagesSearchRequest | PlainMessage<GeneralStreamMessagesSearchRequest> | undefined): boolean {
    return proto3.util.equals(GeneralStreamMessagesSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination messages request
 *
 * @generated from message Scailo.GeneralStreamsServicePaginatedMessagesResponse
 */
export class GeneralStreamsServicePaginatedMessagesResponse extends Message<GeneralStreamsServicePaginatedMessagesResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.GeneralStreamMessage payload = 4;
   */
  payload: GeneralStreamMessage[] = [];

  constructor(data?: PartialMessage<GeneralStreamsServicePaginatedMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServicePaginatedMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: GeneralStreamMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServicePaginatedMessagesResponse {
    return new GeneralStreamsServicePaginatedMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServicePaginatedMessagesResponse {
    return new GeneralStreamsServicePaginatedMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServicePaginatedMessagesResponse {
    return new GeneralStreamsServicePaginatedMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServicePaginatedMessagesResponse | PlainMessage<GeneralStreamsServicePaginatedMessagesResponse> | undefined, b: GeneralStreamsServicePaginatedMessagesResponse | PlainMessage<GeneralStreamsServicePaginatedMessagesResponse> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServicePaginatedMessagesResponse, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a message receipt
 *
 * @generated from message Scailo.GeneralStreamMessageReceipt
 */
export class GeneralStreamMessageReceipt extends Message<GeneralStreamMessageReceipt> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this general stream
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the general stream message UUID
   *
   * @generated from field: string general_stream_message_uuid = 10;
   */
  generalStreamMessageUuid = "";

  /**
   * The ID of the user who read this
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * Stores if the message has been read by the user
   *
   * @generated from field: bool is_read = 12;
   */
  isRead = false;

  /**
   * Stores the timestamp of when the message was read
   *
   * @generated from field: uint64 read_at = 13;
   */
  readAt = protoInt64.zero;

  constructor(data?: PartialMessage<GeneralStreamMessageReceipt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamMessageReceipt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 10, name: "general_stream_message_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "is_read", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "read_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamMessageReceipt {
    return new GeneralStreamMessageReceipt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamMessageReceipt {
    return new GeneralStreamMessageReceipt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamMessageReceipt {
    return new GeneralStreamMessageReceipt().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamMessageReceipt | PlainMessage<GeneralStreamMessageReceipt> | undefined, b: GeneralStreamMessageReceipt | PlainMessage<GeneralStreamMessageReceipt> | undefined): boolean {
    return proto3.util.equals(GeneralStreamMessageReceipt, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of general stream message receipts
 *
 * @generated from message Scailo.GeneralStreamMessageReceiptsList
 */
export class GeneralStreamMessageReceiptsList extends Message<GeneralStreamMessageReceiptsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.GeneralStreamMessageReceipt list = 1;
   */
  list: GeneralStreamMessageReceipt[] = [];

  constructor(data?: PartialMessage<GeneralStreamMessageReceiptsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamMessageReceiptsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: GeneralStreamMessageReceipt, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamMessageReceiptsList {
    return new GeneralStreamMessageReceiptsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamMessageReceiptsList {
    return new GeneralStreamMessageReceiptsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamMessageReceiptsList {
    return new GeneralStreamMessageReceiptsList().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamMessageReceiptsList | PlainMessage<GeneralStreamMessageReceiptsList> | undefined, b: GeneralStreamMessageReceiptsList | PlainMessage<GeneralStreamMessageReceiptsList> | undefined): boolean {
    return proto3.util.equals(GeneralStreamMessageReceiptsList, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create an internal subscriber
 *
 * @generated from message Scailo.GeneralStreamsServiceInternalSubscriberCreateRequest
 */
export class GeneralStreamsServiceInternalSubscriberCreateRequest extends Message<GeneralStreamsServiceInternalSubscriberCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the general stream ID
   *
   * @generated from field: uint64 general_stream_id = 10;
   */
  generalStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<GeneralStreamsServiceInternalSubscriberCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServiceInternalSubscriberCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "general_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServiceInternalSubscriberCreateRequest {
    return new GeneralStreamsServiceInternalSubscriberCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServiceInternalSubscriberCreateRequest {
    return new GeneralStreamsServiceInternalSubscriberCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServiceInternalSubscriberCreateRequest {
    return new GeneralStreamsServiceInternalSubscriberCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServiceInternalSubscriberCreateRequest | PlainMessage<GeneralStreamsServiceInternalSubscriberCreateRequest> | undefined, b: GeneralStreamsServiceInternalSubscriberCreateRequest | PlainMessage<GeneralStreamsServiceInternalSubscriberCreateRequest> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServiceInternalSubscriberCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an internal subscriber
 *
 * @generated from message Scailo.GeneralStreamInternalSubscriber
 */
export class GeneralStreamInternalSubscriber extends Message<GeneralStreamInternalSubscriber> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this general stream internal subscriber
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the general stream ID
   *
   * @generated from field: uint64 general_stream_id = 10;
   */
  generalStreamId = protoInt64.zero;

  /**
   * Stores the user ID
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  constructor(data?: PartialMessage<GeneralStreamInternalSubscriber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamInternalSubscriber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "general_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamInternalSubscriber {
    return new GeneralStreamInternalSubscriber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamInternalSubscriber {
    return new GeneralStreamInternalSubscriber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamInternalSubscriber {
    return new GeneralStreamInternalSubscriber().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamInternalSubscriber | PlainMessage<GeneralStreamInternalSubscriber> | undefined, b: GeneralStreamInternalSubscriber | PlainMessage<GeneralStreamInternalSubscriber> | undefined): boolean {
    return proto3.util.equals(GeneralStreamInternalSubscriber, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of internal subscribers
 *
 * @generated from message Scailo.GeneralStreamInternalSubscribersList
 */
export class GeneralStreamInternalSubscribersList extends Message<GeneralStreamInternalSubscribersList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.GeneralStreamInternalSubscriber list = 1;
   */
  list: GeneralStreamInternalSubscriber[] = [];

  constructor(data?: PartialMessage<GeneralStreamInternalSubscribersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamInternalSubscribersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: GeneralStreamInternalSubscriber, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamInternalSubscribersList {
    return new GeneralStreamInternalSubscribersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamInternalSubscribersList {
    return new GeneralStreamInternalSubscribersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamInternalSubscribersList {
    return new GeneralStreamInternalSubscribersList().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamInternalSubscribersList | PlainMessage<GeneralStreamInternalSubscribersList> | undefined, b: GeneralStreamInternalSubscribersList | PlainMessage<GeneralStreamInternalSubscribersList> | undefined): boolean {
    return proto3.util.equals(GeneralStreamInternalSubscribersList, a, b);
  }
}

/**
 *
 * Describes the data model to handle importing of internal subscribers from the given identifier representing a team or a department
 *
 * @generated from message Scailo.GeneralStreamsServiceImportInternalSubscribersRequest
 */
export class GeneralStreamsServiceImportInternalSubscribersRequest extends Message<GeneralStreamsServiceImportInternalSubscribersRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the general stream
   *
   * @generated from field: uint64 general_stream_id = 2;
   */
  generalStreamId = protoInt64.zero;

  /**
   * The ID of the team or the department from which internal subscribers need to be added to the general stream
   *
   * @generated from field: uint64 resource_id = 3;
   */
  resourceId = protoInt64.zero;

  /**
   * Stores if the existing internal subscribers in the general stream need to be deleted before adding from the source record
   *
   * @generated from field: bool delete_existing = 4;
   */
  deleteExisting = false;

  constructor(data?: PartialMessage<GeneralStreamsServiceImportInternalSubscribersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GeneralStreamsServiceImportInternalSubscribersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "general_stream_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "resource_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "delete_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneralStreamsServiceImportInternalSubscribersRequest {
    return new GeneralStreamsServiceImportInternalSubscribersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneralStreamsServiceImportInternalSubscribersRequest {
    return new GeneralStreamsServiceImportInternalSubscribersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneralStreamsServiceImportInternalSubscribersRequest {
    return new GeneralStreamsServiceImportInternalSubscribersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GeneralStreamsServiceImportInternalSubscribersRequest | PlainMessage<GeneralStreamsServiceImportInternalSubscribersRequest> | undefined, b: GeneralStreamsServiceImportInternalSubscribersRequest | PlainMessage<GeneralStreamsServiceImportInternalSubscribersRequest> | undefined): boolean {
    return proto3.util.equals(GeneralStreamsServiceImportInternalSubscribersRequest, a, b);
  }
}

