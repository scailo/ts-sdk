// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file sales_enquiries.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.SALES_ENQUIRY_ITEM_SORT_KEY
 */
export enum SALES_ENQUIRY_ITEM_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_CREATED_AT = 1;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_MODIFIED_AT = 2;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_APPROVED_ON = 3;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_APPROVED_BY = 4;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the name
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_NAME = 10;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by the internal quantity
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_INTERNAL_QUANTITY = 11;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_INTERNAL_QUANTITY = 11,

  /**
   * Fetch ordered results by the unit price
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_UNIT_PRICE = 12;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_UNIT_PRICE = 12,

  /**
   * Fetch ordered results by the discount
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_DISCOUNT = 13;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_DISCOUNT = 13,

  /**
   * Fetch ordered results by the delivery date
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_SORT_KEY_DELIVERY_DATE = 14;
   */
  SALES_ENQUIRY_ITEM_SORT_KEY_DELIVERY_DATE = 14,
}
// Retrieve enum metadata with: proto3.getEnumType(SALES_ENQUIRY_ITEM_SORT_KEY)
proto3.util.setEnumType(SALES_ENQUIRY_ITEM_SORT_KEY, "Scailo.SALES_ENQUIRY_ITEM_SORT_KEY", [
  { no: 0, name: "SALES_ENQUIRY_ITEM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "SALES_ENQUIRY_ITEM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "SALES_ENQUIRY_ITEM_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "SALES_ENQUIRY_ITEM_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "SALES_ENQUIRY_ITEM_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "SALES_ENQUIRY_ITEM_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "SALES_ENQUIRY_ITEM_SORT_KEY_NAME" },
  { no: 11, name: "SALES_ENQUIRY_ITEM_SORT_KEY_INTERNAL_QUANTITY" },
  { no: 12, name: "SALES_ENQUIRY_ITEM_SORT_KEY_UNIT_PRICE" },
  { no: 13, name: "SALES_ENQUIRY_ITEM_SORT_KEY_DISCOUNT" },
  { no: 14, name: "SALES_ENQUIRY_ITEM_SORT_KEY_DELIVERY_DATE" },
]);

/**
 *
 * Describes the applicable statuses of sales enquiry items
 *
 * @generated from enum Scailo.SALES_ENQUIRY_ITEM_STATUS
 */
export enum SALES_ENQUIRY_ITEM_STATUS {
  /**
   * Denotes that status be disregarded. This is used only within search APIs
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_STATUS_ANY_UNSPECIFIED = 0;
   */
  SALES_ENQUIRY_ITEM_STATUS_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the sales enquiry items must have been approved
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_STATUS_APPROVED = 1;
   */
  SALES_ENQUIRY_ITEM_STATUS_APPROVED = 1,

  /**
   * Denotes that the sales enquiry items must be waiting for approval
   *
   * @generated from enum value: SALES_ENQUIRY_ITEM_STATUS_UNAPPROVED = 2;
   */
  SALES_ENQUIRY_ITEM_STATUS_UNAPPROVED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SALES_ENQUIRY_ITEM_STATUS)
proto3.util.setEnumType(SALES_ENQUIRY_ITEM_STATUS, "Scailo.SALES_ENQUIRY_ITEM_STATUS", [
  { no: 0, name: "SALES_ENQUIRY_ITEM_STATUS_ANY_UNSPECIFIED" },
  { no: 1, name: "SALES_ENQUIRY_ITEM_STATUS_APPROVED" },
  { no: 2, name: "SALES_ENQUIRY_ITEM_STATUS_UNAPPROVED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.SALES_ENQUIRY_SORT_KEY
 */
export enum SALES_ENQUIRY_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  SALES_ENQUIRY_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_CREATED_AT = 1;
   */
  SALES_ENQUIRY_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_MODIFIED_AT = 2;
   */
  SALES_ENQUIRY_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_APPROVED_ON = 3;
   */
  SALES_ENQUIRY_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_APPROVED_BY = 4;
   */
  SALES_ENQUIRY_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  SALES_ENQUIRY_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_COMPLETED_ON = 6;
   */
  SALES_ENQUIRY_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_REFERENCE_ID = 10;
   */
  SALES_ENQUIRY_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  SALES_ENQUIRY_SORT_KEY_FINAL_REF_NUMBER = 11,

  /**
   * Fetch ordered results by the consignee client ID
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_CONSIGNEE_CLIENT_ID = 12;
   */
  SALES_ENQUIRY_SORT_KEY_CONSIGNEE_CLIENT_ID = 12,

  /**
   * Fetch ordered results by the buyer client ID
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_BUYER_CLIENT_ID = 13;
   */
  SALES_ENQUIRY_SORT_KEY_BUYER_CLIENT_ID = 13,

  /**
   * Fetch ordered results by the priority
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_PRIORITY = 14;
   */
  SALES_ENQUIRY_SORT_KEY_PRIORITY = 14,

  /**
   * Fetch ordered results by the amendment count
   *
   * @generated from enum value: SALES_ENQUIRY_SORT_KEY_AMENDMENT_COUNT = 15;
   */
  SALES_ENQUIRY_SORT_KEY_AMENDMENT_COUNT = 15,
}
// Retrieve enum metadata with: proto3.getEnumType(SALES_ENQUIRY_SORT_KEY)
proto3.util.setEnumType(SALES_ENQUIRY_SORT_KEY, "Scailo.SALES_ENQUIRY_SORT_KEY", [
  { no: 0, name: "SALES_ENQUIRY_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "SALES_ENQUIRY_SORT_KEY_CREATED_AT" },
  { no: 2, name: "SALES_ENQUIRY_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "SALES_ENQUIRY_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "SALES_ENQUIRY_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "SALES_ENQUIRY_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "SALES_ENQUIRY_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "SALES_ENQUIRY_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "SALES_ENQUIRY_SORT_KEY_FINAL_REF_NUMBER" },
  { no: 12, name: "SALES_ENQUIRY_SORT_KEY_CONSIGNEE_CLIENT_ID" },
  { no: 13, name: "SALES_ENQUIRY_SORT_KEY_BUYER_CLIENT_ID" },
  { no: 14, name: "SALES_ENQUIRY_SORT_KEY_PRIORITY" },
  { no: 15, name: "SALES_ENQUIRY_SORT_KEY_AMENDMENT_COUNT" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.SalesEnquiriesServiceCreateRequest
 */
export class SalesEnquiriesServiceCreateRequest extends Message<SalesEnquiriesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the sales enquiry
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The ID of the consignee
   *
   * @generated from field: uint64 consignee_client_id = 12;
   */
  consigneeClientId = protoInt64.zero;

  /**
   * The ID of the buyer
   *
   * @generated from field: uint64 buyer_client_id = 13;
   */
  buyerClientId = protoInt64.zero;

  /**
   * The priority of the sales enquiry. Possible values are "low", "medium", "high".
   *
   * @generated from field: string priority = 14;
   */
  priority = "";

  /**
   * The ID of the currency
   *
   * @generated from field: uint64 currency_id = 15;
   */
  currencyId = protoInt64.zero;

  /**
   * The description of the sales enquiry
   *
   * @generated from field: string description = 16;
   */
  description = "";

  /**
   * The miscellaneous cost (in cents)
   *
   * @generated from field: uint64 miscellaneous_cost = 17;
   */
  miscellaneousCost = protoInt64.zero;

  /**
   * The overall discount (in cents)
   *
   * @generated from field: uint64 overall_discount = 18;
   */
  overallDiscount = protoInt64.zero;

  /**
   * The round off amount (in cents) (both positive and negative values are allowed)
   *
   * @generated from field: int64 round_off = 19;
   */
  roundOff = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<SalesEnquiriesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "consignee_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "priority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "miscellaneous_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "overall_discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServiceCreateRequest {
    return new SalesEnquiriesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceCreateRequest {
    return new SalesEnquiriesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceCreateRequest {
    return new SalesEnquiriesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServiceCreateRequest | PlainMessage<SalesEnquiriesServiceCreateRequest> | undefined, b: SalesEnquiriesServiceCreateRequest | PlainMessage<SalesEnquiriesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.SalesEnquiriesServiceUpdateRequest
 */
export class SalesEnquiriesServiceUpdateRequest extends Message<SalesEnquiriesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the sales enquiry
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The ID of the consignee
   *
   * @generated from field: uint64 consignee_client_id = 12;
   */
  consigneeClientId = protoInt64.zero;

  /**
   * The ID of the buyer
   *
   * @generated from field: uint64 buyer_client_id = 13;
   */
  buyerClientId = protoInt64.zero;

  /**
   * The priority of the sales enquiry. Possible values are "low", "medium", "high".
   *
   * @generated from field: string priority = 14;
   */
  priority = "";

  /**
   * The ID of the currency
   *
   * @generated from field: uint64 currency_id = 15;
   */
  currencyId = protoInt64.zero;

  /**
   * The description of the sales enquiry
   *
   * @generated from field: string description = 16;
   */
  description = "";

  /**
   * The miscellaneous cost (in cents)
   *
   * @generated from field: uint64 miscellaneous_cost = 17;
   */
  miscellaneousCost = protoInt64.zero;

  /**
   * The overall discount (in cents)
   *
   * @generated from field: uint64 overall_discount = 18;
   */
  overallDiscount = protoInt64.zero;

  /**
   * The round off amount (in cents) (both positive and negative values are allowed)
   *
   * @generated from field: int64 round_off = 19;
   */
  roundOff = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<SalesEnquiriesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "consignee_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "priority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "miscellaneous_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "overall_discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServiceUpdateRequest {
    return new SalesEnquiriesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceUpdateRequest {
    return new SalesEnquiriesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceUpdateRequest {
    return new SalesEnquiriesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServiceUpdateRequest | PlainMessage<SalesEnquiriesServiceUpdateRequest> | undefined, b: SalesEnquiriesServiceUpdateRequest | PlainMessage<SalesEnquiriesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Stores the UUID references of the record
 *
 * @generated from message Scailo.SalesEnquiryAncillaryParameters
 */
export class SalesEnquiryAncillaryParameters extends Message<SalesEnquiryAncillaryParameters> {
  /**
   * The UUID of the consignee client (the UUID of the associated consignee_client_id)
   *
   * @generated from field: string consignee_client_uuid = 212;
   */
  consigneeClientUuid = "";

  /**
   * The UUID of the buyer client (the UUID of the associated buyer_client_id)
   *
   * @generated from field: string buyer_client_uuid = 213;
   */
  buyerClientUuid = "";

  /**
   * The UUID of the currency (the UUID of the associated currency)
   *
   * @generated from field: string currency_uuid = 215;
   */
  currencyUuid = "";

  constructor(data?: PartialMessage<SalesEnquiryAncillaryParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiryAncillaryParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 212, name: "consignee_client_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 213, name: "buyer_client_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 215, name: "currency_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiryAncillaryParameters {
    return new SalesEnquiryAncillaryParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiryAncillaryParameters {
    return new SalesEnquiryAncillaryParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiryAncillaryParameters {
    return new SalesEnquiryAncillaryParameters().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiryAncillaryParameters | PlainMessage<SalesEnquiryAncillaryParameters> | undefined, b: SalesEnquiryAncillaryParameters | PlainMessage<SalesEnquiryAncillaryParameters> | undefined): boolean {
    return proto3.util.equals(SalesEnquiryAncillaryParameters, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.SalesEnquiry
 */
export class SalesEnquiry extends Message<SalesEnquiry> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this sales enquiry
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this sales enquiry
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this sales enquiry
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this sales enquiry was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the sales enquiry
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The ID of the consignee
   *
   * @generated from field: uint64 consignee_client_id = 12;
   */
  consigneeClientId = protoInt64.zero;

  /**
   * The ID of the buyer
   *
   * @generated from field: uint64 buyer_client_id = 13;
   */
  buyerClientId = protoInt64.zero;

  /**
   * The priority of the sales enquiry. Possible values are "low", "medium", "high".
   *
   * @generated from field: string priority = 14;
   */
  priority = "";

  /**
   * The ID of the currency
   *
   * @generated from field: uint64 currency_id = 15;
   */
  currencyId = protoInt64.zero;

  /**
   * The description of the sales enquiry
   *
   * @generated from field: string description = 16;
   */
  description = "";

  /**
   * The miscellaneous cost (in cents)
   *
   * @generated from field: uint64 miscellaneous_cost = 17;
   */
  miscellaneousCost = protoInt64.zero;

  /**
   * The overall discount (in cents)
   *
   * @generated from field: uint64 overall_discount = 18;
   */
  overallDiscount = protoInt64.zero;

  /**
   * The round off amount (in cents)
   *
   * @generated from field: int64 round_off = 19;
   */
  roundOff = protoInt64.zero;

  /**
   * The number of times that the sales enquiry has been amended
   *
   * @generated from field: uint64 amendment_count = 20;
   */
  amendmentCount = protoInt64.zero;

  /**
   * The list of associated sales enquiry items
   *
   * @generated from field: repeated Scailo.SalesEnquiryItem list = 30;
   */
  list: SalesEnquiryItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 40;
   */
  formData: FormFieldDatum[] = [];

  /**
   * The total price of the sales enquiry
   *
   * @generated from field: double total_price = 50;
   */
  totalPrice = 0;

  constructor(data?: PartialMessage<SalesEnquiry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "consignee_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "priority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "miscellaneous_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "overall_discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "amendment_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "list", kind: "message", T: SalesEnquiryItem, repeated: true },
    { no: 40, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
    { no: 50, name: "total_price", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiry {
    return new SalesEnquiry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiry {
    return new SalesEnquiry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiry {
    return new SalesEnquiry().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiry | PlainMessage<SalesEnquiry> | undefined, b: SalesEnquiry | PlainMessage<SalesEnquiry> | undefined): boolean {
    return proto3.util.equals(SalesEnquiry, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an item to a sales enquiry
 *
 * @generated from message Scailo.SalesEnquiriesServiceItemCreateRequest
 */
export class SalesEnquiriesServiceItemCreateRequest extends Message<SalesEnquiriesServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the sales enquiry ID
   *
   * @generated from field: uint64 sales_enquiry_id = 10;
   */
  salesEnquiryId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * The quantity being offered (in cents)
   *
   * @generated from field: uint64 internal_quantity = 12;
   */
  internalQuantity = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: uint64 uom_id = 13;
   */
  uomId = protoInt64.zero;

  /**
   * The unit price
   *
   * @generated from field: uint64 unit_price = 14;
   */
  unitPrice = protoInt64.zero;

  /**
   * The discount percentage (in cents)
   *
   * @generated from field: uint64 discount = 15;
   */
  discount = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 16;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The round off (in cents) (both positive and negative values are allowed)
   *
   * @generated from field: int64 round_off = 17;
   */
  roundOff = protoInt64.zero;

  /**
   * The delivery date
   *
   * @generated from field: string delivery_date = 18;
   */
  deliveryDate = "";

  /**
   * The specifications
   *
   * @generated from field: string specifications = 19;
   */
  specifications = "";

  constructor(data?: PartialMessage<SalesEnquiriesServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "sales_enquiry_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "internal_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "unit_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "delivery_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServiceItemCreateRequest {
    return new SalesEnquiriesServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceItemCreateRequest {
    return new SalesEnquiriesServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceItemCreateRequest {
    return new SalesEnquiriesServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServiceItemCreateRequest | PlainMessage<SalesEnquiriesServiceItemCreateRequest> | undefined, b: SalesEnquiriesServiceItemCreateRequest | PlainMessage<SalesEnquiriesServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an item in a sales enquiry
 *
 * @generated from message Scailo.SalesEnquiriesServiceItemUpdateRequest
 */
export class SalesEnquiriesServiceItemUpdateRequest extends Message<SalesEnquiriesServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * The quantity being offered (in cents)
   *
   * @generated from field: uint64 internal_quantity = 12;
   */
  internalQuantity = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: uint64 uom_id = 13;
   */
  uomId = protoInt64.zero;

  /**
   * The unit price
   *
   * @generated from field: uint64 unit_price = 14;
   */
  unitPrice = protoInt64.zero;

  /**
   * The discount percentage (in cents)
   *
   * @generated from field: uint64 discount = 15;
   */
  discount = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 16;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The round off (in cents) (both positive and negative values are allowed)
   *
   * @generated from field: int64 round_off = 17;
   */
  roundOff = protoInt64.zero;

  /**
   * The delivery date
   *
   * @generated from field: string delivery_date = 18;
   */
  deliveryDate = "";

  /**
   * The specifications
   *
   * @generated from field: string specifications = 19;
   */
  specifications = "";

  constructor(data?: PartialMessage<SalesEnquiriesServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "internal_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "unit_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "delivery_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServiceItemUpdateRequest {
    return new SalesEnquiriesServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceItemUpdateRequest {
    return new SalesEnquiriesServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceItemUpdateRequest {
    return new SalesEnquiriesServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServiceItemUpdateRequest | PlainMessage<SalesEnquiriesServiceItemUpdateRequest> | undefined, b: SalesEnquiriesServiceItemUpdateRequest | PlainMessage<SalesEnquiriesServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an item associated to a sales enquiry
 *
 * @generated from message Scailo.SalesEnquiryItem
 */
export class SalesEnquiryItem extends Message<SalesEnquiryItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this sales enquiry
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the sales enquiry ID
   *
   * @generated from field: uint64 sales_enquiry_id = 10;
   */
  salesEnquiryId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * The quantity being offered (in cents)
   *
   * @generated from field: uint64 internal_quantity = 12;
   */
  internalQuantity = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: uint64 uom_id = 13;
   */
  uomId = protoInt64.zero;

  /**
   * The unit price
   *
   * @generated from field: uint64 unit_price = 14;
   */
  unitPrice = protoInt64.zero;

  /**
   * The discount percentage (in cents)
   *
   * @generated from field: uint64 discount = 15;
   */
  discount = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 16;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The round off (in cents)
   *
   * @generated from field: int64 round_off = 17;
   */
  roundOff = protoInt64.zero;

  /**
   * The delivery date
   *
   * @generated from field: string delivery_date = 18;
   */
  deliveryDate = "";

  /**
   * The specifications
   *
   * @generated from field: string specifications = 19;
   */
  specifications = "";

  constructor(data?: PartialMessage<SalesEnquiryItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiryItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "sales_enquiry_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "internal_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "unit_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "delivery_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiryItem {
    return new SalesEnquiryItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiryItem {
    return new SalesEnquiryItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiryItem {
    return new SalesEnquiryItem().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiryItem | PlainMessage<SalesEnquiryItem> | undefined, b: SalesEnquiryItem | PlainMessage<SalesEnquiryItem> | undefined): boolean {
    return proto3.util.equals(SalesEnquiryItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of sales enquiries
 *
 * @generated from message Scailo.SalesEnquiriesList
 */
export class SalesEnquiriesList extends Message<SalesEnquiriesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.SalesEnquiry list = 1;
   */
  list: SalesEnquiry[] = [];

  constructor(data?: PartialMessage<SalesEnquiriesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SalesEnquiry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesList {
    return new SalesEnquiriesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesList {
    return new SalesEnquiriesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesList {
    return new SalesEnquiriesList().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesList | PlainMessage<SalesEnquiriesList> | undefined, b: SalesEnquiriesList | PlainMessage<SalesEnquiriesList> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of sales enquiry items
 *
 * @generated from message Scailo.SalesEnquiriesItemsList
 */
export class SalesEnquiriesItemsList extends Message<SalesEnquiriesItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.SalesEnquiryItem list = 1;
   */
  list: SalesEnquiryItem[] = [];

  constructor(data?: PartialMessage<SalesEnquiriesItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SalesEnquiryItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesItemsList {
    return new SalesEnquiriesItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesItemsList {
    return new SalesEnquiriesItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesItemsList {
    return new SalesEnquiriesItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesItemsList | PlainMessage<SalesEnquiriesItemsList> | undefined, b: SalesEnquiriesItemsList | PlainMessage<SalesEnquiriesItemsList> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.SalesEnquiryItemHistoryRequest
 */
export class SalesEnquiryItemHistoryRequest extends Message<SalesEnquiryItemHistoryRequest> {
  /**
   * Stores the sales enquiry ID
   *
   * @generated from field: uint64 sales_enquiry_id = 10;
   */
  salesEnquiryId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  constructor(data?: PartialMessage<SalesEnquiryItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiryItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "sales_enquiry_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiryItemHistoryRequest {
    return new SalesEnquiryItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiryItemHistoryRequest {
    return new SalesEnquiryItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiryItemHistoryRequest {
    return new SalesEnquiryItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiryItemHistoryRequest | PlainMessage<SalesEnquiryItemHistoryRequest> | undefined, b: SalesEnquiryItemHistoryRequest | PlainMessage<SalesEnquiryItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(SalesEnquiryItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve approved or unapproved items.
 *
 * @generated from message Scailo.SalesEnquiryItemsSearchRequest
 */
export class SalesEnquiryItemsSearchRequest extends Message<SalesEnquiryItemsSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SALES_ENQUIRY_ITEM_SORT_KEY sort_key = 5;
   */
  sortKey = SALES_ENQUIRY_ITEM_SORT_KEY.SALES_ENQUIRY_ITEM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The status of the items
   *
   * @generated from field: Scailo.SALES_ENQUIRY_ITEM_STATUS status = 7;
   */
  status = SALES_ENQUIRY_ITEM_STATUS.SALES_ENQUIRY_ITEM_STATUS_ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 10;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 11;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 12;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 13;
   */
  approverRoleId = protoInt64.zero;

  /**
   * Stores the sales enquiry ID
   *
   * @generated from field: uint64 sales_enquiry_id = 20;
   */
  salesEnquiryId = protoInt64.zero;

  /**
   * The ID of the unit of material
   *
   * @generated from field: uint64 uom_id = 21;
   */
  uomId = protoInt64.zero;

  /**
   * The ID of the tax group
   *
   * @generated from field: uint64 tax_group_id = 22;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The exact delivery date of the item in the sales enquiry
   *
   * @generated from field: string delivery_date_exact = 28;
   */
  deliveryDateExact = "";

  /**
   * The start delivery date of the item in the sales enquiry
   *
   * @generated from field: string delivery_date_start = 29;
   */
  deliveryDateStart = "";

  /**
   * The end delivery date of the item in the sales enquiry
   *
   * @generated from field: string delivery_date_end = 30;
   */
  deliveryDateEnd = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<SalesEnquiryItemsSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiryItemsSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SALES_ENQUIRY_ITEM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(SALES_ENQUIRY_ITEM_STATUS) },
    { no: 10, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "sales_enquiry_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "delivery_date_exact", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "delivery_date_start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "delivery_date_end", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiryItemsSearchRequest {
    return new SalesEnquiryItemsSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiryItemsSearchRequest {
    return new SalesEnquiryItemsSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiryItemsSearchRequest {
    return new SalesEnquiryItemsSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiryItemsSearchRequest | PlainMessage<SalesEnquiryItemsSearchRequest> | undefined, b: SalesEnquiryItemsSearchRequest | PlainMessage<SalesEnquiryItemsSearchRequest> | undefined): boolean {
    return proto3.util.equals(SalesEnquiryItemsSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination items request
 *
 * @generated from message Scailo.SalesEnquiriesServicePaginatedItemsResponse
 */
export class SalesEnquiriesServicePaginatedItemsResponse extends Message<SalesEnquiriesServicePaginatedItemsResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.SalesEnquiryItem payload = 4;
   */
  payload: SalesEnquiryItem[] = [];

  constructor(data?: PartialMessage<SalesEnquiriesServicePaginatedItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServicePaginatedItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: SalesEnquiryItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServicePaginatedItemsResponse {
    return new SalesEnquiriesServicePaginatedItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServicePaginatedItemsResponse {
    return new SalesEnquiriesServicePaginatedItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServicePaginatedItemsResponse {
    return new SalesEnquiriesServicePaginatedItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServicePaginatedItemsResponse | PlainMessage<SalesEnquiriesServicePaginatedItemsResponse> | undefined, b: SalesEnquiriesServicePaginatedItemsResponse | PlainMessage<SalesEnquiriesServicePaginatedItemsResponse> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServicePaginatedItemsResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.SalesEnquiriesServicePaginationReq
 */
export class SalesEnquiriesServicePaginationReq extends Message<SalesEnquiriesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SALES_ENQUIRY_SORT_KEY sort_key = 5;
   */
  sortKey = SALES_ENQUIRY_SORT_KEY.SALES_ENQUIRY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this sales enquiry
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<SalesEnquiriesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SALES_ENQUIRY_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServicePaginationReq {
    return new SalesEnquiriesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServicePaginationReq {
    return new SalesEnquiriesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServicePaginationReq {
    return new SalesEnquiriesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServicePaginationReq | PlainMessage<SalesEnquiriesServicePaginationReq> | undefined, b: SalesEnquiriesServicePaginationReq | PlainMessage<SalesEnquiriesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.SalesEnquiriesServicePaginationResponse
 */
export class SalesEnquiriesServicePaginationResponse extends Message<SalesEnquiriesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.SalesEnquiry payload = 4;
   */
  payload: SalesEnquiry[] = [];

  constructor(data?: PartialMessage<SalesEnquiriesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: SalesEnquiry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServicePaginationResponse {
    return new SalesEnquiriesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServicePaginationResponse {
    return new SalesEnquiriesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServicePaginationResponse {
    return new SalesEnquiriesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServicePaginationResponse | PlainMessage<SalesEnquiriesServicePaginationResponse> | undefined, b: SalesEnquiriesServicePaginationResponse | PlainMessage<SalesEnquiriesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.SalesEnquiriesServiceFilterReq
 */
export class SalesEnquiriesServiceFilterReq extends Message<SalesEnquiriesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SALES_ENQUIRY_SORT_KEY sort_key = 5;
   */
  sortKey = SALES_ENQUIRY_SORT_KEY.SALES_ENQUIRY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this sales enquiry
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the sales enquiry
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The ID of the consignee
   *
   * @generated from field: uint64 consignee_client_id = 22;
   */
  consigneeClientId = protoInt64.zero;

  /**
   * The ID of the buyer
   *
   * @generated from field: uint64 buyer_client_id = 23;
   */
  buyerClientId = protoInt64.zero;

  /**
   * The priority of the sales enquiry. Possible values are "low", "medium", "high".
   *
   * @generated from field: string priority = 24;
   */
  priority = "";

  /**
   * The ID of the currency
   *
   * @generated from field: uint64 currency_id = 25;
   */
  currencyId = protoInt64.zero;

  /**
   * The exact delivery date of the item in the sales enquiry
   *
   * @generated from field: string delivery_date_exact = 41;
   */
  deliveryDateExact = "";

  /**
   * The start delivery date of the item in the sales enquiry
   *
   * @generated from field: string delivery_date_start = 42;
   */
  deliveryDateStart = "";

  /**
   * The end delivery date of the item in the sales enquiry
   *
   * @generated from field: string delivery_date_end = 43;
   */
  deliveryDateEnd = "";

  constructor(data?: PartialMessage<SalesEnquiriesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SALES_ENQUIRY_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "consignee_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 24, name: "priority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "delivery_date_exact", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 42, name: "delivery_date_start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 43, name: "delivery_date_end", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServiceFilterReq {
    return new SalesEnquiriesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceFilterReq {
    return new SalesEnquiriesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceFilterReq {
    return new SalesEnquiriesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServiceFilterReq | PlainMessage<SalesEnquiriesServiceFilterReq> | undefined, b: SalesEnquiriesServiceFilterReq | PlainMessage<SalesEnquiriesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.SalesEnquiriesServiceCountReq
 */
export class SalesEnquiriesServiceCountReq extends Message<SalesEnquiriesServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this sales enquiry
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the sales enquiry
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The ID of the consignee
   *
   * @generated from field: uint64 consignee_client_id = 22;
   */
  consigneeClientId = protoInt64.zero;

  /**
   * The ID of the buyer
   *
   * @generated from field: uint64 buyer_client_id = 23;
   */
  buyerClientId = protoInt64.zero;

  /**
   * The priority of the sales enquiry. Possible values are "low", "medium", "high".
   *
   * @generated from field: string priority = 24;
   */
  priority = "";

  /**
   * The ID of the currency
   *
   * @generated from field: uint64 currency_id = 25;
   */
  currencyId = protoInt64.zero;

  /**
   * The exact delivery date of the item in the sales enquiry
   *
   * @generated from field: string delivery_date_exact = 41;
   */
  deliveryDateExact = "";

  /**
   * The start delivery date of the item in the sales enquiry
   *
   * @generated from field: string delivery_date_start = 42;
   */
  deliveryDateStart = "";

  /**
   * The end delivery date of the item in the sales enquiry
   *
   * @generated from field: string delivery_date_end = 43;
   */
  deliveryDateEnd = "";

  constructor(data?: PartialMessage<SalesEnquiriesServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "consignee_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 24, name: "priority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "delivery_date_exact", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 42, name: "delivery_date_start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 43, name: "delivery_date_end", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServiceCountReq {
    return new SalesEnquiriesServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceCountReq {
    return new SalesEnquiriesServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceCountReq {
    return new SalesEnquiriesServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServiceCountReq | PlainMessage<SalesEnquiriesServiceCountReq> | undefined, b: SalesEnquiriesServiceCountReq | PlainMessage<SalesEnquiriesServiceCountReq> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.SalesEnquiriesServiceSearchAllReq
 */
export class SalesEnquiriesServiceSearchAllReq extends Message<SalesEnquiriesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SALES_ENQUIRY_SORT_KEY sort_key = 5;
   */
  sortKey = SALES_ENQUIRY_SORT_KEY.SALES_ENQUIRY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The ID of the consignee
   *
   * @generated from field: uint64 consignee_client_id = 22;
   */
  consigneeClientId = protoInt64.zero;

  /**
   * The ID of the buyer
   *
   * @generated from field: uint64 buyer_client_id = 23;
   */
  buyerClientId = protoInt64.zero;

  constructor(data?: PartialMessage<SalesEnquiriesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SALES_ENQUIRY_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "consignee_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServiceSearchAllReq {
    return new SalesEnquiriesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceSearchAllReq {
    return new SalesEnquiriesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceSearchAllReq {
    return new SalesEnquiriesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServiceSearchAllReq | PlainMessage<SalesEnquiriesServiceSearchAllReq> | undefined, b: SalesEnquiriesServiceSearchAllReq | PlainMessage<SalesEnquiriesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a sales enquiry contact
 *
 * @generated from message Scailo.SalesEnquiriesServiceContactCreateRequest
 */
export class SalesEnquiriesServiceContactCreateRequest extends Message<SalesEnquiriesServiceContactCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the sales enquiry ID
   *
   * @generated from field: uint64 sales_enquiry_id = 10;
   */
  salesEnquiryId = protoInt64.zero;

  /**
   * Stores the associate ID
   *
   * @generated from field: uint64 associate_id = 11;
   */
  associateId = protoInt64.zero;

  constructor(data?: PartialMessage<SalesEnquiriesServiceContactCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiriesServiceContactCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "sales_enquiry_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "associate_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiriesServiceContactCreateRequest {
    return new SalesEnquiriesServiceContactCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceContactCreateRequest {
    return new SalesEnquiriesServiceContactCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiriesServiceContactCreateRequest {
    return new SalesEnquiriesServiceContactCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiriesServiceContactCreateRequest | PlainMessage<SalesEnquiriesServiceContactCreateRequest> | undefined, b: SalesEnquiriesServiceContactCreateRequest | PlainMessage<SalesEnquiriesServiceContactCreateRequest> | undefined): boolean {
    return proto3.util.equals(SalesEnquiriesServiceContactCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a sales enquiry contact
 *
 * @generated from message Scailo.SalesEnquiryContact
 */
export class SalesEnquiryContact extends Message<SalesEnquiryContact> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this sales enquiry
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the sales enquiry ID
   *
   * @generated from field: uint64 sales_enquiry_id = 10;
   */
  salesEnquiryId = protoInt64.zero;

  /**
   * Stores the associate ID
   *
   * @generated from field: uint64 associate_id = 11;
   */
  associateId = protoInt64.zero;

  /**
   * Stores the UUID of the associate
   *
   * @generated from field: string associate_uuid = 211;
   */
  associateUuid = "";

  constructor(data?: PartialMessage<SalesEnquiryContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiryContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "sales_enquiry_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "associate_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 211, name: "associate_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiryContact {
    return new SalesEnquiryContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiryContact {
    return new SalesEnquiryContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiryContact {
    return new SalesEnquiryContact().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiryContact | PlainMessage<SalesEnquiryContact> | undefined, b: SalesEnquiryContact | PlainMessage<SalesEnquiryContact> | undefined): boolean {
    return proto3.util.equals(SalesEnquiryContact, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of sales enquiry contacts
 *
 * @generated from message Scailo.SalesEnquiryContactsList
 */
export class SalesEnquiryContactsList extends Message<SalesEnquiryContactsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.SalesEnquiryContact list = 1;
   */
  list: SalesEnquiryContact[] = [];

  constructor(data?: PartialMessage<SalesEnquiryContactsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalesEnquiryContactsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SalesEnquiryContact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalesEnquiryContactsList {
    return new SalesEnquiryContactsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalesEnquiryContactsList {
    return new SalesEnquiryContactsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalesEnquiryContactsList {
    return new SalesEnquiryContactsList().fromJsonString(jsonString, options);
  }

  static equals(a: SalesEnquiryContactsList | PlainMessage<SalesEnquiryContactsList> | undefined, b: SalesEnquiryContactsList | PlainMessage<SalesEnquiryContactsList> | undefined): boolean {
    return proto3.util.equals(SalesEnquiryContactsList, a, b);
  }
}

