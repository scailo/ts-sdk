// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file teams.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Team, TeamMember, TeamMemberHistoryRequest, TeamMembersSearchRequest, TeamsList, TeamsMembersList, TeamsServiceCountReq, TeamsServiceCreateRequest, TeamsServiceFilterReq, TeamsServiceMemberCreateRequest, TeamsServiceMemberUpdateRequest, TeamsServicePaginatedMembersResponse, TeamsServicePaginationReq, TeamsServicePaginationResponse, TeamsServiceSearchAllReq, TeamsServiceUpdateRequest } from "./teams.scailo_pb.js";
import { ActiveStatus, CloneRequest, CountInSLCStatusRequest, CountResponse, Identifier, IdentifierUUID, IdentifierWithSearchKey, IdentifierWithUserComment, ReorderItemsRequest } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each team
 *
 * @generated from service Scailo.TeamsService
 */
export const TeamsService = {
  typeName: "Scailo.TeamsService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.TeamsService.Create
     */
    create: {
      name: "Create",
      I: TeamsServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.TeamsService.Draft
     */
    draft: {
      name: "Draft",
      I: TeamsServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.TeamsService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: TeamsServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.TeamsService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.TeamsService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.TeamsService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.TeamsService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.TeamsService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: TeamsServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.TeamsService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.TeamsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.TeamsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.TeamsService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.TeamsService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.TeamsService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (IdentifierWithEmailAttributes) returns (Identifier);
     *
     * @generated from rpc Scailo.TeamsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Clone team from an existing team (denoted by the identifier)
     *
     * @generated from rpc Scailo.TeamsService.Clone
     */
    clone: {
      name: "Clone",
      I: CloneRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add a member to a team
     *
     * @generated from rpc Scailo.TeamsService.AddTeamMember
     */
    addTeamMember: {
      name: "AddTeamMember",
      I: TeamsServiceMemberCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Modify a member in a team
     *
     * @generated from rpc Scailo.TeamsService.ModifyTeamMember
     */
    modifyTeamMember: {
      name: "ModifyTeamMember",
      I: TeamsServiceMemberUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve a member in a team
     *
     * @generated from rpc Scailo.TeamsService.ApproveTeamMember
     */
    approveTeamMember: {
      name: "ApproveTeamMember",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a member in a team
     *
     * @generated from rpc Scailo.TeamsService.DeleteTeamMember
     */
    deleteTeamMember: {
      name: "DeleteTeamMember",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder members in a team
     *
     * @generated from rpc Scailo.TeamsService.ReorderTeamMembers
     */
    reorderTeamMembers: {
      name: "ReorderTeamMembers",
      I: ReorderItemsRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View Team Member by ID
     *
     * @generated from rpc Scailo.TeamsService.ViewTeamMemberByID
     */
    viewTeamMemberByID: {
      name: "ViewTeamMemberByID",
      I: Identifier,
      O: TeamMember,
      kind: MethodKind.Unary,
    },
    /**
     * View approved team members for given team ID
     *
     * @generated from rpc Scailo.TeamsService.ViewApprovedTeamMembers
     */
    viewApprovedTeamMembers: {
      name: "ViewApprovedTeamMembers",
      I: IdentifierWithSearchKey,
      O: TeamsMembersList,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved team members for given team ID
     *
     * @generated from rpc Scailo.TeamsService.ViewUnapprovedTeamMembers
     */
    viewUnapprovedTeamMembers: {
      name: "ViewUnapprovedTeamMembers",
      I: IdentifierWithSearchKey,
      O: TeamsMembersList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the team member
     *
     * @generated from rpc Scailo.TeamsService.ViewTeamMemberHistory
     */
    viewTeamMemberHistory: {
      name: "ViewTeamMemberHistory",
      I: TeamMemberHistoryRequest,
      O: TeamsMembersList,
      kind: MethodKind.Unary,
    },
    /**
     * View approved team members for given team ID with pagination
     *
     * @generated from rpc Scailo.TeamsService.ViewPaginatedApprovedTeamMembers
     */
    viewPaginatedApprovedTeamMembers: {
      name: "ViewPaginatedApprovedTeamMembers",
      I: TeamMembersSearchRequest,
      O: TeamsServicePaginatedMembersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved team members for given team ID with pagination
     *
     * @generated from rpc Scailo.TeamsService.ViewPaginatedUnapprovedTeamMembers
     */
    viewPaginatedUnapprovedTeamMembers: {
      name: "ViewPaginatedUnapprovedTeamMembers",
      I: TeamMembersSearchRequest,
      O: TeamsServicePaginatedMembersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through team members with pagination
     *
     * @generated from rpc Scailo.TeamsService.SearchMembersWithPagination
     */
    searchMembersWithPagination: {
      name: "SearchMembersWithPagination",
      I: TeamMembersSearchRequest,
      O: TeamsServicePaginatedMembersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all the teams that the member is part of (and not the team lead)
     *
     * @generated from rpc Scailo.TeamsService.ViewTeamsForMember
     */
    viewTeamsForMember: {
      name: "ViewTeamsForMember",
      I: Identifier,
      O: TeamsList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.TeamsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Team,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.TeamsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: TeamsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.TeamsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: TeamsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.TeamsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: TeamsServicePaginationReq,
      O: TeamsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.TeamsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: TeamsServiceSearchAllReq,
      O: TeamsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.TeamsService.Filter
     */
    filter: {
      name: "Filter",
      I: TeamsServiceFilterReq,
      O: TeamsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.TeamsService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.TeamsService.Count
     */
    count: {
      name: "Count",
      I: TeamsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

