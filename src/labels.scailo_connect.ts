// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file labels.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Label, LabelPaginationResp, LabelsList, LabelsServiceCountReq, LabelsServiceCreateRequest, LabelsServiceFilterReq, LabelsServicePaginationReq, LabelsServiceSearchAllReq, LabelsServiceUpdateRequest } from "./labels.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { ActiveStatus, BooleanResponse, CountResponse, Empty, Identifier, IdentifierResponse, IdentifierUUID, IdentifierWithUserComment } from "./base.scailo_pb.js";

/**
 *
 * Describes the methods applicable on each label
 *
 * @generated from service Scailo.LabelsService
 */
export const LabelsService = {
  typeName: "Scailo.LabelsService",
  methods: {
    /**
     * Create a label
     *
     * @generated from rpc Scailo.LabelsService.Create
     */
    create: {
      name: "Create",
      I: LabelsServiceCreateRequest,
      O: Label,
      kind: MethodKind.Unary,
    },
    /**
     * Update a label
     *
     * @generated from rpc Scailo.LabelsService.Update
     */
    update: {
      name: "Update",
      I: LabelsServiceUpdateRequest,
      O: Label,
      kind: MethodKind.Unary,
    },
    /**
     * Discard the label
     *
     * @generated from rpc Scailo.LabelsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore the label
     *
     * @generated from rpc Scailo.LabelsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.LabelsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Label,
      kind: MethodKind.Unary,
    },
    /**
     * View all labels
     *
     * @generated from rpc Scailo.LabelsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: LabelsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all labels with the given entity UUID
     *
     * @generated from rpc Scailo.LabelsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: LabelsList,
      kind: MethodKind.Unary,
    },
    /**
     * View labels with pagination
     *
     * @generated from rpc Scailo.LabelsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: LabelsServicePaginationReq,
      O: LabelPaginationResp,
      kind: MethodKind.Unary,
    },
    /**
     * Check if the user has permission to modify an label
     *
     * @generated from rpc Scailo.LabelsService.CheckModifyPermission
     */
    checkModifyPermission: {
      name: "CheckModifyPermission",
      I: Empty,
      O: BooleanResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Check if the user has permission to add an label
     *
     * @generated from rpc Scailo.LabelsService.CheckAddPermission
     */
    checkAddPermission: {
      name: "CheckAddPermission",
      I: Empty,
      O: BooleanResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all labels that match the given search key
     *
     * @generated from rpc Scailo.LabelsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: LabelsServiceSearchAllReq,
      O: LabelsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.LabelsService.Filter
     */
    filter: {
      name: "Filter",
      I: LabelsServiceFilterReq,
      O: LabelsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.LabelsService.Count
     */
    count: {
      name: "Count",
      I: LabelsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

