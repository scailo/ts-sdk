// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file vault.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { VaultFile } from "./vault_files.scailo_pb.js";
import { VaultFolder } from "./vault_folders.scailo_pb.js";

/**
 *
 * Describes the message consisting of the list of vault resources
 *
 * @generated from message Scailo.VaultResourcesList
 */
export class VaultResourcesList extends Message<VaultResourcesList> {
  /**
   * List of files
   *
   * @generated from field: repeated Scailo.VaultFile files = 1;
   */
  files: VaultFile[] = [];

  /**
   * List of folders
   *
   * @generated from field: repeated Scailo.VaultFolder folders = 2;
   */
  folders: VaultFolder[] = [];

  constructor(data?: PartialMessage<VaultResourcesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.VaultResourcesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: VaultFile, repeated: true },
    { no: 2, name: "folders", kind: "message", T: VaultFolder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultResourcesList {
    return new VaultResourcesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultResourcesList {
    return new VaultResourcesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultResourcesList {
    return new VaultResourcesList().fromJsonString(jsonString, options);
  }

  static equals(a: VaultResourcesList | PlainMessage<VaultResourcesList> | undefined, b: VaultResourcesList | PlainMessage<VaultResourcesList> | undefined): boolean {
    return proto3.util.equals(VaultResourcesList, a, b);
  }
}

/**
 *
 * Describes the message that stores the headers necessary for performing the RELAY request
 *
 * @generated from message Scailo.GiXRelayHeader
 */
export class GiXRelayHeader extends Message<GiXRelayHeader> {
  /**
   * The name of the header
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The value of the header
   *
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<GiXRelayHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GiXRelayHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GiXRelayHeader {
    return new GiXRelayHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GiXRelayHeader {
    return new GiXRelayHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GiXRelayHeader {
    return new GiXRelayHeader().fromJsonString(jsonString, options);
  }

  static equals(a: GiXRelayHeader | PlainMessage<GiXRelayHeader> | undefined, b: GiXRelayHeader | PlainMessage<GiXRelayHeader> | undefined): boolean {
    return proto3.util.equals(GiXRelayHeader, a, b);
  }
}

/**
 *
 * Describes the message that is required to execute a RELAY instruction for GET, DELETE and HEAD requests (without payload body)
 *
 * @generated from message Scailo.GiXRelayReqWithoutBody
 */
export class GiXRelayReqWithoutBody extends Message<GiXRelayReqWithoutBody> {
  /**
   * The UUID of the app execution
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * The content type header of the relay request (e.g., 'application/json', 'text/html')
   *
   * @generated from field: string relay_content_type_header = 4;
   */
  relayContentTypeHeader = "";

  /**
   * The accept header of the relay request (e.g., 'application/json', 'text/html')
   *
   * @generated from field: string relay_accept_header = 5;
   */
  relayAcceptHeader = "";

  /**
   * The list of additional headers that will be relayed to the remote URL
   *
   * @generated from field: repeated Scailo.GiXRelayHeader relay_headers = 10;
   */
  relayHeaders: GiXRelayHeader[] = [];

  /**
   * The remote URL that needs to be accessed
   *
   * @generated from field: string url = 20;
   */
  url = "";

  constructor(data?: PartialMessage<GiXRelayReqWithoutBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GiXRelayReqWithoutBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "relay_content_type_header", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "relay_accept_header", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "relay_headers", kind: "message", T: GiXRelayHeader, repeated: true },
    { no: 20, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GiXRelayReqWithoutBody {
    return new GiXRelayReqWithoutBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GiXRelayReqWithoutBody {
    return new GiXRelayReqWithoutBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GiXRelayReqWithoutBody {
    return new GiXRelayReqWithoutBody().fromJsonString(jsonString, options);
  }

  static equals(a: GiXRelayReqWithoutBody | PlainMessage<GiXRelayReqWithoutBody> | undefined, b: GiXRelayReqWithoutBody | PlainMessage<GiXRelayReqWithoutBody> | undefined): boolean {
    return proto3.util.equals(GiXRelayReqWithoutBody, a, b);
  }
}

/**
 *
 * Describes the message that is required to execute a RELAY instruction for POST, PUT and PATCH requests (with payload)
 *
 * @generated from message Scailo.GiXRelayReqWithBody
 */
export class GiXRelayReqWithBody extends Message<GiXRelayReqWithBody> {
  /**
   * The UUID of the app execution
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * The content type header of the relay request (e.g., 'application/json', 'text/html')
   *
   * @generated from field: string relay_content_type_header = 4;
   */
  relayContentTypeHeader = "";

  /**
   * The accept header of the relay request (e.g., 'application/json', 'text/html')
   *
   * @generated from field: string relay_accept_header = 5;
   */
  relayAcceptHeader = "";

  /**
   * The list of additional headers that will be relayed to the remote URL
   *
   * @generated from field: repeated Scailo.GiXRelayHeader relay_headers = 10;
   */
  relayHeaders: GiXRelayHeader[] = [];

  /**
   * The remote URL that needs to be accessed
   *
   * @generated from field: string url = 20;
   */
  url = "";

  /**
   * The body that needs to be relayed
   *
   * @generated from field: bytes body = 30;
   */
  body = new Uint8Array(0);

  constructor(data?: PartialMessage<GiXRelayReqWithBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GiXRelayReqWithBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "relay_content_type_header", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "relay_accept_header", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "relay_headers", kind: "message", T: GiXRelayHeader, repeated: true },
    { no: 20, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GiXRelayReqWithBody {
    return new GiXRelayReqWithBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GiXRelayReqWithBody {
    return new GiXRelayReqWithBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GiXRelayReqWithBody {
    return new GiXRelayReqWithBody().fromJsonString(jsonString, options);
  }

  static equals(a: GiXRelayReqWithBody | PlainMessage<GiXRelayReqWithBody> | undefined, b: GiXRelayReqWithBody | PlainMessage<GiXRelayReqWithBody> | undefined): boolean {
    return proto3.util.equals(GiXRelayReqWithBody, a, b);
  }
}

/**
 *
 * Describes the payload that will be returned to the GiX Relay RPC
 *
 * @generated from message Scailo.GiXRelayResponse
 */
export class GiXRelayResponse extends Message<GiXRelayResponse> {
  /**
   * The UUID of the app execution
   *
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * The response from the remote URL
   *
   * @generated from field: bytes body = 10;
   */
  body = new Uint8Array(0);

  constructor(data?: PartialMessage<GiXRelayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.GiXRelayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GiXRelayResponse {
    return new GiXRelayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GiXRelayResponse {
    return new GiXRelayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GiXRelayResponse {
    return new GiXRelayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GiXRelayResponse | PlainMessage<GiXRelayResponse> | undefined, b: GiXRelayResponse | PlainMessage<GiXRelayResponse> | undefined): boolean {
    return proto3.util.equals(GiXRelayResponse, a, b);
  }
}

