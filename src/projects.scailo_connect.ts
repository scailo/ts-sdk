// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file projects.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Project, ProjectContact, ProjectContactsList, ProjectsList, ProjectsServiceContactCreateRequest, ProjectsServiceCountReq, ProjectsServiceCreateRequest, ProjectsServiceFilterReq, ProjectsServicePaginationReq, ProjectsServicePaginationResponse, ProjectsServiceSearchAllReq, ProjectsServiceUpdateRequest, ProjectStatistics } from "./projects.scailo_pb.js";
import { ActiveStatus, CountInSLCStatusRequest, CountResponse, Identifier, IdentifierUUID, IdentifierWithEmailAttributes, IdentifierWithUserComment } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each project
 *
 * @generated from service Scailo.ProjectsService
 */
export const ProjectsService = {
  typeName: "Scailo.ProjectsService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.ProjectsService.Create
     */
    create: {
      name: "Create",
      I: ProjectsServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.ProjectsService.Draft
     */
    draft: {
      name: "Draft",
      I: ProjectsServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.ProjectsService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: ProjectsServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.ProjectsService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.ProjectsService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.ProjectsService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.ProjectsService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.ProjectsService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: ProjectsServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.ProjectsService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.ProjectsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.ProjectsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.ProjectsService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.ProjectsService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.ProjectsService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.ProjectsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send Email
     *
     * @generated from rpc Scailo.ProjectsService.SendEmail
     */
    sendEmail: {
      name: "SendEmail",
      I: IdentifierWithEmailAttributes,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add a contact
     *
     * @generated from rpc Scailo.ProjectsService.AddProjectContact
     */
    addProjectContact: {
      name: "AddProjectContact",
      I: ProjectsServiceContactCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve a contact
     *
     * @generated from rpc Scailo.ProjectsService.ApproveProjectContact
     */
    approveProjectContact: {
      name: "ApproveProjectContact",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a contact
     *
     * @generated from rpc Scailo.ProjectsService.DeleteProjectContact
     */
    deleteProjectContact: {
      name: "DeleteProjectContact",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View a contact for the given ID
     *
     * @generated from rpc Scailo.ProjectsService.ViewProjectContactByID
     */
    viewProjectContactByID: {
      name: "ViewProjectContactByID",
      I: Identifier,
      O: ProjectContact,
      kind: MethodKind.Unary,
    },
    /**
     * View all contacts for given project UUID
     *
     * @generated from rpc Scailo.ProjectsService.ViewProjectContacts
     */
    viewProjectContacts: {
      name: "ViewProjectContacts",
      I: IdentifierUUID,
      O: ProjectContactsList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.ProjectsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Project,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.ProjectsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: ProjectsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.ProjectsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: ProjectsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.ProjectsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: ProjectsServicePaginationReq,
      O: ProjectsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View Statistics of Project
     *
     * @generated from rpc Scailo.ProjectsService.ViewStatistics
     */
    viewStatistics: {
      name: "ViewStatistics",
      I: Identifier,
      O: ProjectStatistics,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.ProjectsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: ProjectsServiceSearchAllReq,
      O: ProjectsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.ProjectsService.Filter
     */
    filter: {
      name: "Filter",
      I: ProjectsServiceFilterReq,
      O: ProjectsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.ProjectsService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.ProjectsService.Count
     */
    count: {
      name: "Count",
      I: ProjectsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

