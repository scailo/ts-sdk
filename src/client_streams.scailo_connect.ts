// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file client_streams.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ClientStream, ClientStreamClientSubscriber, ClientStreamClientSubscribersList, ClientStreamInternalSubscriber, ClientStreamInternalSubscribersList, ClientStreamMessage, ClientStreamMessageReceiptsList, ClientStreamMessagesList, ClientStreamMessagesSearchRequest, ClientStreamsList, ClientStreamsServiceClientSubscriberCreateRequest, ClientStreamsServiceCountReq, ClientStreamsServiceCreateRequest, ClientStreamsServiceFilterReq, ClientStreamsServiceImportInternalSubscribersRequest, ClientStreamsServiceInternalSubscriberCreateRequest, ClientStreamsServiceMessageCreateRequest, ClientStreamsServicePaginatedMessagesResponse, ClientStreamsServicePaginationReq, ClientStreamsServicePaginationResponse, ClientStreamsServiceSearchAllReq, ClientStreamsServiceUpdateRequest } from "./client_streams.scailo_pb.js";
import { ActiveStatus, CountResponse, Identifier, IdentifierResponse, IdentifierUUID, IdentifierUUIDWithUserComment, IdentifierWithUserComment } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each client stream
 *
 * @generated from service Scailo.ClientStreamsService
 */
export const ClientStreamsService = {
  typeName: "Scailo.ClientStreamsService",
  methods: {
    /**
     * Create
     *
     * @generated from rpc Scailo.ClientStreamsService.Create
     */
    create: {
      name: "Create",
      I: ClientStreamsServiceCreateRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Update
     *
     * @generated from rpc Scailo.ClientStreamsService.Update
     */
    update: {
      name: "Update",
      I: ClientStreamsServiceUpdateRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Cancel
     *
     * @generated from rpc Scailo.ClientStreamsService.Cancel
     */
    cancel: {
      name: "Cancel",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.ClientStreamsService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.ClientStreamsService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.ClientStreamsService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail(IdentifierWithEmailAttributes) returns (IdentifierUUID);
     *
     * @generated from rpc Scailo.ClientStreamsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Add a message to an client stream
     *
     * @generated from rpc Scailo.ClientStreamsService.AddMessage
     */
    addMessage: {
      name: "AddMessage",
      I: ClientStreamsServiceMessageCreateRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Saves a message for viewing it later
     *
     * @generated from rpc Scailo.ClientStreamsService.SaveMessageForLater
     */
    saveMessageForLater: {
      name: "SaveMessageForLater",
      I: IdentifierUUID,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a message in an client stream
     *
     * @generated from rpc Scailo.ClientStreamsService.DeleteMessage
     */
    deleteMessage: {
      name: "DeleteMessage",
      I: IdentifierUUID,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * View Client Stream Message by UUID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewMessageByUUID
     */
    viewMessageByUUID: {
      name: "ViewMessageByUUID",
      I: IdentifierUUID,
      O: ClientStreamMessage,
      kind: MethodKind.Unary,
    },
    /**
     * View all messages for given client stream UUID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewMessages
     */
    viewMessages: {
      name: "ViewMessages",
      I: IdentifierUUID,
      O: ClientStreamMessagesList,
      kind: MethodKind.Unary,
    },
    /**
     * View client stream messages for given client stream ID with pagination
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewPaginatedMessages
     */
    viewPaginatedMessages: {
      name: "ViewPaginatedMessages",
      I: ClientStreamMessagesSearchRequest,
      O: ClientStreamsServicePaginatedMessagesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through client stream messages with pagination
     *
     * @generated from rpc Scailo.ClientStreamsService.SearchMessagesWithPagination
     */
    searchMessagesWithPagination: {
      name: "SearchMessagesWithPagination",
      I: ClientStreamMessagesSearchRequest,
      O: ClientStreamsServicePaginatedMessagesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all receipts for the given message UUID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewMessageReceipts
     */
    viewMessageReceipts: {
      name: "ViewMessageReceipts",
      I: IdentifierUUID,
      O: ClientStreamMessageReceiptsList,
      kind: MethodKind.Unary,
    },
    /**
     * Add an internal subscriber
     *
     * @generated from rpc Scailo.ClientStreamsService.AddInternalSubscriber
     */
    addInternalSubscriber: {
      name: "AddInternalSubscriber",
      I: ClientStreamsServiceInternalSubscriberCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an internal subscriber
     *
     * @generated from rpc Scailo.ClientStreamsService.DeleteInternalSubscriber
     */
    deleteInternalSubscriber: {
      name: "DeleteInternalSubscriber",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View an internal subscriber for the given ID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewInternalSubscriberByID
     */
    viewInternalSubscriberByID: {
      name: "ViewInternalSubscriberByID",
      I: Identifier,
      O: ClientStreamInternalSubscriber,
      kind: MethodKind.Unary,
    },
    /**
     * View all internal subscribers for given client stream UUID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewInternalSubscribers
     */
    viewInternalSubscribers: {
      name: "ViewInternalSubscribers",
      I: IdentifierUUID,
      O: ClientStreamInternalSubscribersList,
      kind: MethodKind.Unary,
    },
    /**
     * Import users as internal subscribers from team and returns the ID of the client stream
     *
     * @generated from rpc Scailo.ClientStreamsService.ImportInternalSubscribersFromTeam
     */
    importInternalSubscribersFromTeam: {
      name: "ImportInternalSubscribersFromTeam",
      I: ClientStreamsServiceImportInternalSubscribersRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Import users as internal subscribers from department and returns the ID of the client stream
     *
     * @generated from rpc Scailo.ClientStreamsService.ImportInternalSubscribersFromDepartment
     */
    importInternalSubscribersFromDepartment: {
      name: "ImportInternalSubscribersFromDepartment",
      I: ClientStreamsServiceImportInternalSubscribersRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add a client subscriber
     *
     * @generated from rpc Scailo.ClientStreamsService.AddClientSubscriber
     */
    addClientSubscriber: {
      name: "AddClientSubscriber",
      I: ClientStreamsServiceClientSubscriberCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a client subscriber
     *
     * @generated from rpc Scailo.ClientStreamsService.DeleteClientSubscriber
     */
    deleteClientSubscriber: {
      name: "DeleteClientSubscriber",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View client subscriber for the given ID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewClientSubscriberByID
     */
    viewClientSubscriberByID: {
      name: "ViewClientSubscriberByID",
      I: Identifier,
      O: ClientStreamClientSubscriber,
      kind: MethodKind.Unary,
    },
    /**
     * View all client subscribers for given client stream UUID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewClientSubscribers
     */
    viewClientSubscribers: {
      name: "ViewClientSubscribers",
      I: IdentifierUUID,
      O: ClientStreamClientSubscribersList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: ClientStream,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: ClientStream,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: ClientStreamsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: ClientStreamsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.ClientStreamsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: ClientStreamsServicePaginationReq,
      O: ClientStreamsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.ClientStreamsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: ClientStreamsServiceSearchAllReq,
      O: ClientStreamsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.ClientStreamsService.Filter
     */
    filter: {
      name: "Filter",
      I: ClientStreamsServiceFilterReq,
      O: ClientStreamsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.ClientStreamsService.Count
     */
    count: {
      name: "Count",
      I: ClientStreamsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

