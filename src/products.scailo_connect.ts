// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file products.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Product, ProductsList, ProductsServiceCountReq, ProductsServiceCreateRequest, ProductsServiceFilterReq, ProductsServicePaginationReq, ProductsServicePaginationResponse, ProductsServiceSearchAllReq, ProductsServiceSendToStoreRequest, ProductsServiceUpdateRequest } from "./products.scailo_pb.js";
import { ActiveStatus, CountResponse, Identifier, IdentifierUUID, IdentifierWithUserComment, InventoryInteractionsList, InventoryPartitionRequest, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each product
 *
 * @generated from service Scailo.ProductsService
 */
export const ProductsService = {
  typeName: "Scailo.ProductsService",
  methods: {
    /**
     * Create (and Send for QC)
     *
     * @generated from rpc Scailo.ProductsService.Create
     */
    create: {
      name: "Create",
      I: ProductsServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send to Store
     *
     * @generated from rpc Scailo.ProductsService.SendToStore
     */
    sendToStore: {
      name: "SendToStore",
      I: ProductsServiceSendToStoreRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update
     *
     * @generated from rpc Scailo.ProductsService.Update
     */
    update: {
      name: "Update",
      I: ProductsServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send for Rework
     *
     * @generated from rpc Scailo.ProductsService.SendForRework
     */
    sendForRework: {
      name: "SendForRework",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send for QC
     *
     * @generated from rpc Scailo.ProductsService.SendForQC
     */
    sendForQC: {
      name: "SendForQC",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Split into unit quantities
     *
     * @generated from rpc Scailo.ProductsService.SplitLot
     */
    splitLot: {
      name: "SplitLot",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Create a partition from the parent lot (and returns the identifier of the new partition)
     *
     * @generated from rpc Scailo.ProductsService.Partition
     */
    partition: {
      name: "Partition",
      I: InventoryPartitionRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Consume
     *
     * @generated from rpc Scailo.ProductsService.Consume
     */
    consume: {
      name: "Consume",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Reject
     *
     * @generated from rpc Scailo.ProductsService.Reject
     */
    reject: {
      name: "Reject",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Scrap
     *
     * @generated from rpc Scailo.ProductsService.Scrap
     */
    scrap: {
      name: "Scrap",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.ProductsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.ProductsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.ProductsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Product,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.ProductsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: Product,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.ProductsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: ProductsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.ProductsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: ProductsServicePaginationReq,
      O: ProductsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Download QC Report with the given Identifier
     *
     * @generated from rpc Scailo.ProductsService.DownloadQCReportByID
     */
    downloadQCReportByID: {
      name: "DownloadQCReportByID",
      I: Identifier,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download QC Report with the given IdentifierUUID (can be used to allow public downloads)
     *
     * @generated from rpc Scailo.ProductsService.DownloadQCReportByUUID
     */
    downloadQCReportByUUID: {
      name: "DownloadQCReportByUUID",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download Label for the given Identifier
     *
     * @generated from rpc Scailo.ProductsService.DownloadLabelByID
     */
    downloadLabelByID: {
      name: "DownloadLabelByID",
      I: Identifier,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download Label for the given IdentifierUUID (can be used to allow public downloads)
     *
     * @generated from rpc Scailo.ProductsService.DownloadLabelByUUID
     */
    downloadLabelByUUID: {
      name: "DownloadLabelByUUID",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * View all inventory interactions for product with the given IdentifierUUID
     *
     * @generated from rpc Scailo.ProductsService.ViewInventoryInteractions
     */
    viewInventoryInteractions: {
      name: "ViewInventoryInteractions",
      I: IdentifierUUID,
      O: InventoryInteractionsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.ProductsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: ProductsServiceSearchAllReq,
      O: ProductsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.ProductsService.Filter
     */
    filter: {
      name: "Filter",
      I: ProductsServiceFilterReq,
      O: ProductsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.ProductsService.Count
     */
    count: {
      name: "Count",
      I: ProductsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

