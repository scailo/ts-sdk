// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file users.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.USER_SORT_KEY
 */
export enum USER_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: USER_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  USER_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: USER_SORT_KEY_CREATED_AT = 1;
   */
  USER_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: USER_SORT_KEY_MODIFIED_AT = 2;
   */
  USER_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: USER_SORT_KEY_APPROVED_ON = 3;
   */
  USER_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: USER_SORT_KEY_APPROVED_BY = 4;
   */
  USER_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: USER_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  USER_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the username
   *
   * @generated from enum value: USER_SORT_KEY_USERNAME = 10;
   */
  USER_SORT_KEY_USERNAME = 10,

  /**
   * Fetch ordered results by the name
   *
   * @generated from enum value: USER_SORT_KEY_NAME = 11;
   */
  USER_SORT_KEY_NAME = 11,

  /**
   * Fetch ordered results by the code
   *
   * @generated from enum value: USER_SORT_KEY_CODE = 12;
   */
  USER_SORT_KEY_CODE = 12,

  /**
   * Fetch ordered results by the email address
   *
   * @generated from enum value: USER_SORT_KEY_EMAIL = 13;
   */
  USER_SORT_KEY_EMAIL = 13,

  /**
   * Fetch ordered results by the phone number
   *
   * @generated from enum value: USER_SORT_KEY_PHONE = 14;
   */
  USER_SORT_KEY_PHONE = 14,
}
// Retrieve enum metadata with: proto3.getEnumType(USER_SORT_KEY)
proto3.util.setEnumType(USER_SORT_KEY, "Scailo.USER_SORT_KEY", [
  { no: 0, name: "USER_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "USER_SORT_KEY_CREATED_AT" },
  { no: 2, name: "USER_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "USER_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "USER_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "USER_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "USER_SORT_KEY_USERNAME" },
  { no: 11, name: "USER_SORT_KEY_NAME" },
  { no: 12, name: "USER_SORT_KEY_CODE" },
  { no: 13, name: "USER_SORT_KEY_EMAIL" },
  { no: 14, name: "USER_SORT_KEY_PHONE" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.UsersServiceCreateRequest
 */
export class UsersServiceCreateRequest extends Message<UsersServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The username of the user
   *
   * @generated from field: string username = 10;
   */
  username = "";

  /**
   * The unique employee code by which the user is classified
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The name of the user
   *
   * @generated from field: string name = 12;
   */
  name = "";

  /**
   * The plain text password using which the user can login
   *
   * @generated from field: string plain_text_password = 13;
   */
  plainTextPassword = "";

  /**
   * The associated role ID
   *
   * @generated from field: uint64 role_id = 14;
   */
  roleId = protoInt64.zero;

  /**
   * The associated mobile role ID
   *
   * @generated from field: uint64 mobile_role_id = 15;
   */
  mobileRoleId = protoInt64.zero;

  /**
   * The primary email of the user
   *
   * @generated from field: string email = 16;
   */
  email = "";

  /**
   * The optional work email of the user
   *
   * @generated from field: string work_email = 17;
   */
  workEmail = "";

  /**
   * The primary contact number of the user
   *
   * @generated from field: string phone = 18;
   */
  phone = "";

  /**
   * The birthday of the user
   *
   * @generated from field: string birthday = 30;
   */
  birthday = "";

  /**
   * The joining date of the user
   *
   * @generated from field: string joining_date = 31;
   */
  joiningDate = "";

  /**
   * The address of the user
   *
   * @generated from field: string address = 32;
   */
  address = "";

  /**
   * The city of residence
   *
   * @generated from field: string city = 33;
   */
  city = "";

  /**
   * The state of residence
   *
   * @generated from field: string state = 34;
   */
  state = "";

  /**
   * The country of residence
   *
   * @generated from field: string country = 35;
   */
  country = "";

  /**
   * THe PIN Code of residence
   *
   * @generated from field: string pin_code = 36;
   */
  pinCode = "";

  /**
   * THe Blood Group of the user
   *
   * @generated from field: string blood_group = 37;
   */
  bloodGroup = "";

  /**
   * The associated shift group ID
   *
   * @generated from field: uint64 shift_group_id = 50;
   */
  shiftGroupId = protoInt64.zero;

  /**
   * The associated unit of material of the user's attendance record
   *
   * @generated from field: uint64 attendance_uom_id = 51;
   */
  attendanceUomId = protoInt64.zero;

  /**
   * The associated department (can be 0 to allow seamless transition)
   *
   * @generated from field: uint64 department_id = 52;
   */
  departmentId = protoInt64.zero;

  /**
   * The associated payroll group ID of the user
   *
   * @generated from field: uint64 payroll_group_id = 53;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The associated tax group ID using which the user's payroll needs to be calculated
   *
   * @generated from field: uint64 payroll_tax_group_id = 54;
   */
  payrollTaxGroupId = protoInt64.zero;

  /**
   * The associated currency ID of the user's payroll
   *
   * @generated from field: uint64 payroll_currency_id = 55;
   */
  payrollCurrencyId = protoInt64.zero;

  /**
   * The basic pay amount of the user (in cents)
   *
   * @generated from field: uint64 basic_pay_amount = 56;
   */
  basicPayAmount = protoInt64.zero;

  /**
   * The associated unit of material for storing the basic pay amount
   *
   * @generated from field: uint64 basic_pay_uom_id = 57;
   */
  basicPayUomId = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 70;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<UsersServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UsersServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "plain_text_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "mobile_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "work_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "birthday", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "joining_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 32, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 33, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 34, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 35, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 36, name: "pin_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 37, name: "blood_group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "shift_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "attendance_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "department_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 53, name: "payroll_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 54, name: "payroll_tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 55, name: "payroll_currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 56, name: "basic_pay_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 57, name: "basic_pay_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 70, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersServiceCreateRequest {
    return new UsersServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersServiceCreateRequest {
    return new UsersServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersServiceCreateRequest {
    return new UsersServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UsersServiceCreateRequest | PlainMessage<UsersServiceCreateRequest> | undefined, b: UsersServiceCreateRequest | PlainMessage<UsersServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(UsersServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.UsersServiceUpdateRequest
 */
export class UsersServiceUpdateRequest extends Message<UsersServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The unique employee code by which the user is classified
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The name of the user
   *
   * @generated from field: string name = 12;
   */
  name = "";

  /**
   * The associated role ID
   *
   * @generated from field: uint64 role_id = 14;
   */
  roleId = protoInt64.zero;

  /**
   * The associated mobile role ID
   *
   * @generated from field: uint64 mobile_role_id = 15;
   */
  mobileRoleId = protoInt64.zero;

  /**
   * The primary email of the user
   *
   * @generated from field: string email = 16;
   */
  email = "";

  /**
   * The optional work email of the user
   *
   * @generated from field: string work_email = 17;
   */
  workEmail = "";

  /**
   * The primary contact number of the user
   *
   * @generated from field: string phone = 18;
   */
  phone = "";

  /**
   * The birthday of the user
   *
   * @generated from field: string birthday = 30;
   */
  birthday = "";

  /**
   * The joining date of the user
   *
   * @generated from field: string joining_date = 31;
   */
  joiningDate = "";

  /**
   * The address of the user
   *
   * @generated from field: string address = 32;
   */
  address = "";

  /**
   * The city of residence
   *
   * @generated from field: string city = 33;
   */
  city = "";

  /**
   * The state of residence
   *
   * @generated from field: string state = 34;
   */
  state = "";

  /**
   * The country of residence
   *
   * @generated from field: string country = 35;
   */
  country = "";

  /**
   * THe PIN Code of residence
   *
   * @generated from field: string pin_code = 36;
   */
  pinCode = "";

  /**
   * THe Blood Group of the user
   *
   * @generated from field: string blood_group = 37;
   */
  bloodGroup = "";

  /**
   * The associated shift group ID
   *
   * @generated from field: uint64 shift_group_id = 50;
   */
  shiftGroupId = protoInt64.zero;

  /**
   * The associated unit of material of the user's attendance record
   *
   * @generated from field: uint64 attendance_uom_id = 51;
   */
  attendanceUomId = protoInt64.zero;

  /**
   * The associated department (can be 0 to allow seamless transition)
   *
   * @generated from field: uint64 department_id = 52;
   */
  departmentId = protoInt64.zero;

  /**
   * The associated payroll group ID of the user
   *
   * @generated from field: uint64 payroll_group_id = 53;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The associated tax group ID using which the user's payroll needs to be calculated
   *
   * @generated from field: uint64 payroll_tax_group_id = 54;
   */
  payrollTaxGroupId = protoInt64.zero;

  /**
   * The associated currency ID of the user's payroll
   *
   * @generated from field: uint64 payroll_currency_id = 55;
   */
  payrollCurrencyId = protoInt64.zero;

  /**
   * The basic pay amount of the user (in cents)
   *
   * @generated from field: uint64 basic_pay_amount = 56;
   */
  basicPayAmount = protoInt64.zero;

  /**
   * The associated unit of material for storing the basic pay amount
   *
   * @generated from field: uint64 basic_pay_uom_id = 57;
   */
  basicPayUomId = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 70;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<UsersServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UsersServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "mobile_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "work_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "birthday", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "joining_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 32, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 33, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 34, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 35, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 36, name: "pin_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 37, name: "blood_group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "shift_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "attendance_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "department_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 53, name: "payroll_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 54, name: "payroll_tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 55, name: "payroll_currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 56, name: "basic_pay_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 57, name: "basic_pay_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 70, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersServiceUpdateRequest {
    return new UsersServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersServiceUpdateRequest {
    return new UsersServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersServiceUpdateRequest {
    return new UsersServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UsersServiceUpdateRequest | PlainMessage<UsersServiceUpdateRequest> | undefined, b: UsersServiceUpdateRequest | PlainMessage<UsersServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(UsersServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.User
 */
export class User extends Message<User> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this user
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this user
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this user
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The username of the user
   *
   * @generated from field: string username = 10;
   */
  username = "";

  /**
   * The unique employee code by which the user is classified
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The name of the user
   *
   * @generated from field: string name = 12;
   */
  name = "";

  /**
   * The associated role ID
   *
   * @generated from field: uint64 role_id = 14;
   */
  roleId = protoInt64.zero;

  /**
   * The associated mobile role ID
   *
   * @generated from field: uint64 mobile_role_id = 15;
   */
  mobileRoleId = protoInt64.zero;

  /**
   * The primary email of the user
   *
   * @generated from field: string email = 16;
   */
  email = "";

  /**
   * The optional work email of the user
   *
   * @generated from field: string work_email = 17;
   */
  workEmail = "";

  /**
   * The primary contact number of the user
   *
   * @generated from field: string phone = 18;
   */
  phone = "";

  /**
   * The birthday of the user
   *
   * @generated from field: string birthday = 30;
   */
  birthday = "";

  /**
   * The joining date of the user
   *
   * @generated from field: string joining_date = 31;
   */
  joiningDate = "";

  /**
   * The address of the user
   *
   * @generated from field: string address = 32;
   */
  address = "";

  /**
   * The city of residence
   *
   * @generated from field: string city = 33;
   */
  city = "";

  /**
   * The state of residence
   *
   * @generated from field: string state = 34;
   */
  state = "";

  /**
   * The country of residence
   *
   * @generated from field: string country = 35;
   */
  country = "";

  /**
   * THe PIN Code of residence
   *
   * @generated from field: string pin_code = 36;
   */
  pinCode = "";

  /**
   * THe Blood Group of the user
   *
   * @generated from field: string blood_group = 37;
   */
  bloodGroup = "";

  /**
   * The associated shift group ID
   *
   * @generated from field: uint64 shift_group_id = 50;
   */
  shiftGroupId = protoInt64.zero;

  /**
   * The associated unit of material of the user's attendance record
   *
   * @generated from field: uint64 attendance_uom_id = 51;
   */
  attendanceUomId = protoInt64.zero;

  /**
   * The associated department
   *
   * @generated from field: uint64 department_id = 52;
   */
  departmentId = protoInt64.zero;

  /**
   * The associated payroll group ID of the user
   *
   * @generated from field: uint64 payroll_group_id = 53;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The associated tax group ID using which the user's payroll needs to be calculated
   *
   * @generated from field: uint64 payroll_tax_group_id = 54;
   */
  payrollTaxGroupId = protoInt64.zero;

  /**
   * The associated currency ID of the user's payroll
   *
   * @generated from field: uint64 payroll_currency_id = 55;
   */
  payrollCurrencyId = protoInt64.zero;

  /**
   * The basic pay amount of the user (in cents)
   *
   * @generated from field: uint64 basic_pay_amount = 56;
   */
  basicPayAmount = protoInt64.zero;

  /**
   * The associated unit of material for storing the basic pay amount
   *
   * @generated from field: uint64 basic_pay_uom_id = 57;
   */
  basicPayUomId = protoInt64.zero;

  /**
   * Stores if MFA has been enabled by the user
   *
   * @generated from field: bool mfa_status = 60;
   */
  mfaStatus = false;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 70;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "mobile_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "work_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "birthday", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "joining_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 32, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 33, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 34, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 35, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 36, name: "pin_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 37, name: "blood_group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "shift_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "attendance_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "department_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 53, name: "payroll_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 54, name: "payroll_tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 55, name: "payroll_currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 56, name: "basic_pay_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 57, name: "basic_pay_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "mfa_status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 70, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 *
 * Describes the message that is used internally to validate user
 *
 * @generated from message Scailo.UserPrimaryInfo
 */
export class UserPrimaryInfo extends Message<UserPrimaryInfo> {
  /**
   * The username of the user
   *
   * @generated from field: string username = 10;
   */
  username = "";

  /**
   * The name of the user
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * Stores the hashed password
   *
   * @generated from field: bytes password = 12;
   */
  password = new Uint8Array(0);

  /**
   * The associated role ID
   *
   * @generated from field: uint64 role_id = 13;
   */
  roleId = protoInt64.zero;

  /**
   * The associated mobile role ID
   *
   * @generated from field: uint64 mobile_role_id = 14;
   */
  mobileRoleId = protoInt64.zero;

  /**
   * Stores if MFA has been enabled by the user
   *
   * @generated from field: bool mfa_status = 15;
   */
  mfaStatus = false;

  /**
   * Stores the MFA secret
   *
   * @generated from field: bytes mfa_secret = 16;
   */
  mfaSecret = new Uint8Array(0);

  /**
   * THe Blood Group of the user
   *
   * @generated from field: string blood_group = 20;
   */
  bloodGroup = "";

  constructor(data?: PartialMessage<UserPrimaryInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UserPrimaryInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "password", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 13, name: "role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "mobile_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "mfa_status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "mfa_secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 20, name: "blood_group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPrimaryInfo {
    return new UserPrimaryInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPrimaryInfo {
    return new UserPrimaryInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPrimaryInfo {
    return new UserPrimaryInfo().fromJsonString(jsonString, options);
  }

  static equals(a: UserPrimaryInfo | PlainMessage<UserPrimaryInfo> | undefined, b: UserPrimaryInfo | PlainMessage<UserPrimaryInfo> | undefined): boolean {
    return proto3.util.equals(UserPrimaryInfo, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.UsersList
 */
export class UsersList extends Message<UsersList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.User list = 1;
   */
  list: User[] = [];

  constructor(data?: PartialMessage<UsersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UsersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersList {
    return new UsersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersList {
    return new UsersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersList {
    return new UsersList().fromJsonString(jsonString, options);
  }

  static equals(a: UsersList | PlainMessage<UsersList> | undefined, b: UsersList | PlainMessage<UsersList> | undefined): boolean {
    return proto3.util.equals(UsersList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.UsersServicePaginationReq
 */
export class UsersServicePaginationReq extends Message<UsersServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.USER_SORT_KEY sort_key = 5;
   */
  sortKey = USER_SORT_KEY.USER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this user
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<UsersServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UsersServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(USER_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersServicePaginationReq {
    return new UsersServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersServicePaginationReq {
    return new UsersServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersServicePaginationReq {
    return new UsersServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: UsersServicePaginationReq | PlainMessage<UsersServicePaginationReq> | undefined, b: UsersServicePaginationReq | PlainMessage<UsersServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(UsersServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.UsersServicePaginationResponse
 */
export class UsersServicePaginationResponse extends Message<UsersServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.User payload = 4;
   */
  payload: User[] = [];

  constructor(data?: PartialMessage<UsersServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UsersServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersServicePaginationResponse {
    return new UsersServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersServicePaginationResponse {
    return new UsersServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersServicePaginationResponse {
    return new UsersServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UsersServicePaginationResponse | PlainMessage<UsersServicePaginationResponse> | undefined, b: UsersServicePaginationResponse | PlainMessage<UsersServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(UsersServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.UsersServiceFilterReq
 */
export class UsersServiceFilterReq extends Message<UsersServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.USER_SORT_KEY sort_key = 5;
   */
  sortKey = USER_SORT_KEY.USER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this user
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The username of the user
   *
   * @generated from field: string username = 20;
   */
  username = "";

  /**
   * The name of the user
   *
   * @generated from field: string name = 21;
   */
  name = "";

  /**
   * The unique code by which the user is classified
   *
   * @generated from field: string code = 22;
   */
  code = "";

  /**
   * The primary email of the user
   *
   * @generated from field: string email = 23;
   */
  email = "";

  /**
   * The primary contact number of the user
   *
   * @generated from field: string phone = 24;
   */
  phone = "";

  /**
   * The associated role ID
   *
   * @generated from field: uint64 role_id = 25;
   */
  roleId = protoInt64.zero;

  /**
   * The associated shift group ID
   *
   * @generated from field: uint64 shift_group_id = 26;
   */
  shiftGroupId = protoInt64.zero;

  /**
   * The associated unit of material of the user's attendance record
   *
   * @generated from field: uint64 attendance_uom_id = 27;
   */
  attendanceUomId = protoInt64.zero;

  /**
   * The associated department
   *
   * @generated from field: uint64 department_id = 28;
   */
  departmentId = protoInt64.zero;

  /**
   * The associated payroll group ID of the user
   *
   * @generated from field: uint64 payroll_group_id = 29;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The associated tax group ID using which the user's payroll needs to be calculated
   *
   * @generated from field: uint64 payroll_tax_group_id = 30;
   */
  payrollTaxGroupId = protoInt64.zero;

  /**
   * The associated currency ID of the user's payroll
   *
   * @generated from field: uint64 payroll_currency_id = 31;
   */
  payrollCurrencyId = protoInt64.zero;

  /**
   * The associated unit of material for storing the basic pay amount
   *
   * @generated from field: uint64 basic_pay_uom_id = 32;
   */
  basicPayUomId = protoInt64.zero;

  /**
   * The optional work email of the user
   *
   * @generated from field: string work_email = 33;
   */
  workEmail = "";

  constructor(data?: PartialMessage<UsersServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UsersServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(USER_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "shift_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "attendance_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "department_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 29, name: "payroll_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "payroll_tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 31, name: "payroll_currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 32, name: "basic_pay_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 33, name: "work_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersServiceFilterReq {
    return new UsersServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersServiceFilterReq {
    return new UsersServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersServiceFilterReq {
    return new UsersServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: UsersServiceFilterReq | PlainMessage<UsersServiceFilterReq> | undefined, b: UsersServiceFilterReq | PlainMessage<UsersServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(UsersServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.UsersServiceCountReq
 */
export class UsersServiceCountReq extends Message<UsersServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this user
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The username of the user
   *
   * @generated from field: string username = 20;
   */
  username = "";

  /**
   * The name of the user
   *
   * @generated from field: string name = 21;
   */
  name = "";

  /**
   * The unique code by which the user is classified
   *
   * @generated from field: string code = 22;
   */
  code = "";

  /**
   * The primary email of the user
   *
   * @generated from field: string email = 23;
   */
  email = "";

  /**
   * The primary contact number of the user
   *
   * @generated from field: string phone = 24;
   */
  phone = "";

  /**
   * The associated role ID
   *
   * @generated from field: uint64 role_id = 25;
   */
  roleId = protoInt64.zero;

  /**
   * The associated shift group ID
   *
   * @generated from field: uint64 shift_group_id = 26;
   */
  shiftGroupId = protoInt64.zero;

  /**
   * The associated unit of material of the user's attendance record
   *
   * @generated from field: uint64 attendance_uom_id = 27;
   */
  attendanceUomId = protoInt64.zero;

  /**
   * The associated department
   *
   * @generated from field: uint64 department_id = 28;
   */
  departmentId = protoInt64.zero;

  /**
   * The associated payroll group ID of the user
   *
   * @generated from field: uint64 payroll_group_id = 29;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The associated tax group ID using which the user's payroll needs to be calculated
   *
   * @generated from field: uint64 payroll_tax_group_id = 30;
   */
  payrollTaxGroupId = protoInt64.zero;

  /**
   * The associated currency ID of the user's payroll
   *
   * @generated from field: uint64 payroll_currency_id = 31;
   */
  payrollCurrencyId = protoInt64.zero;

  /**
   * The associated unit of material for storing the basic pay amount
   *
   * @generated from field: uint64 basic_pay_uom_id = 32;
   */
  basicPayUomId = protoInt64.zero;

  /**
   * The optional work email of the user
   *
   * @generated from field: string work_email = 33;
   */
  workEmail = "";

  constructor(data?: PartialMessage<UsersServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UsersServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "shift_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "attendance_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "department_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 29, name: "payroll_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "payroll_tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 31, name: "payroll_currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 32, name: "basic_pay_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 33, name: "work_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersServiceCountReq {
    return new UsersServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersServiceCountReq {
    return new UsersServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersServiceCountReq {
    return new UsersServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: UsersServiceCountReq | PlainMessage<UsersServiceCountReq> | undefined, b: UsersServiceCountReq | PlainMessage<UsersServiceCountReq> | undefined): boolean {
    return proto3.util.equals(UsersServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.UsersServiceSearchAllReq
 */
export class UsersServiceSearchAllReq extends Message<UsersServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.USER_SORT_KEY sort_key = 5;
   */
  sortKey = USER_SORT_KEY.USER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<UsersServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UsersServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(USER_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersServiceSearchAllReq {
    return new UsersServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersServiceSearchAllReq {
    return new UsersServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersServiceSearchAllReq {
    return new UsersServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: UsersServiceSearchAllReq | PlainMessage<UsersServiceSearchAllReq> | undefined, b: UsersServiceSearchAllReq | PlainMessage<UsersServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(UsersServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the message that is required to register a user's device
 *
 * @generated from message Scailo.UsersServiceRegisterMobileDeviceRequest
 */
export class UsersServiceRegisterMobileDeviceRequest extends Message<UsersServiceRegisterMobileDeviceRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * The ID of the user who has possession of the device
   *
   * @generated from field: uint64 user_id = 11;
   */
  userId = protoInt64.zero;

  /**
   * The operating system of the device
   *
   * @generated from field: string device_os = 12;
   */
  deviceOs = "";

  /**
   * The generated FCM Token
   *
   * @generated from field: string device_token = 13;
   */
  deviceToken = "";

  constructor(data?: PartialMessage<UsersServiceRegisterMobileDeviceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.UsersServiceRegisterMobileDeviceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "device_os", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "device_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersServiceRegisterMobileDeviceRequest {
    return new UsersServiceRegisterMobileDeviceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersServiceRegisterMobileDeviceRequest {
    return new UsersServiceRegisterMobileDeviceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersServiceRegisterMobileDeviceRequest {
    return new UsersServiceRegisterMobileDeviceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UsersServiceRegisterMobileDeviceRequest | PlainMessage<UsersServiceRegisterMobileDeviceRequest> | undefined, b: UsersServiceRegisterMobileDeviceRequest | PlainMessage<UsersServiceRegisterMobileDeviceRequest> | undefined): boolean {
    return proto3.util.equals(UsersServiceRegisterMobileDeviceRequest, a, b);
  }
}

