// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file stock_audits.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { StockAudit, StockAuditItem, StockAuditItemHistoryRequest, StockAuditItemProspectiveInfoRequest, StockAuditItemsSearchRequest, StockAuditsItemsList, StockAuditsList, StockAuditsServiceCountReq, StockAuditsServiceCreateRequest, StockAuditsServiceFilterReq, StockAuditsServiceItemCreateRequest, StockAuditsServiceItemUpdateRequest, StockAuditsServicePaginatedItemsResponse, StockAuditsServicePaginationReq, StockAuditsServicePaginationResponse, StockAuditsServiceSearchAllReq, StockAuditsServiceUpdateRequest } from "./stock_audits.scailo_pb.js";
import { ActiveStatus, BooleanResponse, CountInSLCStatusRequest, CountResponse, Empty, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDWithFile, IdentifierUUIDWithUserComment, IdentifierWithEmailAttributes, IdentifierWithSearchKey, IdentifierWithUserComment, ReorderItemsRequest, SimpleSearchReq, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { MagicLink, MagicLinksServiceCreateRequestForSpecificResource } from "./magic_links.scailo_pb.js";
import { FamiliesList, FilterFamiliesReqForIdentifier } from "./families.scailo_pb.js";

/**
 *
 * Describes the common methods applicable on each stock audit
 *
 * @generated from service Scailo.StockAuditsService
 */
export const StockAuditsService = {
  typeName: "Scailo.StockAuditsService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.StockAuditsService.Create
     */
    create: {
      name: "Create",
      I: StockAuditsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.StockAuditsService.Draft
     */
    draft: {
      name: "Draft",
      I: StockAuditsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.StockAuditsService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: StockAuditsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.StockAuditsService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.StockAuditsService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.StockAuditsService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.StockAuditsService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.StockAuditsService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: StockAuditsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.StockAuditsService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.StockAuditsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.StockAuditsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.StockAuditsService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.StockAuditsService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.StockAuditsService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.StockAuditsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send Email
     *
     * @generated from rpc Scailo.StockAuditsService.SendEmail
     */
    sendEmail: {
      name: "SendEmail",
      I: IdentifierWithEmailAttributes,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create a magic link
     *
     * @generated from rpc Scailo.StockAuditsService.CreateMagicLink
     */
    createMagicLink: {
      name: "CreateMagicLink",
      I: MagicLinksServiceCreateRequestForSpecificResource,
      O: MagicLink,
      kind: MethodKind.Unary,
    },
    /**
     * Checks if the Stock Audit can be marked as completed
     *
     * @generated from rpc Scailo.StockAuditsService.IsCompletable
     */
    isCompletable: {
      name: "IsCompletable",
      I: IdentifierUUID,
      O: BooleanResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an item to a stock audit
     *
     * @generated from rpc Scailo.StockAuditsService.AddStockAuditItem
     */
    addStockAuditItem: {
      name: "AddStockAuditItem",
      I: StockAuditsServiceItemCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an item in a stock audit
     *
     * @generated from rpc Scailo.StockAuditsService.ModifyStockAuditItem
     */
    modifyStockAuditItem: {
      name: "ModifyStockAuditItem",
      I: StockAuditsServiceItemUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve an item in a stock audit
     *
     * @generated from rpc Scailo.StockAuditsService.ApproveStockAuditItem
     */
    approveStockAuditItem: {
      name: "ApproveStockAuditItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an item in a stock audit
     *
     * @generated from rpc Scailo.StockAuditsService.DeleteStockAuditItem
     */
    deleteStockAuditItem: {
      name: "DeleteStockAuditItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder items in a stock audit
     *
     * @generated from rpc Scailo.StockAuditsService.ReorderStockAuditItems
     */
    reorderStockAuditItems: {
      name: "ReorderStockAuditItems",
      I: ReorderItemsRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View Stock Audit Item by ID
     *
     * @generated from rpc Scailo.StockAuditsService.ViewStockAuditItemByID
     */
    viewStockAuditItemByID: {
      name: "ViewStockAuditItemByID",
      I: Identifier,
      O: StockAuditItem,
      kind: MethodKind.Unary,
    },
    /**
     * View Stock Audit Item by Inventory Hash
     *
     * @generated from rpc Scailo.StockAuditsService.ViewStockAuditItemByInventoryHash
     */
    viewStockAuditItemByInventoryHash: {
      name: "ViewStockAuditItemByInventoryHash",
      I: SimpleSearchReq,
      O: StockAuditItem,
      kind: MethodKind.Unary,
    },
    /**
     * View approved stock audit items for given stock audit ID
     *
     * @generated from rpc Scailo.StockAuditsService.ViewApprovedStockAuditItems
     */
    viewApprovedStockAuditItems: {
      name: "ViewApprovedStockAuditItems",
      I: IdentifierWithSearchKey,
      O: StockAuditsItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved stock audit items for given stock audit ID
     *
     * @generated from rpc Scailo.StockAuditsService.ViewUnapprovedStockAuditItems
     */
    viewUnapprovedStockAuditItems: {
      name: "ViewUnapprovedStockAuditItems",
      I: IdentifierWithSearchKey,
      O: StockAuditsItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the stock audit item
     *
     * @generated from rpc Scailo.StockAuditsService.ViewStockAuditItemHistory
     */
    viewStockAuditItemHistory: {
      name: "ViewStockAuditItemHistory",
      I: StockAuditItemHistoryRequest,
      O: StockAuditsItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View approved stock audit items for given stock audit ID with pagination
     *
     * @generated from rpc Scailo.StockAuditsService.ViewPaginatedApprovedStockAuditItems
     */
    viewPaginatedApprovedStockAuditItems: {
      name: "ViewPaginatedApprovedStockAuditItems",
      I: StockAuditItemsSearchRequest,
      O: StockAuditsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved stock audit items for given stock audit ID with pagination
     *
     * @generated from rpc Scailo.StockAuditsService.ViewPaginatedUnapprovedStockAuditItems
     */
    viewPaginatedUnapprovedStockAuditItems: {
      name: "ViewPaginatedUnapprovedStockAuditItems",
      I: StockAuditItemsSearchRequest,
      O: StockAuditsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through stock audit items with pagination
     *
     * @generated from rpc Scailo.StockAuditsService.SearchItemsWithPagination
     */
    searchItemsWithPagination: {
      name: "SearchItemsWithPagination",
      I: StockAuditItemsSearchRequest,
      O: StockAuditsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file with the associated line items. The same file could then be used to upload line items.
     *
     * @generated from rpc Scailo.StockAuditsService.DownloadItemsAsCSV
     */
    downloadItemsAsCSV: {
      name: "DownloadItemsAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download the CSV template that could be used to upload items
     *
     * @generated from rpc Scailo.StockAuditsService.DownloadItemsTemplateAsCSV
     */
    downloadItemsTemplateAsCSV: {
      name: "DownloadItemsTemplateAsCSV",
      I: Empty,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
     *
     * @generated from rpc Scailo.StockAuditsService.UploadStockAuditItems
     */
    uploadStockAuditItems: {
      name: "UploadStockAuditItems",
      I: IdentifierUUIDWithFile,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.StockAuditsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: StockAudit,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.StockAuditsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: StockAudit,
      kind: MethodKind.Unary,
    },
    /**
     * View by Reference ID (returns the latest record in case of duplicates)
     *
     * @generated from rpc Scailo.StockAuditsService.ViewByReferenceID
     */
    viewByReferenceID: {
      name: "ViewByReferenceID",
      I: SimpleSearchReq,
      O: StockAudit,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components by ID (without logs)
     *
     * @generated from rpc Scailo.StockAuditsService.ViewEssentialByID
     */
    viewEssentialByID: {
      name: "ViewEssentialByID",
      I: Identifier,
      O: StockAudit,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components (without logs) that matches the given UUID
     *
     * @generated from rpc Scailo.StockAuditsService.ViewEssentialByUUID
     */
    viewEssentialByUUID: {
      name: "ViewEssentialByUUID",
      I: IdentifierUUID,
      O: StockAudit,
      kind: MethodKind.Unary,
    },
    /**
     * View all records with the given IDs
     *
     * @generated from rpc Scailo.StockAuditsService.ViewFromIDs
     */
    viewFromIDs: {
      name: "ViewFromIDs",
      I: IdentifiersList,
      O: StockAuditsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.StockAuditsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: StockAuditsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.StockAuditsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: StockAuditsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.StockAuditsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: StockAuditsServicePaginationReq,
      O: StockAuditsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View prospective families for the given stock audit
     *
     * @generated from rpc Scailo.StockAuditsService.ViewProspectiveFamilies
     */
    viewProspectiveFamilies: {
      name: "ViewProspectiveFamilies",
      I: IdentifierWithSearchKey,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * Filter prospective families for the record represented by the given UUID identifier
     *
     * @generated from rpc Scailo.StockAuditsService.FilterProspectiveFamilies
     */
    filterProspectiveFamilies: {
      name: "FilterProspectiveFamilies",
      I: FilterFamiliesReqForIdentifier,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View prospective stock audit item info for the given family ID and stock audit ID
     *
     * @generated from rpc Scailo.StockAuditsService.ViewProspectiveStockAuditItem
     */
    viewProspectiveStockAuditItem: {
      name: "ViewProspectiveStockAuditItem",
      I: StockAuditItemProspectiveInfoRequest,
      O: StockAuditsServiceItemCreateRequest,
      kind: MethodKind.Unary,
    },
    /**
     * Download the label for the stock audit with the given IdentifierUUID
     *
     * @generated from rpc Scailo.StockAuditsService.DownloadLabelByUUID
     */
    downloadLabelByUUID: {
      name: "DownloadLabelByUUID",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download stock audit with the given IdentifierUUID (can be used to allow public downloads)
     *
     * @generated from rpc Scailo.StockAuditsService.DownloadByUUID
     */
    downloadByUUID: {
      name: "DownloadByUUID",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.StockAuditsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: StockAuditsServiceSearchAllReq,
      O: StockAuditsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.StockAuditsService.Filter
     */
    filter: {
      name: "Filter",
      I: StockAuditsServiceFilterReq,
      O: StockAuditsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.StockAuditsService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.StockAuditsService.Count
     */
    count: {
      name: "Count",
      I: StockAuditsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
     *
     * @generated from rpc Scailo.StockAuditsService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: StockAuditsServiceFilterReq,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
  }
} as const;

