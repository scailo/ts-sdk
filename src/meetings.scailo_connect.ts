// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file meetings.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Meeting, MeetingActionable, MeetingActionableHistoryRequest, MeetingActionablesList, MeetingActionablesSearchRequest, MeetingAssociate, MeetingAssociatesList, MeetingEmployee, MeetingEmployeesList, MeetingsList, MeetingsServiceActionableCreateRequest, MeetingsServiceActionableUpdateRequest, MeetingsServiceAssociateCreateRequest, MeetingsServiceCountReq, MeetingsServiceCreateRequest, MeetingsServiceEmployeeCreateRequest, MeetingsServiceFilterReq, MeetingsServiceImportEmployeesRequest, MeetingsServicePaginatedActionablesResponse, MeetingsServicePaginationReq, MeetingsServicePaginationResponse, MeetingsServiceSearchAllReq, MeetingsServiceSetRSVPRequest, MeetingsServiceUpdateRequest } from "./meetings.scailo_pb.js";
import { ActiveStatus, CountResponse, Identifier, IdentifierResponse, IdentifierUUID, IdentifierUUIDWithUserComment, IdentifierWithEmailAttributes, IdentifierWithSearchKey, IdentifierWithUserComment, ReorderItemsRequest } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each meeting
 *
 * @generated from service Scailo.MeetingsService
 */
export const MeetingsService = {
  typeName: "Scailo.MeetingsService",
  methods: {
    /**
     * Create
     *
     * @generated from rpc Scailo.MeetingsService.Create
     */
    create: {
      name: "Create",
      I: MeetingsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update
     *
     * @generated from rpc Scailo.MeetingsService.Update
     */
    update: {
      name: "Update",
      I: MeetingsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Cancel
     *
     * @generated from rpc Scailo.MeetingsService.Cancel
     */
    cancel: {
      name: "Cancel",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.MeetingsService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.MeetingsService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.MeetingsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send Email
     *
     * @generated from rpc Scailo.MeetingsService.SendEmail
     */
    sendEmail: {
      name: "SendEmail",
      I: IdentifierWithEmailAttributes,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Request RSVPs from all the participants
     *
     * @generated from rpc Scailo.MeetingsService.RequestRSVP
     */
    requestRSVP: {
      name: "RequestRSVP",
      I: IdentifierWithEmailAttributes,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send all the actionables in an email
     *
     * @generated from rpc Scailo.MeetingsService.SendActionables
     */
    sendActionables: {
      name: "SendActionables",
      I: IdentifierWithEmailAttributes,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an actionable to a meeting
     *
     * @generated from rpc Scailo.MeetingsService.AddActionable
     */
    addActionable: {
      name: "AddActionable",
      I: MeetingsServiceActionableCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an actionable in a meeting
     *
     * @generated from rpc Scailo.MeetingsService.ModifyActionable
     */
    modifyActionable: {
      name: "ModifyActionable",
      I: MeetingsServiceActionableUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an actionable in a meeting
     *
     * @generated from rpc Scailo.MeetingsService.DeleteActionable
     */
    deleteActionable: {
      name: "DeleteActionable",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder actionables in a meeting
     *
     * @generated from rpc Scailo.MeetingsService.ReorderActionables
     */
    reorderActionables: {
      name: "ReorderActionables",
      I: ReorderItemsRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View Meeting Actionable by ID
     *
     * @generated from rpc Scailo.MeetingsService.ViewActionableByID
     */
    viewActionableByID: {
      name: "ViewActionableByID",
      I: Identifier,
      O: MeetingActionable,
      kind: MethodKind.Unary,
    },
    /**
     * View all actionables for given meeting ID
     *
     * @generated from rpc Scailo.MeetingsService.ViewActionables
     */
    viewActionables: {
      name: "ViewActionables",
      I: IdentifierWithSearchKey,
      O: MeetingActionablesList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the meeting actionable
     *
     * @generated from rpc Scailo.MeetingsService.ViewActionableHistory
     */
    viewActionableHistory: {
      name: "ViewActionableHistory",
      I: MeetingActionableHistoryRequest,
      O: MeetingActionablesList,
      kind: MethodKind.Unary,
    },
    /**
     * View meeting actionables for given meeting ID with pagination
     *
     * @generated from rpc Scailo.MeetingsService.ViewPaginatedActionables
     */
    viewPaginatedActionables: {
      name: "ViewPaginatedActionables",
      I: MeetingActionablesSearchRequest,
      O: MeetingsServicePaginatedActionablesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through meeting actionables with pagination
     *
     * @generated from rpc Scailo.MeetingsService.SearchActionablesWithPagination
     */
    searchActionablesWithPagination: {
      name: "SearchActionablesWithPagination",
      I: MeetingActionablesSearchRequest,
      O: MeetingsServicePaginatedActionablesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an employee
     *
     * @generated from rpc Scailo.MeetingsService.AddEmployee
     */
    addEmployee: {
      name: "AddEmployee",
      I: MeetingsServiceEmployeeCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an employee
     *
     * @generated from rpc Scailo.MeetingsService.DeleteEmployee
     */
    deleteEmployee: {
      name: "DeleteEmployee",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View an employee for the given ID
     *
     * @generated from rpc Scailo.MeetingsService.ViewEmployeeByID
     */
    viewEmployeeByID: {
      name: "ViewEmployeeByID",
      I: Identifier,
      O: MeetingEmployee,
      kind: MethodKind.Unary,
    },
    /**
     * View all employees for given meeting ID
     *
     * @generated from rpc Scailo.MeetingsService.ViewEmployees
     */
    viewEmployees: {
      name: "ViewEmployees",
      I: Identifier,
      O: MeetingEmployeesList,
      kind: MethodKind.Unary,
    },
    /**
     * Set the RSVP of the employee with the given meeting employee UUID
     *
     * @generated from rpc Scailo.MeetingsService.SetEmployeeRSVP
     */
    setEmployeeRSVP: {
      name: "SetEmployeeRSVP",
      I: MeetingsServiceSetRSVPRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Import employees from team and returns the ID of the meeting
     *
     * @generated from rpc Scailo.MeetingsService.ImportFromTeam
     */
    importFromTeam: {
      name: "ImportFromTeam",
      I: MeetingsServiceImportEmployeesRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Import employees from department and returns the ID of the meeting
     *
     * @generated from rpc Scailo.MeetingsService.ImportFromDepartment
     */
    importFromDepartment: {
      name: "ImportFromDepartment",
      I: MeetingsServiceImportEmployeesRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an associate
     *
     * @generated from rpc Scailo.MeetingsService.AddAssociate
     */
    addAssociate: {
      name: "AddAssociate",
      I: MeetingsServiceAssociateCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an associate
     *
     * @generated from rpc Scailo.MeetingsService.DeleteAssociate
     */
    deleteAssociate: {
      name: "DeleteAssociate",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View an associate for the given ID
     *
     * @generated from rpc Scailo.MeetingsService.ViewAssociateByID
     */
    viewAssociateByID: {
      name: "ViewAssociateByID",
      I: Identifier,
      O: MeetingAssociate,
      kind: MethodKind.Unary,
    },
    /**
     * View all associates for given meeting ID
     *
     * @generated from rpc Scailo.MeetingsService.ViewAssociates
     */
    viewAssociates: {
      name: "ViewAssociates",
      I: Identifier,
      O: MeetingAssociatesList,
      kind: MethodKind.Unary,
    },
    /**
     * Set the RSVP of the associate with the given meeting associate UUID
     *
     * @generated from rpc Scailo.MeetingsService.SetAssociateRSVP
     */
    setAssociateRSVP: {
      name: "SetAssociateRSVP",
      I: MeetingsServiceSetRSVPRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.MeetingsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Meeting,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.MeetingsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: MeetingsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.MeetingsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: MeetingsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.MeetingsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: MeetingsServicePaginationReq,
      O: MeetingsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.MeetingsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: MeetingsServiceSearchAllReq,
      O: MeetingsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.MeetingsService.Filter
     */
    filter: {
      name: "Filter",
      I: MeetingsServiceFilterReq,
      O: MeetingsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.MeetingsService.Count
     */
    count: {
      name: "Count",
      I: MeetingsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

