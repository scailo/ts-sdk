// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file equations_sales_bundles.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { EquationSalesBundle, EquationSalesBundleItem, EquationSalesBundleItemHistoryRequest, EquationSalesBundleItemsSearchRequest, EquationsSalesBundlesItemsList, EquationsSalesBundlesList, EquationsSalesBundlesServiceCountReq, EquationsSalesBundlesServiceCreateRequest, EquationsSalesBundlesServiceFilterReq, EquationsSalesBundlesServiceItemCreateRequest, EquationsSalesBundlesServiceItemUpdateRequest, EquationsSalesBundlesServicePaginatedItemsResponse, EquationsSalesBundlesServicePaginationReq, EquationsSalesBundlesServicePaginationResponse, EquationsSalesBundlesServiceSearchAllReq, EquationsSalesBundlesServiceUpdateRequest } from "./equations_sales_bundles.scailo_pb.js";
import { ActiveStatus, CloneRequest, CountInSLCStatusRequest, CountResponse, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDWithFile, IdentifierUUIDWithUserComment, IdentifierWithSearchKey, IdentifierWithUserComment, ReorderItemsRequest, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each equation sales bundle
 *
 * @generated from service Scailo.EquationsSalesBundlesService
 */
export const EquationsSalesBundlesService = {
  typeName: "Scailo.EquationsSalesBundlesService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Create
     */
    create: {
      name: "Create",
      I: EquationsSalesBundlesServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Draft
     */
    draft: {
      name: "Draft",
      I: EquationsSalesBundlesServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: EquationsSalesBundlesServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: EquationsSalesBundlesServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (IdentifierWithEmailAttributes) returns (IdentifierResponse);
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Clone equation from an existing equation (denoted by the identifier)
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Clone
     */
    clone: {
      name: "Clone",
      I: CloneRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an item to a equation sales bundle
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.AddEquationSalesBundleItem
     */
    addEquationSalesBundleItem: {
      name: "AddEquationSalesBundleItem",
      I: EquationsSalesBundlesServiceItemCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an item in a equation sales bundle
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ModifyEquationSalesBundleItem
     */
    modifyEquationSalesBundleItem: {
      name: "ModifyEquationSalesBundleItem",
      I: EquationsSalesBundlesServiceItemUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve an item in a equation sales bundle
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ApproveEquationSalesBundleItem
     */
    approveEquationSalesBundleItem: {
      name: "ApproveEquationSalesBundleItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an item in a equation sales bundle
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.DeleteEquationSalesBundleItem
     */
    deleteEquationSalesBundleItem: {
      name: "DeleteEquationSalesBundleItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder items in a equation sales bundle
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ReorderEquationSalesBundleItems
     */
    reorderEquationSalesBundleItems: {
      name: "ReorderEquationSalesBundleItems",
      I: ReorderItemsRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View Equation Sales Bundle Item by ID
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewEquationSalesBundleItemByID
     */
    viewEquationSalesBundleItemByID: {
      name: "ViewEquationSalesBundleItemByID",
      I: Identifier,
      O: EquationSalesBundleItem,
      kind: MethodKind.Unary,
    },
    /**
     * View approved equation sales bundle items for given equation sales bundle ID
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewApprovedEquationSalesBundleItems
     */
    viewApprovedEquationSalesBundleItems: {
      name: "ViewApprovedEquationSalesBundleItems",
      I: IdentifierWithSearchKey,
      O: EquationsSalesBundlesItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved equation sales bundle items for given equation sales bundle ID
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewUnapprovedEquationSalesBundleItems
     */
    viewUnapprovedEquationSalesBundleItems: {
      name: "ViewUnapprovedEquationSalesBundleItems",
      I: IdentifierWithSearchKey,
      O: EquationsSalesBundlesItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the equation sales bundle item
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewEquationSalesBundleItemHistory
     */
    viewEquationSalesBundleItemHistory: {
      name: "ViewEquationSalesBundleItemHistory",
      I: EquationSalesBundleItemHistoryRequest,
      O: EquationsSalesBundlesItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View approved equation sales bundle items for given equation sales bundle ID with pagination
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewPaginatedApprovedEquationSalesBundleItems
     */
    viewPaginatedApprovedEquationSalesBundleItems: {
      name: "ViewPaginatedApprovedEquationSalesBundleItems",
      I: EquationSalesBundleItemsSearchRequest,
      O: EquationsSalesBundlesServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved equation sales bundle items for given equation sales bundle ID with pagination
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewPaginatedUnapprovedEquationSalesBundleItems
     */
    viewPaginatedUnapprovedEquationSalesBundleItems: {
      name: "ViewPaginatedUnapprovedEquationSalesBundleItems",
      I: EquationSalesBundleItemsSearchRequest,
      O: EquationsSalesBundlesServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through equation sales bundle items with pagination
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.SearchItemsWithPagination
     */
    searchItemsWithPagination: {
      name: "SearchItemsWithPagination",
      I: EquationSalesBundleItemsSearchRequest,
      O: EquationsSalesBundlesServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that could be used to upload items from the filled CSV file. The same file can also be used as a template when there are no existing records
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.DownloadItemsAsCSV
     */
    downloadItemsAsCSV: {
      name: "DownloadItemsAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download the CSV file with the entire dependency tree. Useful for identifying quantities necessary from all the dependencies.
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.DownloadTreeAsCSV
     */
    downloadTreeAsCSV: {
      name: "DownloadTreeAsCSV",
      I: Identifier,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.UploadEquationSalesBundleItems
     */
    uploadEquationSalesBundleItems: {
      name: "UploadEquationSalesBundleItems",
      I: IdentifierUUIDWithFile,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: EquationSalesBundle,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: EquationsSalesBundlesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: EquationsSalesBundlesList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: EquationsSalesBundlesServicePaginationReq,
      O: EquationsSalesBundlesServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View the latest equation for a family (denoted by the given identifier)
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.ViewForFamilyID
     */
    viewForFamilyID: {
      name: "ViewForFamilyID",
      I: Identifier,
      O: EquationSalesBundle,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: EquationsSalesBundlesServiceSearchAllReq,
      O: EquationsSalesBundlesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Filter
     */
    filter: {
      name: "Filter",
      I: EquationsSalesBundlesServiceFilterReq,
      O: EquationsSalesBundlesList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given count criteria
     *
     * @generated from rpc Scailo.EquationsSalesBundlesService.Count
     */
    count: {
      name: "Count",
      I: EquationsSalesBundlesServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

