// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file meetings.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest, FormFieldDatumFilterRequest } from "./forms_fields_data.scailo_pb.js";
import { BOOL_FILTER, EmployeeMetadata, SORT_ORDER } from "./base.scailo_pb.js";

/**
 *
 * Describes the lifecycle status of each meeting
 *
 * @generated from enum Scailo.MEETING_LIFECYCLE
 */
export enum MEETING_LIFECYCLE {
  /**
   * Used only in filters
   *
   * @generated from enum value: MEETING_LIFECYCLE_ANY_UNSPECIFIED = 0;
   */
  MEETING_LIFECYCLE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the meeting is open
   *
   * @generated from enum value: MEETING_LIFECYCLE_OPEN = 1;
   */
  MEETING_LIFECYCLE_OPEN = 1,

  /**
   * Denotes that the meeting has completed
   *
   * @generated from enum value: MEETING_LIFECYCLE_COMPLETED = 2;
   */
  MEETING_LIFECYCLE_COMPLETED = 2,

  /**
   * Denotes that the meeting has been cancelled
   *
   * @generated from enum value: MEETING_LIFECYCLE_CANCELLED = 3;
   */
  MEETING_LIFECYCLE_CANCELLED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(MEETING_LIFECYCLE)
proto3.util.setEnumType(MEETING_LIFECYCLE, "Scailo.MEETING_LIFECYCLE", [
  { no: 0, name: "MEETING_LIFECYCLE_ANY_UNSPECIFIED" },
  { no: 1, name: "MEETING_LIFECYCLE_OPEN" },
  { no: 2, name: "MEETING_LIFECYCLE_COMPLETED" },
  { no: 3, name: "MEETING_LIFECYCLE_CANCELLED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.MEETING_SORT_KEY
 */
export enum MEETING_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: MEETING_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  MEETING_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: MEETING_SORT_KEY_CREATED_AT = 1;
   */
  MEETING_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: MEETING_SORT_KEY_MODIFIED_AT = 2;
   */
  MEETING_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: MEETING_SORT_KEY_COMPLETED_ON = 6;
   */
  MEETING_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the title
   *
   * @generated from enum value: MEETING_SORT_KEY_TITLE = 10;
   */
  MEETING_SORT_KEY_TITLE = 10,

  /**
   * Fetch ordered results by the start time
   *
   * @generated from enum value: MEETING_SORT_KEY_STARTS_AT = 11;
   */
  MEETING_SORT_KEY_STARTS_AT = 11,

  /**
   * Fetch ordered results by the end time
   *
   * @generated from enum value: MEETING_SORT_KEY_ENDS_AT = 12;
   */
  MEETING_SORT_KEY_ENDS_AT = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(MEETING_SORT_KEY)
proto3.util.setEnumType(MEETING_SORT_KEY, "Scailo.MEETING_SORT_KEY", [
  { no: 0, name: "MEETING_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "MEETING_SORT_KEY_CREATED_AT" },
  { no: 2, name: "MEETING_SORT_KEY_MODIFIED_AT" },
  { no: 6, name: "MEETING_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "MEETING_SORT_KEY_TITLE" },
  { no: 11, name: "MEETING_SORT_KEY_STARTS_AT" },
  { no: 12, name: "MEETING_SORT_KEY_ENDS_AT" },
]);

/**
 *
 * Describes the list of available RSVP choices
 *
 * @generated from enum Scailo.MEETING_RSVP
 */
export enum MEETING_RSVP {
  /**
   * Used only in filter requests
   *
   * @generated from enum value: MEETING_RSVP_ANY_UNSPECIFIED = 0;
   */
  MEETING_RSVP_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the user has not responded to the RSVP
   *
   * @generated from enum value: MEETING_RSVP_NONE = 1;
   */
  MEETING_RSVP_NONE = 1,

  /**
   * Denotes that the user has responded with a yes
   *
   * @generated from enum value: MEETING_RSVP_YES = 2;
   */
  MEETING_RSVP_YES = 2,

  /**
   * Denotes that the user has responded with a no
   *
   * @generated from enum value: MEETING_RSVP_NO = 3;
   */
  MEETING_RSVP_NO = 3,

  /**
   * Denotes that the user has responded with a maybe
   *
   * @generated from enum value: MEETING_RSVP_MAYBE = 4;
   */
  MEETING_RSVP_MAYBE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(MEETING_RSVP)
proto3.util.setEnumType(MEETING_RSVP, "Scailo.MEETING_RSVP", [
  { no: 0, name: "MEETING_RSVP_ANY_UNSPECIFIED" },
  { no: 1, name: "MEETING_RSVP_NONE" },
  { no: 2, name: "MEETING_RSVP_YES" },
  { no: 3, name: "MEETING_RSVP_NO" },
  { no: 4, name: "MEETING_RSVP_MAYBE" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.MEETING_ACTIONABLE_SORT_KEY
 */
export enum MEETING_ACTIONABLE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: MEETING_ACTIONABLE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  MEETING_ACTIONABLE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: MEETING_ACTIONABLE_SORT_KEY_CREATED_AT = 1;
   */
  MEETING_ACTIONABLE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: MEETING_ACTIONABLE_SORT_KEY_MODIFIED_AT = 2;
   */
  MEETING_ACTIONABLE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the title
   *
   * @generated from enum value: MEETING_ACTIONABLE_SORT_KEY_TITLE = 10;
   */
  MEETING_ACTIONABLE_SORT_KEY_TITLE = 10,

  /**
   * Fetch ordered results by the activity tag ID
   *
   * @generated from enum value: MEETING_ACTIONABLE_SORT_KEY_ACTIVITY_TAG_ID = 11;
   */
  MEETING_ACTIONABLE_SORT_KEY_ACTIVITY_TAG_ID = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(MEETING_ACTIONABLE_SORT_KEY)
proto3.util.setEnumType(MEETING_ACTIONABLE_SORT_KEY, "Scailo.MEETING_ACTIONABLE_SORT_KEY", [
  { no: 0, name: "MEETING_ACTIONABLE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "MEETING_ACTIONABLE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "MEETING_ACTIONABLE_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "MEETING_ACTIONABLE_SORT_KEY_TITLE" },
  { no: 11, name: "MEETING_ACTIONABLE_SORT_KEY_ACTIVITY_TAG_ID" },
]);

/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being a meeting lifecycle status
 *
 * @generated from message Scailo.LogbookLogMeetingLC
 */
export class LogbookLogMeetingLC extends Message<LogbookLogMeetingLC> {
  /**
   * ID of the resource
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Stores if the resource is active
   *
   * @generated from field: bool is_active = 2;
   */
  isActive = false;

  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: uint64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: string ref_uuid = 10;
   */
  refUuid = "";

  /**
   * The operation that was performed
   *
   * @generated from field: Scailo.MEETING_LIFECYCLE operation = 11;
   */
  operation = MEETING_LIFECYCLE.MEETING_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The name of the person who made this entry
   *
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * The ID of the user who made this entry
   *
   * @generated from field: uint64 user_id = 14;
   */
  userId = protoInt64.zero;

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 15;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 16;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogMeetingLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LogbookLogMeetingLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(MEETING_LIFECYCLE) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogMeetingLC {
    return new LogbookLogMeetingLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogMeetingLC {
    return new LogbookLogMeetingLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogMeetingLC {
    return new LogbookLogMeetingLC().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogMeetingLC | PlainMessage<LogbookLogMeetingLC> | undefined, b: LogbookLogMeetingLC | PlainMessage<LogbookLogMeetingLC> | undefined): boolean {
    return proto3.util.equals(LogbookLogMeetingLC, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.MeetingsServiceCreateRequest
 */
export class MeetingsServiceCreateRequest extends Message<MeetingsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 8;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 9;
   */
  projectId = protoInt64.zero;

  /**
   * The title of the meeting
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The start UNIX timestamp
   *
   * @generated from field: uint64 starts_at = 11;
   */
  startsAt = protoInt64.zero;

  /**
   * The end UNIX timestamp
   *
   * @generated from field: uint64 ends_at = 12;
   */
  endsAt = protoInt64.zero;

  /**
   * The description of the meeting
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<MeetingsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "starts_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ends_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceCreateRequest {
    return new MeetingsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceCreateRequest {
    return new MeetingsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceCreateRequest {
    return new MeetingsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceCreateRequest | PlainMessage<MeetingsServiceCreateRequest> | undefined, b: MeetingsServiceCreateRequest | PlainMessage<MeetingsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.MeetingsServiceUpdateRequest
 */
export class MeetingsServiceUpdateRequest extends Message<MeetingsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 8;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 9;
   */
  projectId = protoInt64.zero;

  /**
   * The title of the meeting
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The start UNIX timestamp
   *
   * @generated from field: uint64 starts_at = 11;
   */
  startsAt = protoInt64.zero;

  /**
   * The end UNIX timestamp
   *
   * @generated from field: uint64 ends_at = 12;
   */
  endsAt = protoInt64.zero;

  /**
   * The description of the meeting
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<MeetingsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "starts_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ends_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceUpdateRequest {
    return new MeetingsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceUpdateRequest {
    return new MeetingsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceUpdateRequest {
    return new MeetingsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceUpdateRequest | PlainMessage<MeetingsServiceUpdateRequest> | undefined, b: MeetingsServiceUpdateRequest | PlainMessage<MeetingsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.Meeting
 */
export class Meeting extends Message<Meeting> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this meeting
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The status of this meeting
   *
   * @generated from field: Scailo.MEETING_LIFECYCLE status = 4;
   */
  status = MEETING_LIFECYCLE.MEETING_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this meeting
   *
   * @generated from field: repeated Scailo.LogbookLogMeetingLC logs = 5;
   */
  logs: LogbookLogMeetingLC[] = [];

  /**
   * The timestamp of when this meeting was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 8;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 9;
   */
  projectId = protoInt64.zero;

  /**
   * The title of the meeting
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The start UNIX timestamp
   *
   * @generated from field: uint64 starts_at = 11;
   */
  startsAt = protoInt64.zero;

  /**
   * The end UNIX timestamp
   *
   * @generated from field: uint64 ends_at = 12;
   */
  endsAt = protoInt64.zero;

  /**
   * The description of the meeting
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 30;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<Meeting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.Meeting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(MEETING_LIFECYCLE) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogMeetingLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "starts_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "ends_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Meeting {
    return new Meeting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Meeting {
    return new Meeting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Meeting {
    return new Meeting().fromJsonString(jsonString, options);
  }

  static equals(a: Meeting | PlainMessage<Meeting> | undefined, b: Meeting | PlainMessage<Meeting> | undefined): boolean {
    return proto3.util.equals(Meeting, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.MeetingsList
 */
export class MeetingsList extends Message<MeetingsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.Meeting list = 1;
   */
  list: Meeting[] = [];

  constructor(data?: PartialMessage<MeetingsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Meeting, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsList {
    return new MeetingsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsList {
    return new MeetingsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsList {
    return new MeetingsList().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsList | PlainMessage<MeetingsList> | undefined, b: MeetingsList | PlainMessage<MeetingsList> | undefined): boolean {
    return proto3.util.equals(MeetingsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.MeetingsServicePaginationReq
 */
export class MeetingsServicePaginationReq extends Message<MeetingsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.MEETING_SORT_KEY sort_key = 5;
   */
  sortKey = MEETING_SORT_KEY.MEETING_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this meeting
   *
   * @generated from field: Scailo.MEETING_LIFECYCLE status = 6;
   */
  status = MEETING_LIFECYCLE.MEETING_LIFECYCLE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<MeetingsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(MEETING_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(MEETING_LIFECYCLE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServicePaginationReq {
    return new MeetingsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServicePaginationReq {
    return new MeetingsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServicePaginationReq {
    return new MeetingsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServicePaginationReq | PlainMessage<MeetingsServicePaginationReq> | undefined, b: MeetingsServicePaginationReq | PlainMessage<MeetingsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(MeetingsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.MeetingsServicePaginationResponse
 */
export class MeetingsServicePaginationResponse extends Message<MeetingsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.Meeting payload = 4;
   */
  payload: Meeting[] = [];

  constructor(data?: PartialMessage<MeetingsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: Meeting, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServicePaginationResponse {
    return new MeetingsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServicePaginationResponse {
    return new MeetingsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServicePaginationResponse {
    return new MeetingsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServicePaginationResponse | PlainMessage<MeetingsServicePaginationResponse> | undefined, b: MeetingsServicePaginationResponse | PlainMessage<MeetingsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(MeetingsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.MeetingsServiceFilterReq
 */
export class MeetingsServiceFilterReq extends Message<MeetingsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.MEETING_SORT_KEY sort_key = 5;
   */
  sortKey = MEETING_SORT_KEY.MEETING_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this meeting
   *
   * @generated from field: Scailo.MEETING_LIFECYCLE status = 10;
   */
  status = MEETING_LIFECYCLE.MEETING_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The title of the meeting
   *
   * @generated from field: string title = 20;
   */
  title = "";

  /**
   * The start range of "starts at"
   *
   * @generated from field: uint64 starts_at_start = 24;
   */
  startsAtStart = protoInt64.zero;

  /**
   * The end range of "starts at"
   *
   * @generated from field: uint64 starts_at_end = 25;
   */
  startsAtEnd = protoInt64.zero;

  /**
   * The start range of "ends at"
   *
   * @generated from field: uint64 ends_at_start = 26;
   */
  endsAtStart = protoInt64.zero;

  /**
   * The end range of "ends at"
   *
   * @generated from field: uint64 ends_at_end = 27;
   */
  endsAtEnd = protoInt64.zero;

  /**
   * The ID of the associated project
   *
   * @generated from field: uint64 project_id = 28;
   */
  projectId = protoInt64.zero;

  /**
   * Return all the meetings that the given employee is a part of
   *
   * @generated from field: uint64 employee_id = 40;
   */
  employeeId = protoInt64.zero;

  /**
   * Return all the meetings that the given associate is a part of
   *
   * @generated from field: uint64 associate_id = 41;
   */
  associateId = protoInt64.zero;

  /**
   * Return all the meetings that have the following activity tag as part of the actionables
   *
   * @generated from field: uint64 activity_tag_id = 42;
   */
  activityTagId = protoInt64.zero;

  /**
   * The list of form data filters
   *
   * @generated from field: repeated Scailo.FormFieldDatumFilterRequest form_data = 500;
   */
  formData: FormFieldDatumFilterRequest[] = [];

  constructor(data?: PartialMessage<MeetingsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(MEETING_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(MEETING_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "starts_at_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "starts_at_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "ends_at_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "ends_at_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "associate_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 42, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 500, name: "form_data", kind: "message", T: FormFieldDatumFilterRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceFilterReq {
    return new MeetingsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceFilterReq {
    return new MeetingsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceFilterReq {
    return new MeetingsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceFilterReq | PlainMessage<MeetingsServiceFilterReq> | undefined, b: MeetingsServiceFilterReq | PlainMessage<MeetingsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.MeetingsServiceCountReq
 */
export class MeetingsServiceCountReq extends Message<MeetingsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this meeting
   *
   * @generated from field: Scailo.MEETING_LIFECYCLE status = 10;
   */
  status = MEETING_LIFECYCLE.MEETING_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The title of the meeting
   *
   * @generated from field: string title = 20;
   */
  title = "";

  /**
   * The start range of "starts at"
   *
   * @generated from field: uint64 starts_at_start = 24;
   */
  startsAtStart = protoInt64.zero;

  /**
   * The end range of "starts at"
   *
   * @generated from field: uint64 starts_at_end = 25;
   */
  startsAtEnd = protoInt64.zero;

  /**
   * The start range of "ends at"
   *
   * @generated from field: uint64 ends_at_start = 26;
   */
  endsAtStart = protoInt64.zero;

  /**
   * The end range of "ends at"
   *
   * @generated from field: uint64 ends_at_end = 27;
   */
  endsAtEnd = protoInt64.zero;

  /**
   * The ID of the associated project
   *
   * @generated from field: uint64 project_id = 28;
   */
  projectId = protoInt64.zero;

  /**
   * Return all the meetings that the given employee is a part of
   *
   * @generated from field: uint64 employee_id = 40;
   */
  employeeId = protoInt64.zero;

  /**
   * Return all the meetings that the given associate is a part of
   *
   * @generated from field: uint64 associate_id = 41;
   */
  associateId = protoInt64.zero;

  /**
   * Return all the meetings that have the following activity tag as part of the actionables
   *
   * @generated from field: uint64 activity_tag_id = 42;
   */
  activityTagId = protoInt64.zero;

  /**
   * The list of form data filters
   *
   * @generated from field: repeated Scailo.FormFieldDatumFilterRequest form_data = 500;
   */
  formData: FormFieldDatumFilterRequest[] = [];

  constructor(data?: PartialMessage<MeetingsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(MEETING_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "starts_at_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "starts_at_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "ends_at_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "ends_at_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "associate_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 42, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 500, name: "form_data", kind: "message", T: FormFieldDatumFilterRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceCountReq {
    return new MeetingsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceCountReq {
    return new MeetingsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceCountReq {
    return new MeetingsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceCountReq | PlainMessage<MeetingsServiceCountReq> | undefined, b: MeetingsServiceCountReq | PlainMessage<MeetingsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.MeetingsServiceSearchAllReq
 */
export class MeetingsServiceSearchAllReq extends Message<MeetingsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.MEETING_SORT_KEY sort_key = 5;
   */
  sortKey = MEETING_SORT_KEY.MEETING_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.MEETING_LIFECYCLE status = 10;
   */
  status = MEETING_LIFECYCLE.MEETING_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * Return all the meetings that the given employee is a part of
   *
   * @generated from field: uint64 employee_id = 40;
   */
  employeeId = protoInt64.zero;

  /**
   * Return all the meetings that the given associate is a part of
   *
   * @generated from field: uint64 associate_id = 41;
   */
  associateId = protoInt64.zero;

  /**
   * Return all the meetings that have the following activity tag as part of the actionables
   *
   * @generated from field: uint64 activity_tag_id = 42;
   */
  activityTagId = protoInt64.zero;

  constructor(data?: PartialMessage<MeetingsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(MEETING_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(MEETING_LIFECYCLE) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "associate_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 42, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceSearchAllReq {
    return new MeetingsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceSearchAllReq {
    return new MeetingsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceSearchAllReq {
    return new MeetingsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceSearchAllReq | PlainMessage<MeetingsServiceSearchAllReq> | undefined, b: MeetingsServiceSearchAllReq | PlainMessage<MeetingsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an actionable to a meeting
 *
 * @generated from message Scailo.MeetingsServiceActionableCreateRequest
 */
export class MeetingsServiceActionableCreateRequest extends Message<MeetingsServiceActionableCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the meeting ID
   *
   * @generated from field: uint64 meeting_id = 10;
   */
  meetingId = protoInt64.zero;

  /**
   * The title of the actionable
   *
   * @generated from field: string title = 11;
   */
  title = "";

  /**
   * The content of the actionable
   *
   * @generated from field: string content = 12;
   */
  content = "";

  /**
   * Stores the optional activity tag ID
   *
   * @generated from field: uint64 activity_tag_id = 13;
   */
  activityTagId = protoInt64.zero;

  constructor(data?: PartialMessage<MeetingsServiceActionableCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceActionableCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "meeting_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceActionableCreateRequest {
    return new MeetingsServiceActionableCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceActionableCreateRequest {
    return new MeetingsServiceActionableCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceActionableCreateRequest {
    return new MeetingsServiceActionableCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceActionableCreateRequest | PlainMessage<MeetingsServiceActionableCreateRequest> | undefined, b: MeetingsServiceActionableCreateRequest | PlainMessage<MeetingsServiceActionableCreateRequest> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceActionableCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an actionable in a meeting
 *
 * @generated from message Scailo.MeetingsServiceActionableUpdateRequest
 */
export class MeetingsServiceActionableUpdateRequest extends Message<MeetingsServiceActionableUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The title of the actionable
   *
   * @generated from field: string title = 11;
   */
  title = "";

  /**
   * The content of the actionable
   *
   * @generated from field: string content = 12;
   */
  content = "";

  /**
   * Stores the optional activity tag ID
   *
   * @generated from field: uint64 activity_tag_id = 13;
   */
  activityTagId = protoInt64.zero;

  constructor(data?: PartialMessage<MeetingsServiceActionableUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceActionableUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceActionableUpdateRequest {
    return new MeetingsServiceActionableUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceActionableUpdateRequest {
    return new MeetingsServiceActionableUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceActionableUpdateRequest {
    return new MeetingsServiceActionableUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceActionableUpdateRequest | PlainMessage<MeetingsServiceActionableUpdateRequest> | undefined, b: MeetingsServiceActionableUpdateRequest | PlainMessage<MeetingsServiceActionableUpdateRequest> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceActionableUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an actionable associated to a meeting
 *
 * @generated from message Scailo.MeetingActionable
 */
export class MeetingActionable extends Message<MeetingActionable> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this meeting
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the meeting ID
   *
   * @generated from field: uint64 meeting_id = 10;
   */
  meetingId = protoInt64.zero;

  /**
   * The title of the actionable
   *
   * @generated from field: string title = 11;
   */
  title = "";

  /**
   * The content of the actionable
   *
   * @generated from field: string content = 12;
   */
  content = "";

  /**
   * Stores the optional activity tag ID
   *
   * @generated from field: uint64 activity_tag_id = 13;
   */
  activityTagId = protoInt64.zero;

  constructor(data?: PartialMessage<MeetingActionable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingActionable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "meeting_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingActionable {
    return new MeetingActionable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingActionable {
    return new MeetingActionable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingActionable {
    return new MeetingActionable().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingActionable | PlainMessage<MeetingActionable> | undefined, b: MeetingActionable | PlainMessage<MeetingActionable> | undefined): boolean {
    return proto3.util.equals(MeetingActionable, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of meeting actionables
 *
 * @generated from message Scailo.MeetingActionablesList
 */
export class MeetingActionablesList extends Message<MeetingActionablesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.MeetingActionable list = 1;
   */
  list: MeetingActionable[] = [];

  constructor(data?: PartialMessage<MeetingActionablesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingActionablesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: MeetingActionable, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingActionablesList {
    return new MeetingActionablesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingActionablesList {
    return new MeetingActionablesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingActionablesList {
    return new MeetingActionablesList().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingActionablesList | PlainMessage<MeetingActionablesList> | undefined, b: MeetingActionablesList | PlainMessage<MeetingActionablesList> | undefined): boolean {
    return proto3.util.equals(MeetingActionablesList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.MeetingActionableHistoryRequest
 */
export class MeetingActionableHistoryRequest extends Message<MeetingActionableHistoryRequest> {
  /**
   * Stores the meeting ID
   *
   * @generated from field: uint64 meeting_id = 10;
   */
  meetingId = protoInt64.zero;

  /**
   * The title of the actionable
   *
   * @generated from field: string title = 11;
   */
  title = "";

  constructor(data?: PartialMessage<MeetingActionableHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingActionableHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "meeting_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingActionableHistoryRequest {
    return new MeetingActionableHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingActionableHistoryRequest {
    return new MeetingActionableHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingActionableHistoryRequest {
    return new MeetingActionableHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingActionableHistoryRequest | PlainMessage<MeetingActionableHistoryRequest> | undefined, b: MeetingActionableHistoryRequest | PlainMessage<MeetingActionableHistoryRequest> | undefined): boolean {
    return proto3.util.equals(MeetingActionableHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve actionables.
 *
 * @generated from message Scailo.MeetingActionablesSearchRequest
 */
export class MeetingActionablesSearchRequest extends Message<MeetingActionablesSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.MEETING_ACTIONABLE_SORT_KEY sort_key = 5;
   */
  sortKey = MEETING_ACTIONABLE_SORT_KEY.MEETING_ACTIONABLE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The ID of the meeting
   *
   * @generated from field: uint64 meeting_id = 20;
   */
  meetingId = protoInt64.zero;

  /**
   * Stores the optional activity tag ID
   *
   * @generated from field: uint64 activity_tag_id = 23;
   */
  activityTagId = protoInt64.zero;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<MeetingActionablesSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingActionablesSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(MEETING_ACTIONABLE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "meeting_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingActionablesSearchRequest {
    return new MeetingActionablesSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingActionablesSearchRequest {
    return new MeetingActionablesSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingActionablesSearchRequest {
    return new MeetingActionablesSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingActionablesSearchRequest | PlainMessage<MeetingActionablesSearchRequest> | undefined, b: MeetingActionablesSearchRequest | PlainMessage<MeetingActionablesSearchRequest> | undefined): boolean {
    return proto3.util.equals(MeetingActionablesSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination actionables request
 *
 * @generated from message Scailo.MeetingsServicePaginatedActionablesResponse
 */
export class MeetingsServicePaginatedActionablesResponse extends Message<MeetingsServicePaginatedActionablesResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.MeetingActionable payload = 4;
   */
  payload: MeetingActionable[] = [];

  constructor(data?: PartialMessage<MeetingsServicePaginatedActionablesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServicePaginatedActionablesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: MeetingActionable, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServicePaginatedActionablesResponse {
    return new MeetingsServicePaginatedActionablesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServicePaginatedActionablesResponse {
    return new MeetingsServicePaginatedActionablesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServicePaginatedActionablesResponse {
    return new MeetingsServicePaginatedActionablesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServicePaginatedActionablesResponse | PlainMessage<MeetingsServicePaginatedActionablesResponse> | undefined, b: MeetingsServicePaginatedActionablesResponse | PlainMessage<MeetingsServicePaginatedActionablesResponse> | undefined): boolean {
    return proto3.util.equals(MeetingsServicePaginatedActionablesResponse, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a meeting employee
 *
 * @generated from message Scailo.MeetingsServiceEmployeeCreateRequest
 */
export class MeetingsServiceEmployeeCreateRequest extends Message<MeetingsServiceEmployeeCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the meeting ID
   *
   * @generated from field: uint64 meeting_id = 10;
   */
  meetingId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 11;
   */
  employeeId = protoInt64.zero;

  /**
   * Stores the person's RSVP
   *
   * @generated from field: Scailo.MEETING_RSVP rsvp = 12;
   */
  rsvp = MEETING_RSVP.MEETING_RSVP_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<MeetingsServiceEmployeeCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceEmployeeCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "meeting_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "rsvp", kind: "enum", T: proto3.getEnumType(MEETING_RSVP) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceEmployeeCreateRequest {
    return new MeetingsServiceEmployeeCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceEmployeeCreateRequest {
    return new MeetingsServiceEmployeeCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceEmployeeCreateRequest {
    return new MeetingsServiceEmployeeCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceEmployeeCreateRequest | PlainMessage<MeetingsServiceEmployeeCreateRequest> | undefined, b: MeetingsServiceEmployeeCreateRequest | PlainMessage<MeetingsServiceEmployeeCreateRequest> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceEmployeeCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a meeting employee
 *
 * @generated from message Scailo.MeetingEmployee
 */
export class MeetingEmployee extends Message<MeetingEmployee> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this meeting
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the meeting ID
   *
   * @generated from field: uint64 meeting_id = 10;
   */
  meetingId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 11;
   */
  employeeId = protoInt64.zero;

  /**
   * Stores the person's RSVP
   *
   * @generated from field: Scailo.MEETING_RSVP rsvp = 12;
   */
  rsvp = MEETING_RSVP.MEETING_RSVP_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<MeetingEmployee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingEmployee";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "meeting_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "rsvp", kind: "enum", T: proto3.getEnumType(MEETING_RSVP) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingEmployee {
    return new MeetingEmployee().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingEmployee {
    return new MeetingEmployee().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingEmployee {
    return new MeetingEmployee().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingEmployee | PlainMessage<MeetingEmployee> | undefined, b: MeetingEmployee | PlainMessage<MeetingEmployee> | undefined): boolean {
    return proto3.util.equals(MeetingEmployee, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of meeting employees
 *
 * @generated from message Scailo.MeetingEmployeesList
 */
export class MeetingEmployeesList extends Message<MeetingEmployeesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.MeetingEmployee list = 1;
   */
  list: MeetingEmployee[] = [];

  constructor(data?: PartialMessage<MeetingEmployeesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingEmployeesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: MeetingEmployee, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingEmployeesList {
    return new MeetingEmployeesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingEmployeesList {
    return new MeetingEmployeesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingEmployeesList {
    return new MeetingEmployeesList().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingEmployeesList | PlainMessage<MeetingEmployeesList> | undefined, b: MeetingEmployeesList | PlainMessage<MeetingEmployeesList> | undefined): boolean {
    return proto3.util.equals(MeetingEmployeesList, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a meeting associate
 *
 * @generated from message Scailo.MeetingsServiceAssociateCreateRequest
 */
export class MeetingsServiceAssociateCreateRequest extends Message<MeetingsServiceAssociateCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the meeting ID
   *
   * @generated from field: uint64 meeting_id = 10;
   */
  meetingId = protoInt64.zero;

  /**
   * Stores the associate ID
   *
   * @generated from field: uint64 associate_id = 11;
   */
  associateId = protoInt64.zero;

  /**
   * Stores the person's RSVP
   *
   * @generated from field: Scailo.MEETING_RSVP rsvp = 12;
   */
  rsvp = MEETING_RSVP.MEETING_RSVP_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<MeetingsServiceAssociateCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceAssociateCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "meeting_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "associate_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "rsvp", kind: "enum", T: proto3.getEnumType(MEETING_RSVP) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceAssociateCreateRequest {
    return new MeetingsServiceAssociateCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceAssociateCreateRequest {
    return new MeetingsServiceAssociateCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceAssociateCreateRequest {
    return new MeetingsServiceAssociateCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceAssociateCreateRequest | PlainMessage<MeetingsServiceAssociateCreateRequest> | undefined, b: MeetingsServiceAssociateCreateRequest | PlainMessage<MeetingsServiceAssociateCreateRequest> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceAssociateCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a meeting associate
 *
 * @generated from message Scailo.MeetingAssociate
 */
export class MeetingAssociate extends Message<MeetingAssociate> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this meeting
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the meeting ID
   *
   * @generated from field: uint64 meeting_id = 10;
   */
  meetingId = protoInt64.zero;

  /**
   * Stores the associate ID
   *
   * @generated from field: uint64 associate_id = 11;
   */
  associateId = protoInt64.zero;

  /**
   * Stores the person's RSVP
   *
   * @generated from field: Scailo.MEETING_RSVP rsvp = 12;
   */
  rsvp = MEETING_RSVP.MEETING_RSVP_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<MeetingAssociate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingAssociate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "meeting_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "associate_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "rsvp", kind: "enum", T: proto3.getEnumType(MEETING_RSVP) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingAssociate {
    return new MeetingAssociate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingAssociate {
    return new MeetingAssociate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingAssociate {
    return new MeetingAssociate().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingAssociate | PlainMessage<MeetingAssociate> | undefined, b: MeetingAssociate | PlainMessage<MeetingAssociate> | undefined): boolean {
    return proto3.util.equals(MeetingAssociate, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of meeting associates
 *
 * @generated from message Scailo.MeetingAssociatesList
 */
export class MeetingAssociatesList extends Message<MeetingAssociatesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.MeetingAssociate list = 1;
   */
  list: MeetingAssociate[] = [];

  constructor(data?: PartialMessage<MeetingAssociatesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingAssociatesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: MeetingAssociate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingAssociatesList {
    return new MeetingAssociatesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingAssociatesList {
    return new MeetingAssociatesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingAssociatesList {
    return new MeetingAssociatesList().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingAssociatesList | PlainMessage<MeetingAssociatesList> | undefined, b: MeetingAssociatesList | PlainMessage<MeetingAssociatesList> | undefined): boolean {
    return proto3.util.equals(MeetingAssociatesList, a, b);
  }
}

/**
 *
 * Describes the data model to handle importing of employees from the given identifier representing a team or a department
 *
 * @generated from message Scailo.MeetingsServiceImportEmployeesRequest
 */
export class MeetingsServiceImportEmployeesRequest extends Message<MeetingsServiceImportEmployeesRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the meeting
   *
   * @generated from field: uint64 meeting_id = 2;
   */
  meetingId = protoInt64.zero;

  /**
   * The ID of the team or the department from which employees need to be added to the meeting
   *
   * @generated from field: uint64 resource_id = 3;
   */
  resourceId = protoInt64.zero;

  /**
   * Stores if the existing employees in the meeting need to be deleted before adding from the source record
   *
   * @generated from field: bool delete_existing = 4;
   */
  deleteExisting = false;

  constructor(data?: PartialMessage<MeetingsServiceImportEmployeesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceImportEmployeesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "meeting_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "resource_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "delete_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceImportEmployeesRequest {
    return new MeetingsServiceImportEmployeesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceImportEmployeesRequest {
    return new MeetingsServiceImportEmployeesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceImportEmployeesRequest {
    return new MeetingsServiceImportEmployeesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceImportEmployeesRequest | PlainMessage<MeetingsServiceImportEmployeesRequest> | undefined, b: MeetingsServiceImportEmployeesRequest | PlainMessage<MeetingsServiceImportEmployeesRequest> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceImportEmployeesRequest, a, b);
  }
}

/**
 *
 * Describes the data model that sets the RSVP of either an associate or an employee
 *
 * @generated from message Scailo.MeetingsServiceSetRSVPRequest
 */
export class MeetingsServiceSetRSVPRequest extends Message<MeetingsServiceSetRSVPRequest> {
  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource
   *
   * @generated from field: string uuid = 10;
   */
  uuid = "";

  /**
   * Stores the person's RSVP
   *
   * @generated from field: Scailo.MEETING_RSVP rsvp = 11;
   */
  rsvp = MEETING_RSVP.MEETING_RSVP_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<MeetingsServiceSetRSVPRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.MeetingsServiceSetRSVPRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "rsvp", kind: "enum", T: proto3.getEnumType(MEETING_RSVP) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeetingsServiceSetRSVPRequest {
    return new MeetingsServiceSetRSVPRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeetingsServiceSetRSVPRequest {
    return new MeetingsServiceSetRSVPRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeetingsServiceSetRSVPRequest {
    return new MeetingsServiceSetRSVPRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MeetingsServiceSetRSVPRequest | PlainMessage<MeetingsServiceSetRSVPRequest> | undefined, b: MeetingsServiceSetRSVPRequest | PlainMessage<MeetingsServiceSetRSVPRequest> | undefined): boolean {
    return proto3.util.equals(MeetingsServiceSetRSVPRequest, a, b);
  }
}

