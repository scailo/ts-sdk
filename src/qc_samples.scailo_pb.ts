// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file qc_samples.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, SORT_ORDER } from "./base.scailo_pb.js";
import { Family, FAMILY_TYPE } from "./families.scailo_pb.js";
import { QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE, QCGroup } from "./qc_groups.scailo_pb.js";
import { GenericInventory } from "./inventory.scailo_pb.js";

/**
 *
 * Describes the lifecycle status of each qc sample
 *
 * @generated from enum Scailo.QC_SAMPLE_LIFECYCLE
 */
export enum QC_SAMPLE_LIFECYCLE {
  /**
   * Used only in filters
   *
   * @generated from enum value: QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED = 0;
   */
  QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the qc sample is open
   *
   * @generated from enum value: QC_SAMPLE_LIFECYCLE_OPEN = 1;
   */
  QC_SAMPLE_LIFECYCLE_OPEN = 1,

  /**
   * Denotes that the qc sample has been finished and waiting for approval
   *
   * @generated from enum value: QC_SAMPLE_LIFECYCLE_FINISHED = 2;
   */
  QC_SAMPLE_LIFECYCLE_FINISHED = 2,

  /**
   * Denotes that the qc sample has been accepted
   *
   * @generated from enum value: QC_SAMPLE_LIFECYCLE_ACCEPTED = 3;
   */
  QC_SAMPLE_LIFECYCLE_ACCEPTED = 3,

  /**
   * Denotes that the qc sample has been accepted with deviation
   *
   * @generated from enum value: QC_SAMPLE_LIFECYCLE_ACCEPTED_WITH_DEVIATION = 4;
   */
  QC_SAMPLE_LIFECYCLE_ACCEPTED_WITH_DEVIATION = 4,

  /**
   * Denotes that the qc sample has been rejected
   *
   * @generated from enum value: QC_SAMPLE_LIFECYCLE_REJECTED = 5;
   */
  QC_SAMPLE_LIFECYCLE_REJECTED = 5,

  /**
   * Denotes that the qc sample has been cancelled
   *
   * @generated from enum value: QC_SAMPLE_LIFECYCLE_CANCELLED = 6;
   */
  QC_SAMPLE_LIFECYCLE_CANCELLED = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(QC_SAMPLE_LIFECYCLE)
proto3.util.setEnumType(QC_SAMPLE_LIFECYCLE, "Scailo.QC_SAMPLE_LIFECYCLE", [
  { no: 0, name: "QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED" },
  { no: 1, name: "QC_SAMPLE_LIFECYCLE_OPEN" },
  { no: 2, name: "QC_SAMPLE_LIFECYCLE_FINISHED" },
  { no: 3, name: "QC_SAMPLE_LIFECYCLE_ACCEPTED" },
  { no: 4, name: "QC_SAMPLE_LIFECYCLE_ACCEPTED_WITH_DEVIATION" },
  { no: 5, name: "QC_SAMPLE_LIFECYCLE_REJECTED" },
  { no: 6, name: "QC_SAMPLE_LIFECYCLE_CANCELLED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.QC_SAMPLE_SORT_KEY
 */
export enum QC_SAMPLE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: QC_SAMPLE_SORT_KEY_CREATED_AT = 1;
   */
  QC_SAMPLE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: QC_SAMPLE_SORT_KEY_MODIFIED_AT = 2;
   */
  QC_SAMPLE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: QC_SAMPLE_SORT_KEY_APPROVED_ON = 3;
   */
  QC_SAMPLE_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: QC_SAMPLE_SORT_KEY_APPROVED_BY = 4;
   */
  QC_SAMPLE_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: QC_SAMPLE_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  QC_SAMPLE_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's finished on timestamp
   *
   * @generated from enum value: QC_SAMPLE_SORT_KEY_FINISHED_ON = 6;
   */
  QC_SAMPLE_SORT_KEY_FINISHED_ON = 6,

  /**
   * Fetch ordered results by the qc group ID
   *
   * @generated from enum value: QC_SAMPLE_SORT_KEY_QC_GROUP_ID = 7;
   */
  QC_SAMPLE_SORT_KEY_QC_GROUP_ID = 7,

  /**
   * Fetch ordered results by the name
   *
   * @generated from enum value: QC_SAMPLE_SORT_KEY_NAME = 10;
   */
  QC_SAMPLE_SORT_KEY_NAME = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(QC_SAMPLE_SORT_KEY)
proto3.util.setEnumType(QC_SAMPLE_SORT_KEY, "Scailo.QC_SAMPLE_SORT_KEY", [
  { no: 0, name: "QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "QC_SAMPLE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "QC_SAMPLE_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "QC_SAMPLE_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "QC_SAMPLE_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "QC_SAMPLE_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "QC_SAMPLE_SORT_KEY_FINISHED_ON" },
  { no: 7, name: "QC_SAMPLE_SORT_KEY_QC_GROUP_ID" },
  { no: 10, name: "QC_SAMPLE_SORT_KEY_NAME" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.QC_SAMPLE_PARAMETER_SORT_KEY
 */
export enum QC_SAMPLE_PARAMETER_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: QC_SAMPLE_PARAMETER_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  QC_SAMPLE_PARAMETER_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: QC_SAMPLE_PARAMETER_SORT_KEY_CREATED_AT = 1;
   */
  QC_SAMPLE_PARAMETER_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: QC_SAMPLE_PARAMETER_SORT_KEY_MODIFIED_AT = 2;
   */
  QC_SAMPLE_PARAMETER_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by username that checked
   *
   * @generated from enum value: QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_BY = 10;
   */
  QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_BY = 10,

  /**
   * Fetch ordered results by the checked at timestamp
   *
   * @generated from enum value: QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_AT = 11;
   */
  QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_AT = 11,

  /**
   * Fetch ordered results by the qc sample ID
   *
   * @generated from enum value: QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_ID = 12;
   */
  QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_ID = 12,

  /**
   * Fetch ordered results by the qc param ID
   *
   * @generated from enum value: QC_SAMPLE_PARAMETER_SORT_KEY_QC_PARAM_ID = 13;
   */
  QC_SAMPLE_PARAMETER_SORT_KEY_QC_PARAM_ID = 13,

  /**
   * Fetch ordered results by the uom ID
   *
   * @generated from enum value: QC_SAMPLE_PARAMETER_SORT_KEY_UOM_ID = 14;
   */
  QC_SAMPLE_PARAMETER_SORT_KEY_UOM_ID = 14,
}
// Retrieve enum metadata with: proto3.getEnumType(QC_SAMPLE_PARAMETER_SORT_KEY)
proto3.util.setEnumType(QC_SAMPLE_PARAMETER_SORT_KEY, "Scailo.QC_SAMPLE_PARAMETER_SORT_KEY", [
  { no: 0, name: "QC_SAMPLE_PARAMETER_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "QC_SAMPLE_PARAMETER_SORT_KEY_CREATED_AT" },
  { no: 2, name: "QC_SAMPLE_PARAMETER_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_BY" },
  { no: 11, name: "QC_SAMPLE_PARAMETER_SORT_KEY_CHECKED_AT" },
  { no: 12, name: "QC_SAMPLE_PARAMETER_SORT_KEY_QC_SAMPLE_ID" },
  { no: 13, name: "QC_SAMPLE_PARAMETER_SORT_KEY_QC_PARAM_ID" },
  { no: 14, name: "QC_SAMPLE_PARAMETER_SORT_KEY_UOM_ID" },
]);

/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being a qc sample lifecycle status
 *
 * @generated from message Scailo.LogbookLogQCSampleLC
 */
export class LogbookLogQCSampleLC extends Message<LogbookLogQCSampleLC> {
  /**
   * ID of the resource
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Stores if the resource is active
   *
   * @generated from field: bool is_active = 2;
   */
  isActive = false;

  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: uint64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: string ref_uuid = 10;
   */
  refUuid = "";

  /**
   * The operation that was performed
   *
   * @generated from field: Scailo.QC_SAMPLE_LIFECYCLE operation = 11;
   */
  operation = QC_SAMPLE_LIFECYCLE.QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The name of the person who made this entry
   *
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * The ID of the user who made this entry
   *
   * @generated from field: uint64 user_id = 14;
   */
  userId = protoInt64.zero;

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 15;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 16;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogQCSampleLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LogbookLogQCSampleLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_LIFECYCLE) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogQCSampleLC {
    return new LogbookLogQCSampleLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogQCSampleLC {
    return new LogbookLogQCSampleLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogQCSampleLC {
    return new LogbookLogQCSampleLC().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogQCSampleLC | PlainMessage<LogbookLogQCSampleLC> | undefined, b: LogbookLogQCSampleLC | PlainMessage<LogbookLogQCSampleLC> | undefined): boolean {
    return proto3.util.equals(LogbookLogQCSampleLC, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.QCSamplesServiceCreateRequest
 */
export class QCSamplesServiceCreateRequest extends Message<QCSamplesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 8;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated family ID
   *
   * @generated from field: uint64 family_id = 10;
   */
  familyId = protoInt64.zero;

  /**
   * The UUID of the inventory item
   *
   * @generated from field: string inventory_item_uuid = 11;
   */
  inventoryItemUuid = "";

  /**
   * The ID of the qc group
   *
   * @generated from field: uint64 qc_group_id = 12;
   */
  qcGroupId = protoInt64.zero;

  /**
   * The location ID of where the record is created
   *
   * @generated from field: uint64 location_id = 13;
   */
  locationId = protoInt64.zero;

  /**
   * The name that will be used as a prefix
   *
   * @generated from field: string name_prefix = 20;
   */
  namePrefix = "";

  /**
   * The description of the qc sample
   *
   * @generated from field: string description = 21;
   */
  description = "";

  /**
   * The number of samples that need to be created
   *
   * @generated from field: uint64 sample_count = 30;
   */
  sampleCount = protoInt64.zero;

  constructor(data?: PartialMessage<QCSamplesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "inventory_item_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "qc_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "sample_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesServiceCreateRequest {
    return new QCSamplesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesServiceCreateRequest {
    return new QCSamplesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesServiceCreateRequest {
    return new QCSamplesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesServiceCreateRequest | PlainMessage<QCSamplesServiceCreateRequest> | undefined, b: QCSamplesServiceCreateRequest | PlainMessage<QCSamplesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(QCSamplesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.QCSamplesServiceUpdateRequest
 */
export class QCSamplesServiceUpdateRequest extends Message<QCSamplesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 8;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The name of the qc sample
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The description of the qc sample
   *
   * @generated from field: string description = 21;
   */
  description = "";

  constructor(data?: PartialMessage<QCSamplesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesServiceUpdateRequest {
    return new QCSamplesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesServiceUpdateRequest {
    return new QCSamplesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesServiceUpdateRequest {
    return new QCSamplesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesServiceUpdateRequest | PlainMessage<QCSamplesServiceUpdateRequest> | undefined, b: QCSamplesServiceUpdateRequest | PlainMessage<QCSamplesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(QCSamplesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Stores the UUID references of the record
 *
 * @generated from message Scailo.QCSampleAncillaryParameters
 */
export class QCSampleAncillaryParameters extends Message<QCSampleAncillaryParameters> {
  /**
   * The UUID of the family
   *
   * @generated from field: string family_uuid = 100;
   */
  familyUuid = "";

  /**
   * The UUID of the inventory item
   *
   * @generated from field: string inventory_item_uuid = 111;
   */
  inventoryItemUuid = "";

  /**
   * The UUID of the qc group
   *
   * @generated from field: string qc_group_uuid = 112;
   */
  qcGroupUuid = "";

  /**
   * The UUID of the location
   *
   * @generated from field: string location_uuid = 113;
   */
  locationUuid = "";

  constructor(data?: PartialMessage<QCSampleAncillaryParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSampleAncillaryParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 100, name: "family_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 111, name: "inventory_item_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 112, name: "qc_group_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 113, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSampleAncillaryParameters {
    return new QCSampleAncillaryParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSampleAncillaryParameters {
    return new QCSampleAncillaryParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSampleAncillaryParameters {
    return new QCSampleAncillaryParameters().fromJsonString(jsonString, options);
  }

  static equals(a: QCSampleAncillaryParameters | PlainMessage<QCSampleAncillaryParameters> | undefined, b: QCSampleAncillaryParameters | PlainMessage<QCSampleAncillaryParameters> | undefined): boolean {
    return proto3.util.equals(QCSampleAncillaryParameters, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.QCSample
 */
export class QCSample extends Message<QCSample> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this qc sample
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this qc sample
   *
   * @generated from field: Scailo.QC_SAMPLE_LIFECYCLE status = 4;
   */
  status = QC_SAMPLE_LIFECYCLE.QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this qc sample
   *
   * @generated from field: repeated Scailo.LogbookLogQCSampleLC logs = 5;
   */
  logs: LogbookLogQCSampleLC[] = [];

  /**
   * The timestamp of when this qc sample was marked as finished
   *
   * @generated from field: uint64 finished_on = 6;
   */
  finishedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 8;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated family type
   *
   * @generated from field: Scailo.FAMILY_TYPE family_type = 9;
   */
  familyType = FAMILY_TYPE.FAMILY_TYPE_ANY_UNSPECIFIED;

  /**
   * The associated family ID
   *
   * @generated from field: uint64 family_id = 10;
   */
  familyId = protoInt64.zero;

  /**
   * The UUID of the inventory item
   *
   * @generated from field: string inventory_item_uuid = 11;
   */
  inventoryItemUuid = "";

  /**
   * The ID of the qc group
   *
   * @generated from field: uint64 qc_group_id = 12;
   */
  qcGroupId = protoInt64.zero;

  /**
   * The location ID of where the record is created
   *
   * @generated from field: uint64 location_id = 13;
   */
  locationId = protoInt64.zero;

  /**
   * The name of the qc sample (will be autogenerated if not provided)
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The description of the qc sample
   *
   * @generated from field: string description = 21;
   */
  description = "";

  constructor(data?: PartialMessage<QCSample>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSample";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_LIFECYCLE) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogQCSampleLC, repeated: true },
    { no: 6, name: "finished_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "family_type", kind: "enum", T: proto3.getEnumType(FAMILY_TYPE) },
    { no: 10, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "inventory_item_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "qc_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSample {
    return new QCSample().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSample {
    return new QCSample().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSample {
    return new QCSample().fromJsonString(jsonString, options);
  }

  static equals(a: QCSample | PlainMessage<QCSample> | undefined, b: QCSample | PlainMessage<QCSample> | undefined): boolean {
    return proto3.util.equals(QCSample, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.QCSampleWithMetadata
 */
export class QCSampleWithMetadata extends Message<QCSampleWithMetadata> {
  /**
   * Stores the QC Sample
   *
   * @generated from field: Scailo.QCSample qc_sample = 1;
   */
  qcSample?: QCSample;

  /**
   * Stores the family information
   *
   * @generated from field: Scailo.Family family = 10;
   */
  family?: Family;

  /**
   * Stores the associated qc group
   *
   * @generated from field: Scailo.QCGroup qc_group = 20;
   */
  qcGroup?: QCGroup;

  /**
   * Stores the generic inventory information
   *
   * @generated from field: Scailo.GenericInventory inventory_item = 30;
   */
  inventoryItem?: GenericInventory;

  constructor(data?: PartialMessage<QCSampleWithMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSampleWithMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "qc_sample", kind: "message", T: QCSample },
    { no: 10, name: "family", kind: "message", T: Family },
    { no: 20, name: "qc_group", kind: "message", T: QCGroup },
    { no: 30, name: "inventory_item", kind: "message", T: GenericInventory },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSampleWithMetadata {
    return new QCSampleWithMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSampleWithMetadata {
    return new QCSampleWithMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSampleWithMetadata {
    return new QCSampleWithMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: QCSampleWithMetadata | PlainMessage<QCSampleWithMetadata> | undefined, b: QCSampleWithMetadata | PlainMessage<QCSampleWithMetadata> | undefined): boolean {
    return proto3.util.equals(QCSampleWithMetadata, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.QCSamplesList
 */
export class QCSamplesList extends Message<QCSamplesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.QCSample list = 1;
   */
  list: QCSample[] = [];

  constructor(data?: PartialMessage<QCSamplesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: QCSample, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesList {
    return new QCSamplesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesList {
    return new QCSamplesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesList {
    return new QCSamplesList().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesList | PlainMessage<QCSamplesList> | undefined, b: QCSamplesList | PlainMessage<QCSamplesList> | undefined): boolean {
    return proto3.util.equals(QCSamplesList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of QC samples with metadata
 *
 * @generated from message Scailo.QCSamplesWithMetadataList
 */
export class QCSamplesWithMetadataList extends Message<QCSamplesWithMetadataList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.QCSampleWithMetadata list = 1;
   */
  list: QCSampleWithMetadata[] = [];

  constructor(data?: PartialMessage<QCSamplesWithMetadataList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesWithMetadataList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: QCSampleWithMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesWithMetadataList {
    return new QCSamplesWithMetadataList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesWithMetadataList {
    return new QCSamplesWithMetadataList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesWithMetadataList {
    return new QCSamplesWithMetadataList().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesWithMetadataList | PlainMessage<QCSamplesWithMetadataList> | undefined, b: QCSamplesWithMetadataList | PlainMessage<QCSamplesWithMetadataList> | undefined): boolean {
    return proto3.util.equals(QCSamplesWithMetadataList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.QCSamplesServicePaginationReq
 */
export class QCSamplesServicePaginationReq extends Message<QCSamplesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_SAMPLE_SORT_KEY sort_key = 5;
   */
  sortKey = QC_SAMPLE_SORT_KEY.QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this qc sample
   *
   * @generated from field: Scailo.QC_SAMPLE_LIFECYCLE status = 6;
   */
  status = QC_SAMPLE_LIFECYCLE.QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<QCSamplesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_LIFECYCLE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesServicePaginationReq {
    return new QCSamplesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesServicePaginationReq {
    return new QCSamplesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesServicePaginationReq {
    return new QCSamplesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesServicePaginationReq | PlainMessage<QCSamplesServicePaginationReq> | undefined, b: QCSamplesServicePaginationReq | PlainMessage<QCSamplesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(QCSamplesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.QCSamplesServicePaginationResponse
 */
export class QCSamplesServicePaginationResponse extends Message<QCSamplesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.QCSample payload = 4;
   */
  payload: QCSample[] = [];

  constructor(data?: PartialMessage<QCSamplesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: QCSample, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesServicePaginationResponse {
    return new QCSamplesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesServicePaginationResponse {
    return new QCSamplesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesServicePaginationResponse {
    return new QCSamplesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesServicePaginationResponse | PlainMessage<QCSamplesServicePaginationResponse> | undefined, b: QCSamplesServicePaginationResponse | PlainMessage<QCSamplesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(QCSamplesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.QCSamplesServiceFilterReq
 */
export class QCSamplesServiceFilterReq extends Message<QCSamplesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_SAMPLE_SORT_KEY sort_key = 5;
   */
  sortKey = QC_SAMPLE_SORT_KEY.QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this qc sample
   *
   * @generated from field: Scailo.QC_SAMPLE_LIFECYCLE status = 10;
   */
  status = QC_SAMPLE_LIFECYCLE.QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of finished timestamp
   *
   * @generated from field: uint64 finished_on_start = 15;
   */
  finishedOnStart = protoInt64.zero;

  /**
   * The end range of finished timestamp
   *
   * @generated from field: uint64 finished_on_end = 16;
   */
  finishedOnEnd = protoInt64.zero;

  /**
   * The associated family type
   *
   * @generated from field: Scailo.FAMILY_TYPE family_type = 17;
   */
  familyType = FAMILY_TYPE.FAMILY_TYPE_ANY_UNSPECIFIED;

  /**
   * The associated family ID
   *
   * @generated from field: uint64 family_id = 18;
   */
  familyId = protoInt64.zero;

  /**
   * The ID of the qc group
   *
   * @generated from field: uint64 qc_group_id = 19;
   */
  qcGroupId = protoInt64.zero;

  /**
   * The UUID of the inventory item
   *
   * @generated from field: string inventory_item_uuid = 20;
   */
  inventoryItemUuid = "";

  /**
   * The location ID of where the record is created
   *
   * @generated from field: uint64 location_id = 21;
   */
  locationId = protoInt64.zero;

  /**
   * ------------------------------------------------------------
   * Higher order filters
   * ------------------------------------------------------------
   * The associated production plan ID
   *
   * @generated from field: uint64 production_plan_id = 50;
   */
  productionPlanId = protoInt64.zero;

  /**
   * The associated goods receipt ID
   *
   * @generated from field: uint64 goods_receipt_id = 51;
   */
  goodsReceiptId = protoInt64.zero;

  /**
   * The associated inward job free issue material ID
   *
   * @generated from field: uint64 inward_job_free_issue_material_id = 52;
   */
  inwardJobFreeIssueMaterialId = protoInt64.zero;

  /**
   * The associated vendor ID
   *
   * @generated from field: uint64 vendor_id = 55;
   */
  vendorId = protoInt64.zero;

  /**
   * The associated buyer client ID of the linked sales order
   *
   * ------------------------------------------------------------
   *
   * @generated from field: uint64 buyer_client_id = 70;
   */
  buyerClientId = protoInt64.zero;

  constructor(data?: PartialMessage<QCSamplesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_LIFECYCLE) },
    { no: 15, name: "finished_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "finished_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "family_type", kind: "enum", T: proto3.getEnumType(FAMILY_TYPE) },
    { no: 18, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "qc_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "inventory_item_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 50, name: "production_plan_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "goods_receipt_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "inward_job_free_issue_material_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 55, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 70, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesServiceFilterReq {
    return new QCSamplesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesServiceFilterReq {
    return new QCSamplesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesServiceFilterReq {
    return new QCSamplesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesServiceFilterReq | PlainMessage<QCSamplesServiceFilterReq> | undefined, b: QCSamplesServiceFilterReq | PlainMessage<QCSamplesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(QCSamplesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.QCSamplesServiceCountReq
 */
export class QCSamplesServiceCountReq extends Message<QCSamplesServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this qc sample
   *
   * @generated from field: Scailo.QC_SAMPLE_LIFECYCLE status = 10;
   */
  status = QC_SAMPLE_LIFECYCLE.QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of finished timestamp
   *
   * @generated from field: uint64 finished_on_start = 15;
   */
  finishedOnStart = protoInt64.zero;

  /**
   * The end range of finished timestamp
   *
   * @generated from field: uint64 finished_on_end = 16;
   */
  finishedOnEnd = protoInt64.zero;

  /**
   * The associated family type
   *
   * @generated from field: Scailo.FAMILY_TYPE family_type = 17;
   */
  familyType = FAMILY_TYPE.FAMILY_TYPE_ANY_UNSPECIFIED;

  /**
   * The associated family ID
   *
   * @generated from field: uint64 family_id = 18;
   */
  familyId = protoInt64.zero;

  /**
   * The ID of the qc group
   *
   * @generated from field: uint64 qc_group_id = 19;
   */
  qcGroupId = protoInt64.zero;

  /**
   * The UUID of the inventory item
   *
   * @generated from field: string inventory_item_uuid = 20;
   */
  inventoryItemUuid = "";

  /**
   * The location ID of where the record is created
   *
   * @generated from field: uint64 location_id = 21;
   */
  locationId = protoInt64.zero;

  /**
   * ------------------------------------------------------------
   * Higher order filters
   * ------------------------------------------------------------
   * The associated production plan ID
   *
   * @generated from field: uint64 production_plan_id = 50;
   */
  productionPlanId = protoInt64.zero;

  /**
   * The associated goods receipt ID
   *
   * @generated from field: uint64 goods_receipt_id = 51;
   */
  goodsReceiptId = protoInt64.zero;

  /**
   * The associated inward job free issue material ID
   *
   * @generated from field: uint64 inward_job_free_issue_material_id = 52;
   */
  inwardJobFreeIssueMaterialId = protoInt64.zero;

  /**
   * The associated vendor ID
   *
   * @generated from field: uint64 vendor_id = 55;
   */
  vendorId = protoInt64.zero;

  /**
   * The associated buyer client ID of the linked sales order
   *
   * ------------------------------------------------------------
   *
   * @generated from field: uint64 buyer_client_id = 70;
   */
  buyerClientId = protoInt64.zero;

  constructor(data?: PartialMessage<QCSamplesServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_LIFECYCLE) },
    { no: 15, name: "finished_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "finished_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "family_type", kind: "enum", T: proto3.getEnumType(FAMILY_TYPE) },
    { no: 18, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "qc_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "inventory_item_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 50, name: "production_plan_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "goods_receipt_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "inward_job_free_issue_material_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 55, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 70, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesServiceCountReq {
    return new QCSamplesServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesServiceCountReq {
    return new QCSamplesServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesServiceCountReq {
    return new QCSamplesServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesServiceCountReq | PlainMessage<QCSamplesServiceCountReq> | undefined, b: QCSamplesServiceCountReq | PlainMessage<QCSamplesServiceCountReq> | undefined): boolean {
    return proto3.util.equals(QCSamplesServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.QCSamplesServiceSearchAllReq
 */
export class QCSamplesServiceSearchAllReq extends Message<QCSamplesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_SAMPLE_SORT_KEY sort_key = 5;
   */
  sortKey = QC_SAMPLE_SORT_KEY.QC_SAMPLE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.QC_SAMPLE_LIFECYCLE status = 10;
   */
  status = QC_SAMPLE_LIFECYCLE.QC_SAMPLE_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The associated family type
   *
   * @generated from field: Scailo.FAMILY_TYPE family_type = 17;
   */
  familyType = FAMILY_TYPE.FAMILY_TYPE_ANY_UNSPECIFIED;

  /**
   * The associated family ID
   *
   * @generated from field: uint64 family_id = 18;
   */
  familyId = protoInt64.zero;

  /**
   * The ID of the qc group
   *
   * @generated from field: uint64 qc_group_id = 19;
   */
  qcGroupId = protoInt64.zero;

  /**
   * The UUID of the inventory item
   *
   * @generated from field: string inventory_item_uuid = 20;
   */
  inventoryItemUuid = "";

  constructor(data?: PartialMessage<QCSamplesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_LIFECYCLE) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "family_type", kind: "enum", T: proto3.getEnumType(FAMILY_TYPE) },
    { no: 18, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "qc_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "inventory_item_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesServiceSearchAllReq {
    return new QCSamplesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesServiceSearchAllReq {
    return new QCSamplesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesServiceSearchAllReq {
    return new QCSamplesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesServiceSearchAllReq | PlainMessage<QCSamplesServiceSearchAllReq> | undefined, b: QCSamplesServiceSearchAllReq | PlainMessage<QCSamplesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(QCSamplesServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an parameter in a qc sample
 *
 * @generated from message Scailo.QCSamplesServiceParameterUpdateRequest
 */
export class QCSamplesServiceParameterUpdateRequest extends Message<QCSamplesServiceParameterUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Stores the observed value when it is a number
   *
   * @generated from field: int64 number_observed_value = 13;
   */
  numberObservedValue = protoInt64.zero;

  /**
   * Stores the observed value when it is a string
   *
   * @generated from field: string text_observed_value = 14;
   */
  textObservedValue = "";

  /**
   * An optional description
   *
   * @generated from field: string description = 20;
   */
  description = "";

  constructor(data?: PartialMessage<QCSamplesServiceParameterUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesServiceParameterUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "number_observed_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "text_observed_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesServiceParameterUpdateRequest {
    return new QCSamplesServiceParameterUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesServiceParameterUpdateRequest {
    return new QCSamplesServiceParameterUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesServiceParameterUpdateRequest {
    return new QCSamplesServiceParameterUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesServiceParameterUpdateRequest | PlainMessage<QCSamplesServiceParameterUpdateRequest> | undefined, b: QCSamplesServiceParameterUpdateRequest | PlainMessage<QCSamplesServiceParameterUpdateRequest> | undefined): boolean {
    return proto3.util.equals(QCSamplesServiceParameterUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an parameter associated to a qc sample
 *
 * @generated from message Scailo.QCSampleParameter
 */
export class QCSampleParameter extends Message<QCSampleParameter> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this qc sample
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the username of the employee who performed the check
   *
   * @generated from field: string checked_by = 8;
   */
  checkedBy = "";

  /**
   * Stores the timestamp of when this check was performed
   *
   * @generated from field: uint64 checked_at = 9;
   */
  checkedAt = protoInt64.zero;

  /**
   * Stores the ID of the qc sample
   *
   * @generated from field: uint64 qc_sample_id = 10;
   */
  qcSampleId = protoInt64.zero;

  /**
   * The ID of the qc param that is a part of the qc sample
   *
   * @generated from field: uint64 qc_param_id = 11;
   */
  qcParamId = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: uint64 uom_id = 12;
   */
  uomId = protoInt64.zero;

  /**
   * Stores the observed value when it is a number
   *
   * @generated from field: int64 number_observed_value = 13;
   */
  numberObservedValue = protoInt64.zero;

  /**
   * Stores the observed value when it is a string
   *
   * @generated from field: string text_observed_value = 14;
   */
  textObservedValue = "";

  /**
   * Denotes if this parameter is internal or not (if set to true, then this value will be hidden. If set to false, then this value will be printed)
   *
   * @generated from field: bool is_internal = 19;
   */
  isInternal = false;

  /**
   * The acceptable value type of the item
   *
   * @generated from field: Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE acceptable_value_type = 20;
   */
  acceptableValueType = QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_NUMBER_ABSOLUTE_UNSPECIFIED;

  /**
   * The acceptable value (in cents) in case the acceptable value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_acceptable_value = 21;
   */
  numberAcceptableValue = protoInt64.zero;

  /**
   * The relative lower bound (in cents) of the number_acceptable_value that serves as a reference point for the test
   *
   * @generated from field: int64 number_relative_lower_bound = 22;
   */
  numberRelativeLowerBound = protoInt64.zero;

  /**
   * The relative upper bound (in cents) of the number_acceptable_value that serves as a reference point for the test
   *
   * @generated from field: int64 number_relative_upper_bound = 23;
   */
  numberRelativeUpperBound = protoInt64.zero;

  /**
   * The list of values that are acceptable in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_acceptable_values = 30;
   */
  textAcceptableValues: string[] = [];

  /**
   * The list of values that are acceptable (but with deviation) in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_acceptable_values_with_deviation = 31;
   */
  textAcceptableValuesWithDeviation: string[] = [];

  /**
   * The list of unacceptable values in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_unacceptable_values = 32;
   */
  textUnacceptableValues: string[] = [];

  /**
   * An optional description
   *
   * @generated from field: string description = 40;
   */
  description = "";

  constructor(data?: PartialMessage<QCSampleParameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSampleParameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "checked_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "checked_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "qc_sample_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "qc_param_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "number_observed_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "text_observed_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "is_internal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "acceptable_value_type", kind: "enum", T: proto3.getEnumType(QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE) },
    { no: 21, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_relative_lower_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_relative_upper_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_acceptable_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_values_with_deviation", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 32, name: "text_unacceptable_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 40, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSampleParameter {
    return new QCSampleParameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSampleParameter {
    return new QCSampleParameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSampleParameter {
    return new QCSampleParameter().fromJsonString(jsonString, options);
  }

  static equals(a: QCSampleParameter | PlainMessage<QCSampleParameter> | undefined, b: QCSampleParameter | PlainMessage<QCSampleParameter> | undefined): boolean {
    return proto3.util.equals(QCSampleParameter, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of qc sample parameters
 *
 * @generated from message Scailo.QCSampleParametersList
 */
export class QCSampleParametersList extends Message<QCSampleParametersList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.QCSampleParameter list = 1;
   */
  list: QCSampleParameter[] = [];

  constructor(data?: PartialMessage<QCSampleParametersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSampleParametersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: QCSampleParameter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSampleParametersList {
    return new QCSampleParametersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSampleParametersList {
    return new QCSampleParametersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSampleParametersList {
    return new QCSampleParametersList().fromJsonString(jsonString, options);
  }

  static equals(a: QCSampleParametersList | PlainMessage<QCSampleParametersList> | undefined, b: QCSampleParametersList | PlainMessage<QCSampleParametersList> | undefined): boolean {
    return proto3.util.equals(QCSampleParametersList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.QCSampleParameterHistoryRequest
 */
export class QCSampleParameterHistoryRequest extends Message<QCSampleParameterHistoryRequest> {
  /**
   * Stores the qc sample parameter ID
   *
   * @generated from field: uint64 qc_sample_parameter_id = 10;
   */
  qcSampleParameterId = protoInt64.zero;

  constructor(data?: PartialMessage<QCSampleParameterHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSampleParameterHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "qc_sample_parameter_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSampleParameterHistoryRequest {
    return new QCSampleParameterHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSampleParameterHistoryRequest {
    return new QCSampleParameterHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSampleParameterHistoryRequest {
    return new QCSampleParameterHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCSampleParameterHistoryRequest | PlainMessage<QCSampleParameterHistoryRequest> | undefined, b: QCSampleParameterHistoryRequest | PlainMessage<QCSampleParameterHistoryRequest> | undefined): boolean {
    return proto3.util.equals(QCSampleParameterHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are present in a history response
 *
 * @generated from message Scailo.QCSampleParameterHistory
 */
export class QCSampleParameterHistory extends Message<QCSampleParameterHistory> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this qc sample
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the username of the employee who performed the check
   *
   * @generated from field: string checked_by = 8;
   */
  checkedBy = "";

  /**
   * Stores the timestamp of when this check was performed
   *
   * @generated from field: uint64 checked_at = 9;
   */
  checkedAt = protoInt64.zero;

  /**
   * Stores the ID of the qc sample parameter
   *
   * @generated from field: uint64 qc_sample_parameter_id = 10;
   */
  qcSampleParameterId = protoInt64.zero;

  /**
   * Stores the observed value when it is a number
   *
   * @generated from field: int64 number_observed_value = 13;
   */
  numberObservedValue = protoInt64.zero;

  /**
   * Stores the observed value when it is a string
   *
   * @generated from field: string text_observed_value = 14;
   */
  textObservedValue = "";

  /**
   * An optional description
   *
   * @generated from field: string description = 40;
   */
  description = "";

  constructor(data?: PartialMessage<QCSampleParameterHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSampleParameterHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "checked_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "checked_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "qc_sample_parameter_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "number_observed_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "text_observed_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSampleParameterHistory {
    return new QCSampleParameterHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSampleParameterHistory {
    return new QCSampleParameterHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSampleParameterHistory {
    return new QCSampleParameterHistory().fromJsonString(jsonString, options);
  }

  static equals(a: QCSampleParameterHistory | PlainMessage<QCSampleParameterHistory> | undefined, b: QCSampleParameterHistory | PlainMessage<QCSampleParameterHistory> | undefined): boolean {
    return proto3.util.equals(QCSampleParameterHistory, a, b);
  }
}

/**
 *
 * Describes the list of history parameters
 *
 * @generated from message Scailo.QCSampleParameterHistoryList
 */
export class QCSampleParameterHistoryList extends Message<QCSampleParameterHistoryList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.QCSampleParameterHistory list = 1;
   */
  list: QCSampleParameterHistory[] = [];

  constructor(data?: PartialMessage<QCSampleParameterHistoryList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSampleParameterHistoryList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: QCSampleParameterHistory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSampleParameterHistoryList {
    return new QCSampleParameterHistoryList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSampleParameterHistoryList {
    return new QCSampleParameterHistoryList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSampleParameterHistoryList {
    return new QCSampleParameterHistoryList().fromJsonString(jsonString, options);
  }

  static equals(a: QCSampleParameterHistoryList | PlainMessage<QCSampleParameterHistoryList> | undefined, b: QCSampleParameterHistoryList | PlainMessage<QCSampleParameterHistoryList> | undefined): boolean {
    return proto3.util.equals(QCSampleParameterHistoryList, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve parameters.
 *
 * @generated from message Scailo.QCSampleParametersSearchRequest
 */
export class QCSampleParametersSearchRequest extends Message<QCSampleParametersSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_SAMPLE_PARAMETER_SORT_KEY sort_key = 5;
   */
  sortKey = QC_SAMPLE_PARAMETER_SORT_KEY.QC_SAMPLE_PARAMETER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Stores the username of the employee who performed the check
   *
   * @generated from field: string checked_by = 10;
   */
  checkedBy = "";

  /**
   * The start range of checked timestamp
   *
   * @generated from field: uint64 checked_at_start = 11;
   */
  checkedAtStart = protoInt64.zero;

  /**
   * The end range of checked timestamp
   *
   * @generated from field: uint64 checked_at_end = 12;
   */
  checkedAtEnd = protoInt64.zero;

  /**
   * The ID of the qc sample
   *
   * @generated from field: uint64 qc_sample_id = 13;
   */
  qcSampleId = protoInt64.zero;

  /**
   * The ID of the qc param that is a part of the qc sample
   *
   * @generated from field: uint64 qc_param_id = 14;
   */
  qcParamId = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: uint64 uom_id = 15;
   */
  uomId = protoInt64.zero;

  /**
   * The start range of number observed value
   *
   * @generated from field: int64 number_observed_value_start = 20;
   */
  numberObservedValueStart = protoInt64.zero;

  /**
   * The end range of number observed value
   *
   * @generated from field: int64 number_observed_value_end = 21;
   */
  numberObservedValueEnd = protoInt64.zero;

  /**
   * The text observed value
   *
   * @generated from field: string text_observed_value = 22;
   */
  textObservedValue = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  /**
   * ------------------------------------------------------------
   * Higher order filters
   * ------------------------------------------------------------
   * The associated production plan ID
   *
   * @generated from field: uint64 production_plan_id = 50;
   */
  productionPlanId = protoInt64.zero;

  /**
   * The associated goods receipt ID
   *
   * @generated from field: uint64 goods_receipt_id = 51;
   */
  goodsReceiptId = protoInt64.zero;

  /**
   * The associated inward job free issue material ID
   *
   * @generated from field: uint64 inward_job_free_issue_material_id = 52;
   */
  inwardJobFreeIssueMaterialId = protoInt64.zero;

  /**
   * The associated vendor ID
   *
   * @generated from field: uint64 vendor_id = 55;
   */
  vendorId = protoInt64.zero;

  /**
   * The associated family ID
   *
   * ------------------------------------------------------------
   *
   * @generated from field: uint64 family_id = 60;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<QCSampleParametersSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSampleParametersSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_SAMPLE_PARAMETER_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "checked_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "checked_at_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "checked_at_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "qc_sample_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "qc_param_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "number_observed_value_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 21, name: "number_observed_value_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "text_observed_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "production_plan_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "goods_receipt_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "inward_job_free_issue_material_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 55, name: "vendor_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSampleParametersSearchRequest {
    return new QCSampleParametersSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSampleParametersSearchRequest {
    return new QCSampleParametersSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSampleParametersSearchRequest {
    return new QCSampleParametersSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCSampleParametersSearchRequest | PlainMessage<QCSampleParametersSearchRequest> | undefined, b: QCSampleParametersSearchRequest | PlainMessage<QCSampleParametersSearchRequest> | undefined): boolean {
    return proto3.util.equals(QCSampleParametersSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination parameters request
 *
 * @generated from message Scailo.QCSamplesServicePaginatedParametersResponse
 */
export class QCSamplesServicePaginatedParametersResponse extends Message<QCSamplesServicePaginatedParametersResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.QCSampleParameter payload = 4;
   */
  payload: QCSampleParameter[] = [];

  constructor(data?: PartialMessage<QCSamplesServicePaginatedParametersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCSamplesServicePaginatedParametersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: QCSampleParameter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCSamplesServicePaginatedParametersResponse {
    return new QCSamplesServicePaginatedParametersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCSamplesServicePaginatedParametersResponse {
    return new QCSamplesServicePaginatedParametersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCSamplesServicePaginatedParametersResponse {
    return new QCSamplesServicePaginatedParametersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QCSamplesServicePaginatedParametersResponse | PlainMessage<QCSamplesServicePaginatedParametersResponse> | undefined, b: QCSamplesServicePaginatedParametersResponse | PlainMessage<QCSamplesServicePaginatedParametersResponse> | undefined): boolean {
    return proto3.util.equals(QCSamplesServicePaginatedParametersResponse, a, b);
  }
}

