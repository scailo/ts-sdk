// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file work_orders.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { WorkOrder, WorkOrderAncillaryParameters, WorkOrderItem, WorkOrderItemHistoryRequest, WorkOrderItemProspectiveInfoRequest, WorkOrderItemsSearchRequest, WorkOrderProductionStatisticsList, WorkOrderRequirementStatisticsList, WorkOrdersItemsList, WorkOrdersList, WorkOrdersServiceAutofillRequest, WorkOrdersServiceCountReq, WorkOrdersServiceCreateRequest, WorkOrdersServiceFilterReq, WorkOrdersServiceItemCreateRequest, WorkOrdersServiceItemUpdateRequest, WorkOrdersServicePaginatedItemsResponse, WorkOrdersServicePaginationReq, WorkOrdersServicePaginationResponse, WorkOrdersServiceSearchAllReq, WorkOrdersServiceUpdateRequest } from "./work_orders.scailo_pb.js";
import { ActiveStatus, BooleanResponse, CountInSLCStatusRequest, CountResponse, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDWithFile, IdentifierUUIDWithUserComment, IdentifierWithEmailAttributes, IdentifierWithSearchKey, IdentifierWithUserComment, ReorderItemsRequest, RepeatWithDeliveryDate, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { FamiliesList, FilterFamiliesReqForIdentifier } from "./families.scailo_pb.js";

/**
 *
 * Describes the common methods applicable on each work order
 *
 * @generated from service Scailo.WorkOrdersService
 */
export const WorkOrdersService = {
  typeName: "Scailo.WorkOrdersService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.WorkOrdersService.Create
     */
    create: {
      name: "Create",
      I: WorkOrdersServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.WorkOrdersService.Draft
     */
    draft: {
      name: "Draft",
      I: WorkOrdersServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.WorkOrdersService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: WorkOrdersServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.WorkOrdersService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.WorkOrdersService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.WorkOrdersService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.WorkOrdersService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.WorkOrdersService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: WorkOrdersServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.WorkOrdersService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.WorkOrdersService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.WorkOrdersService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.WorkOrdersService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.WorkOrdersService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: RepeatWithDeliveryDate,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.WorkOrdersService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.WorkOrdersService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send Email
     *
     * @generated from rpc Scailo.WorkOrdersService.SendEmail
     */
    sendEmail: {
      name: "SendEmail",
      I: IdentifierWithEmailAttributes,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Autofill the work order
     *
     * @generated from rpc Scailo.WorkOrdersService.Autofill
     */
    autofill: {
      name: "Autofill",
      I: WorkOrdersServiceAutofillRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Checks if the Work Order can be marked as completed
     *
     * @generated from rpc Scailo.WorkOrdersService.IsCompletable
     */
    isCompletable: {
      name: "IsCompletable",
      I: IdentifierUUID,
      O: BooleanResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an item to a work order
     *
     * @generated from rpc Scailo.WorkOrdersService.AddWorkOrderItem
     */
    addWorkOrderItem: {
      name: "AddWorkOrderItem",
      I: WorkOrdersServiceItemCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an item in a work order
     *
     * @generated from rpc Scailo.WorkOrdersService.ModifyWorkOrderItem
     */
    modifyWorkOrderItem: {
      name: "ModifyWorkOrderItem",
      I: WorkOrdersServiceItemUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve an item in a work order
     *
     * @generated from rpc Scailo.WorkOrdersService.ApproveWorkOrderItem
     */
    approveWorkOrderItem: {
      name: "ApproveWorkOrderItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an item in a work order
     *
     * @generated from rpc Scailo.WorkOrdersService.DeleteWorkOrderItem
     */
    deleteWorkOrderItem: {
      name: "DeleteWorkOrderItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder items in a work order
     *
     * @generated from rpc Scailo.WorkOrdersService.ReorderWorkOrderItems
     */
    reorderWorkOrderItems: {
      name: "ReorderWorkOrderItems",
      I: ReorderItemsRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View Work Order Item by ID
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewWorkOrderItemByID
     */
    viewWorkOrderItemByID: {
      name: "ViewWorkOrderItemByID",
      I: Identifier,
      O: WorkOrderItem,
      kind: MethodKind.Unary,
    },
    /**
     * View approved work order items for given work order ID
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewApprovedWorkOrderItems
     */
    viewApprovedWorkOrderItems: {
      name: "ViewApprovedWorkOrderItems",
      I: IdentifierWithSearchKey,
      O: WorkOrdersItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved work order items for given work order ID
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewUnapprovedWorkOrderItems
     */
    viewUnapprovedWorkOrderItems: {
      name: "ViewUnapprovedWorkOrderItems",
      I: IdentifierWithSearchKey,
      O: WorkOrdersItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the work order item
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewWorkOrderItemHistory
     */
    viewWorkOrderItemHistory: {
      name: "ViewWorkOrderItemHistory",
      I: WorkOrderItemHistoryRequest,
      O: WorkOrdersItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View approved work order items for given work order ID with pagination
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewPaginatedApprovedWorkOrderItems
     */
    viewPaginatedApprovedWorkOrderItems: {
      name: "ViewPaginatedApprovedWorkOrderItems",
      I: WorkOrderItemsSearchRequest,
      O: WorkOrdersServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved work order items for given work order ID with pagination
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewPaginatedUnapprovedWorkOrderItems
     */
    viewPaginatedUnapprovedWorkOrderItems: {
      name: "ViewPaginatedUnapprovedWorkOrderItems",
      I: WorkOrderItemsSearchRequest,
      O: WorkOrdersServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through work order items with pagination
     *
     * @generated from rpc Scailo.WorkOrdersService.SearchItemsWithPagination
     */
    searchItemsWithPagination: {
      name: "SearchItemsWithPagination",
      I: WorkOrderItemsSearchRequest,
      O: WorkOrdersServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that could be used to upload items from the filled CSV file. The same file can also be used as a template when there are no existing records
     *
     * @generated from rpc Scailo.WorkOrdersService.DownloadItemsAsCSV
     */
    downloadItemsAsCSV: {
      name: "DownloadItemsAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
     *
     * @generated from rpc Scailo.WorkOrdersService.UploadWorkOrderItems
     */
    uploadWorkOrderItems: {
      name: "UploadWorkOrderItems",
      I: IdentifierUUIDWithFile,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: WorkOrder,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: WorkOrder,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components by ID (without logs)
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewEssentialByID
     */
    viewEssentialByID: {
      name: "ViewEssentialByID",
      I: Identifier,
      O: WorkOrder,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components (without logs) that matches the given UUID
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewEssentialByUUID
     */
    viewEssentialByUUID: {
      name: "ViewEssentialByUUID",
      I: IdentifierUUID,
      O: WorkOrder,
      kind: MethodKind.Unary,
    },
    /**
     * View all records with the given IDs
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewFromIDs
     */
    viewFromIDs: {
      name: "ViewFromIDs",
      I: IdentifiersList,
      O: WorkOrdersList,
      kind: MethodKind.Unary,
    },
    /**
     * View the ancillary parameters (UUIDs of the internal references) by UUID
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewAncillaryParametersByUUID
     */
    viewAncillaryParametersByUUID: {
      name: "ViewAncillaryParametersByUUID",
      I: IdentifierUUID,
      O: WorkOrderAncillaryParameters,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: WorkOrdersList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: WorkOrdersList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: WorkOrdersServicePaginationReq,
      O: WorkOrdersServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View prospective families for the given work order
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewProspectiveFamilies
     */
    viewProspectiveFamilies: {
      name: "ViewProspectiveFamilies",
      I: IdentifierWithSearchKey,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * Filter prospective families for the record represented by the given UUID identifier
     *
     * @generated from rpc Scailo.WorkOrdersService.FilterProspectiveFamilies
     */
    filterProspectiveFamilies: {
      name: "FilterProspectiveFamilies",
      I: FilterFamiliesReqForIdentifier,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View prospective work order item info for the given family ID and work order ID
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewProspectiveWorkOrderItem
     */
    viewProspectiveWorkOrderItem: {
      name: "ViewProspectiveWorkOrderItem",
      I: WorkOrderItemProspectiveInfoRequest,
      O: WorkOrdersServiceItemCreateRequest,
      kind: MethodKind.Unary,
    },
    /**
     * View requirement statistics (match with the selected sales order) of the work order
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewRequirementStatistics
     */
    viewRequirementStatistics: {
      name: "ViewRequirementStatistics",
      I: IdentifierUUID,
      O: WorkOrderRequirementStatisticsList,
      kind: MethodKind.Unary,
    },
    /**
     * View production statistics (match with all the associated production plans) of the work order
     *
     * @generated from rpc Scailo.WorkOrdersService.ViewProductionStatistics
     */
    viewProductionStatistics: {
      name: "ViewProductionStatistics",
      I: IdentifierUUID,
      O: WorkOrderProductionStatisticsList,
      kind: MethodKind.Unary,
    },
    /**
     * Download work order with the given IdentifierUUID (can be used to allow public downloads)
     *
     * @generated from rpc Scailo.WorkOrdersService.DownloadByUUID
     */
    downloadByUUID: {
      name: "DownloadByUUID",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.WorkOrdersService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: WorkOrdersServiceSearchAllReq,
      O: WorkOrdersList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.WorkOrdersService.Filter
     */
    filter: {
      name: "Filter",
      I: WorkOrdersServiceFilterReq,
      O: WorkOrdersList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.WorkOrdersService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.WorkOrdersService.Count
     */
    count: {
      name: "Count",
      I: WorkOrdersServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
     *
     * @generated from rpc Scailo.WorkOrdersService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: WorkOrdersServiceFilterReq,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
  }
} as const;

