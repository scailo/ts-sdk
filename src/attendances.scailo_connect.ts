// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file attendances.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Attendance, AttendancesList, AttendancesServiceCountReq, AttendancesServiceCreateRequest, AttendancesServiceFilterReq, AttendancesServiceImageEntryRequest, AttendancesServiceImageExitRequest, AttendancesServicePaginationReq, AttendancesServicePaginationResponse, AttendancesServiceSearchAllReq, AttendancesServiceUpdateRequest } from "./attendances.scailo_pb.js";
import { ActiveStatus, BooleanResponse, CountInSLCStatusRequest, CountResponse, GPSCoordinatesResponse, Identifier, IdentifierUUID, IdentifierWithUserComment, ImageResponse } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each attendance
 *
 * @generated from service Scailo.AttendancesService
 */
export const AttendancesService = {
  typeName: "Scailo.AttendancesService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.AttendancesService.Create
     */
    create: {
      name: "Create",
      I: AttendancesServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.AttendancesService.Draft
     */
    draft: {
      name: "Draft",
      I: AttendancesServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.AttendancesService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: AttendancesServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.AttendancesService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.AttendancesService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.AttendancesService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.AttendancesService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.AttendancesService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: AttendancesServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.AttendancesService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.AttendancesService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.AttendancesService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.AttendancesService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.AttendancesService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (Identifier) returns (Identifier);
     *
     * @generated from rpc Scailo.AttendancesService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Store entry time
     *
     * @generated from rpc Scailo.AttendancesService.RecordImageEntry
     */
    recordImageEntry: {
      name: "RecordImageEntry",
      I: AttendancesServiceImageEntryRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Store exit time
     *
     * @generated from rpc Scailo.AttendancesService.RecordImageExit
     */
    recordImageExit: {
      name: "RecordImageExit",
      I: AttendancesServiceImageExitRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.AttendancesService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Attendance,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.AttendancesService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: AttendancesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.AttendancesService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: AttendancesList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.AttendancesService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: AttendancesServicePaginationReq,
      O: AttendancesServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View entry image for attendance ID
     *
     * @generated from rpc Scailo.AttendancesService.ViewEntryImage
     */
    viewEntryImage: {
      name: "ViewEntryImage",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Confirm that the entry image of the given attendance ID belongs to the user
     *
     * @generated from rpc Scailo.AttendancesService.ConfirmEntryImage
     */
    confirmEntryImage: {
      name: "ConfirmEntryImage",
      I: Identifier,
      O: BooleanResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View exit image for attendance ID
     *
     * @generated from rpc Scailo.AttendancesService.ViewExitImage
     */
    viewExitImage: {
      name: "ViewExitImage",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Confirm that the exit image of the given attendance ID belongs to the user
     *
     * @generated from rpc Scailo.AttendancesService.ConfirmExitImage
     */
    confirmExitImage: {
      name: "ConfirmExitImage",
      I: Identifier,
      O: BooleanResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View entry GPS coordinates for attendance ID
     *
     * @generated from rpc Scailo.AttendancesService.ViewEntryGPSCoordinates
     */
    viewEntryGPSCoordinates: {
      name: "ViewEntryGPSCoordinates",
      I: Identifier,
      O: GPSCoordinatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View exit GPS coordinates for attendance ID
     *
     * @generated from rpc Scailo.AttendancesService.ViewExitGPSCoordinates
     */
    viewExitGPSCoordinates: {
      name: "ViewExitGPSCoordinates",
      I: Identifier,
      O: GPSCoordinatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View the open attendance for a user (with the given identifier), if available. Returns an empty instance if no attendance is available
     *
     * @generated from rpc Scailo.AttendancesService.ViewOpenAttendanceForUser
     */
    viewOpenAttendanceForUser: {
      name: "ViewOpenAttendanceForUser",
      I: Identifier,
      O: Attendance,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.AttendancesService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: AttendancesServiceSearchAllReq,
      O: AttendancesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.AttendancesService.Filter
     */
    filter: {
      name: "Filter",
      I: AttendancesServiceFilterReq,
      O: AttendancesList,
      kind: MethodKind.Unary,
    },
    /**
     * Checks if a user (with the given identifier) has an open attendance (attendance with only entry and no exit)
     *
     * @generated from rpc Scailo.AttendancesService.EmployeeHasOpenAttendance
     */
    employeeHasOpenAttendance: {
      name: "EmployeeHasOpenAttendance",
      I: Identifier,
      O: BooleanResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.AttendancesService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given count criteria
     *
     * @generated from rpc Scailo.AttendancesService.Count
     */
    count: {
      name: "Count",
      I: AttendancesServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

