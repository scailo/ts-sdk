// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file activities_statuses.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ActivitiesStatusesList, ActivitiesStatusesServiceCountReq, ActivitiesStatusesServiceCreateRequest, ActivitiesStatusesServiceFilterReq, ActivitiesStatusesServicePaginationReq, ActivitiesStatusesServicePaginationResponse, ActivitiesStatusesServiceSearchAllReq, ActivitiesStatusesServiceUpdateRequest, ActivityStatus } from "./activities_statuses.scailo_pb.js";
import { ActiveStatus, CountInSLCStatusRequest, CountResponse, Identifier, IdentifierResponse, IdentifierUUID, IdentifierWithUserComment } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each activity status
 *
 * @generated from service Scailo.ActivitiesStatusesService
 */
export const ActivitiesStatusesService = {
  typeName: "Scailo.ActivitiesStatusesService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.Create
     */
    create: {
      name: "Create",
      I: ActivitiesStatusesServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.Draft
     */
    draft: {
      name: "Draft",
      I: ActivitiesStatusesServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: ActivitiesStatusesServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: ActivitiesStatusesServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (Identifier) returns (IdentifierResponse);
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: ActivityStatus,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: ActivitiesStatusesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: ActivitiesStatusesList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: ActivitiesStatusesServicePaginationReq,
      O: ActivitiesStatusesServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: ActivitiesStatusesServiceSearchAllReq,
      O: ActivitiesStatusesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.Filter
     */
    filter: {
      name: "Filter",
      I: ActivitiesStatusesServiceFilterReq,
      O: ActivitiesStatusesList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.ActivitiesStatusesService.Count
     */
    count: {
      name: "Count",
      I: ActivitiesStatusesServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

