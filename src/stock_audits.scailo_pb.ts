// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file stock_audits.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.STOCK_AUDIT_SORT_KEY
 */
export enum STOCK_AUDIT_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: STOCK_AUDIT_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  STOCK_AUDIT_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: STOCK_AUDIT_SORT_KEY_CREATED_AT = 1;
   */
  STOCK_AUDIT_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: STOCK_AUDIT_SORT_KEY_MODIFIED_AT = 2;
   */
  STOCK_AUDIT_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: STOCK_AUDIT_SORT_KEY_APPROVED_ON = 3;
   */
  STOCK_AUDIT_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: STOCK_AUDIT_SORT_KEY_APPROVED_BY = 4;
   */
  STOCK_AUDIT_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: STOCK_AUDIT_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  STOCK_AUDIT_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: STOCK_AUDIT_SORT_KEY_COMPLETED_ON = 6;
   */
  STOCK_AUDIT_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: STOCK_AUDIT_SORT_KEY_REFERENCE_ID = 10;
   */
  STOCK_AUDIT_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: STOCK_AUDIT_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  STOCK_AUDIT_SORT_KEY_FINAL_REF_NUMBER = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(STOCK_AUDIT_SORT_KEY)
proto3.util.setEnumType(STOCK_AUDIT_SORT_KEY, "Scailo.STOCK_AUDIT_SORT_KEY", [
  { no: 0, name: "STOCK_AUDIT_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "STOCK_AUDIT_SORT_KEY_CREATED_AT" },
  { no: 2, name: "STOCK_AUDIT_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "STOCK_AUDIT_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "STOCK_AUDIT_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "STOCK_AUDIT_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "STOCK_AUDIT_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "STOCK_AUDIT_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "STOCK_AUDIT_SORT_KEY_FINAL_REF_NUMBER" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.STOCK_AUDIT_ITEM_SORT_KEY
 */
export enum STOCK_AUDIT_ITEM_SORT_KEY {
  /**
   * Fetch results by id
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  STOCK_AUDIT_ITEM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch results by the creation timestamp
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_SORT_KEY_CREATED_AT = 1;
   */
  STOCK_AUDIT_ITEM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch results by the modified timestamp
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_SORT_KEY_MODIFIED_AT = 2;
   */
  STOCK_AUDIT_ITEM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch results by the approved on timestamp
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_SORT_KEY_APPROVED_ON = 3;
   */
  STOCK_AUDIT_ITEM_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch results by the approved by field
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_SORT_KEY_APPROVED_BY = 4;
   */
  STOCK_AUDIT_ITEM_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch results by the approver's role ID
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  STOCK_AUDIT_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch results by the family ID
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_SORT_KEY_FAMILY_ID = 10;
   */
  STOCK_AUDIT_ITEM_SORT_KEY_FAMILY_ID = 10,

  /**
   * Fetch results by the physical quantity
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_SORT_KEY_PHYSICAL_QUANTITY = 11;
   */
  STOCK_AUDIT_ITEM_SORT_KEY_PHYSICAL_QUANTITY = 11,

  /**
   * Fetch results by the digital quantity
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_SORT_KEY_DIGITAL_QUANTITY = 12;
   */
  STOCK_AUDIT_ITEM_SORT_KEY_DIGITAL_QUANTITY = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(STOCK_AUDIT_ITEM_SORT_KEY)
proto3.util.setEnumType(STOCK_AUDIT_ITEM_SORT_KEY, "Scailo.STOCK_AUDIT_ITEM_SORT_KEY", [
  { no: 0, name: "STOCK_AUDIT_ITEM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "STOCK_AUDIT_ITEM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "STOCK_AUDIT_ITEM_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "STOCK_AUDIT_ITEM_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "STOCK_AUDIT_ITEM_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "STOCK_AUDIT_ITEM_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "STOCK_AUDIT_ITEM_SORT_KEY_FAMILY_ID" },
  { no: 11, name: "STOCK_AUDIT_ITEM_SORT_KEY_PHYSICAL_QUANTITY" },
  { no: 12, name: "STOCK_AUDIT_ITEM_SORT_KEY_DIGITAL_QUANTITY" },
]);

/**
 *
 * Describes the applicable statuses of stock audit items
 *
 * @generated from enum Scailo.STOCK_AUDIT_ITEM_STATUS
 */
export enum STOCK_AUDIT_ITEM_STATUS {
  /**
   * Denotes that status be disregarded. This is used only within search APIs
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_STATUS_ANY_UNSPECIFIED = 0;
   */
  STOCK_AUDIT_ITEM_STATUS_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the stock audit items must have been approved
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_STATUS_APPROVED = 1;
   */
  STOCK_AUDIT_ITEM_STATUS_APPROVED = 1,

  /**
   * Denotes that the stock audit items must be waiting for approval
   *
   * @generated from enum value: STOCK_AUDIT_ITEM_STATUS_UNAPPROVED = 2;
   */
  STOCK_AUDIT_ITEM_STATUS_UNAPPROVED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(STOCK_AUDIT_ITEM_STATUS)
proto3.util.setEnumType(STOCK_AUDIT_ITEM_STATUS, "Scailo.STOCK_AUDIT_ITEM_STATUS", [
  { no: 0, name: "STOCK_AUDIT_ITEM_STATUS_ANY_UNSPECIFIED" },
  { no: 1, name: "STOCK_AUDIT_ITEM_STATUS_APPROVED" },
  { no: 2, name: "STOCK_AUDIT_ITEM_STATUS_UNAPPROVED" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.StockAuditsServiceCreateRequest
 */
export class StockAuditsServiceCreateRequest extends Message<StockAuditsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the stock audit
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The location ID of where the record is created
   *
   * @generated from field: uint64 location_id = 15;
   */
  locationId = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<StockAuditsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServiceCreateRequest {
    return new StockAuditsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServiceCreateRequest {
    return new StockAuditsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServiceCreateRequest {
    return new StockAuditsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServiceCreateRequest | PlainMessage<StockAuditsServiceCreateRequest> | undefined, b: StockAuditsServiceCreateRequest | PlainMessage<StockAuditsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(StockAuditsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.StockAuditsServiceUpdateRequest
 */
export class StockAuditsServiceUpdateRequest extends Message<StockAuditsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the stock audit
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<StockAuditsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServiceUpdateRequest {
    return new StockAuditsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServiceUpdateRequest {
    return new StockAuditsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServiceUpdateRequest {
    return new StockAuditsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServiceUpdateRequest | PlainMessage<StockAuditsServiceUpdateRequest> | undefined, b: StockAuditsServiceUpdateRequest | PlainMessage<StockAuditsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(StockAuditsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.StockAudit
 */
export class StockAudit extends Message<StockAudit> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this stock audit
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this stock audit
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this stock audit
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this stock audit was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the stock audit
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The location ID of where the record is created
   *
   * @generated from field: uint64 location_id = 15;
   */
  locationId = protoInt64.zero;

  /**
   * The list of associated stock audit items
   *
   * @generated from field: repeated Scailo.StockAuditItem list = 20;
   */
  list: StockAuditItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 30;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<StockAudit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAudit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "list", kind: "message", T: StockAuditItem, repeated: true },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAudit {
    return new StockAudit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAudit {
    return new StockAudit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAudit {
    return new StockAudit().fromJsonString(jsonString, options);
  }

  static equals(a: StockAudit | PlainMessage<StockAudit> | undefined, b: StockAudit | PlainMessage<StockAudit> | undefined): boolean {
    return proto3.util.equals(StockAudit, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an item to a stock audit
 *
 * @generated from message Scailo.StockAuditsServiceItemCreateRequest
 */
export class StockAuditsServiceItemCreateRequest extends Message<StockAuditsServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the stock audit ID
   *
   * @generated from field: uint64 stock_audit_id = 10;
   */
  stockAuditId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * The hash of the inventory item
   *
   * @generated from field: string item_hash = 12;
   */
  itemHash = "";

  /**
   * The physically available quantity (in cents)
   *
   * @generated from field: uint64 physical_quantity = 13;
   */
  physicalQuantity = protoInt64.zero;

  /**
   * The digitally available quantity (in cents)
   * uint64 digital_quantity = 14 [(genesis_validate.rules).uint64.gt = 0];
   * The reason for reconciliation
   *
   * @generated from field: string reconciliation_reason = 15;
   */
  reconciliationReason = "";

  constructor(data?: PartialMessage<StockAuditsServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "stock_audit_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "item_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "physical_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "reconciliation_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServiceItemCreateRequest {
    return new StockAuditsServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServiceItemCreateRequest {
    return new StockAuditsServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServiceItemCreateRequest {
    return new StockAuditsServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServiceItemCreateRequest | PlainMessage<StockAuditsServiceItemCreateRequest> | undefined, b: StockAuditsServiceItemCreateRequest | PlainMessage<StockAuditsServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(StockAuditsServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an item in a stock audit
 *
 * @generated from message Scailo.StockAuditsServiceItemUpdateRequest
 */
export class StockAuditsServiceItemUpdateRequest extends Message<StockAuditsServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The hash of the inventory item
   *
   * @generated from field: string item_hash = 12;
   */
  itemHash = "";

  /**
   * The physically available quantity (in cents)
   *
   * @generated from field: uint64 physical_quantity = 13;
   */
  physicalQuantity = protoInt64.zero;

  /**
   * The digitally available quantity (in cents)
   * uint64 digital_quantity = 14 [(genesis_validate.rules).uint64.gt = 0];
   * The reason for reconciliation
   *
   * @generated from field: string reconciliation_reason = 15;
   */
  reconciliationReason = "";

  constructor(data?: PartialMessage<StockAuditsServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "item_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "physical_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "reconciliation_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServiceItemUpdateRequest {
    return new StockAuditsServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServiceItemUpdateRequest {
    return new StockAuditsServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServiceItemUpdateRequest {
    return new StockAuditsServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServiceItemUpdateRequest | PlainMessage<StockAuditsServiceItemUpdateRequest> | undefined, b: StockAuditsServiceItemUpdateRequest | PlainMessage<StockAuditsServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(StockAuditsServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an item associated to a stock audit
 *
 * @generated from message Scailo.StockAuditItem
 */
export class StockAuditItem extends Message<StockAuditItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this stock audit
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the stock audit ID
   *
   * @generated from field: uint64 stock_audit_id = 10;
   */
  stockAuditId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * The hash of the inventory item
   *
   * @generated from field: string item_hash = 12;
   */
  itemHash = "";

  /**
   * The physically available quantity (in cents)
   *
   * @generated from field: uint64 physical_quantity = 13;
   */
  physicalQuantity = protoInt64.zero;

  /**
   * The digitally available quantity (in cents)
   *
   * @generated from field: uint64 digital_quantity = 14;
   */
  digitalQuantity = protoInt64.zero;

  /**
   * The reason for reconciliation
   *
   * @generated from field: string reconciliation_reason = 15;
   */
  reconciliationReason = "";

  constructor(data?: PartialMessage<StockAuditItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "stock_audit_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "item_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "physical_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "digital_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "reconciliation_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditItem {
    return new StockAuditItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditItem {
    return new StockAuditItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditItem {
    return new StockAuditItem().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditItem | PlainMessage<StockAuditItem> | undefined, b: StockAuditItem | PlainMessage<StockAuditItem> | undefined): boolean {
    return proto3.util.equals(StockAuditItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of stock audits
 *
 * @generated from message Scailo.StockAuditsList
 */
export class StockAuditsList extends Message<StockAuditsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.StockAudit list = 1;
   */
  list: StockAudit[] = [];

  constructor(data?: PartialMessage<StockAuditsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: StockAudit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsList {
    return new StockAuditsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsList {
    return new StockAuditsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsList {
    return new StockAuditsList().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsList | PlainMessage<StockAuditsList> | undefined, b: StockAuditsList | PlainMessage<StockAuditsList> | undefined): boolean {
    return proto3.util.equals(StockAuditsList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of stock audit items
 *
 * @generated from message Scailo.StockAuditsItemsList
 */
export class StockAuditsItemsList extends Message<StockAuditsItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.StockAuditItem list = 1;
   */
  list: StockAuditItem[] = [];

  constructor(data?: PartialMessage<StockAuditsItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: StockAuditItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsItemsList {
    return new StockAuditsItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsItemsList {
    return new StockAuditsItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsItemsList {
    return new StockAuditsItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsItemsList | PlainMessage<StockAuditsItemsList> | undefined, b: StockAuditsItemsList | PlainMessage<StockAuditsItemsList> | undefined): boolean {
    return proto3.util.equals(StockAuditsItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.StockAuditItemHistoryRequest
 */
export class StockAuditItemHistoryRequest extends Message<StockAuditItemHistoryRequest> {
  /**
   * Stores the stock audit ID
   *
   * @generated from field: uint64 stock_audit_id = 10;
   */
  stockAuditId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<StockAuditItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "stock_audit_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditItemHistoryRequest {
    return new StockAuditItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditItemHistoryRequest {
    return new StockAuditItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditItemHistoryRequest {
    return new StockAuditItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditItemHistoryRequest | PlainMessage<StockAuditItemHistoryRequest> | undefined, b: StockAuditItemHistoryRequest | PlainMessage<StockAuditItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(StockAuditItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the info of a prospective stock audit item
 *
 * @generated from message Scailo.StockAuditItemProspectiveInfoRequest
 */
export class StockAuditItemProspectiveInfoRequest extends Message<StockAuditItemProspectiveInfoRequest> {
  /**
   * Stores the stock audit ID
   *
   * @generated from field: uint64 stock_audit_id = 10;
   */
  stockAuditId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<StockAuditItemProspectiveInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditItemProspectiveInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "stock_audit_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditItemProspectiveInfoRequest {
    return new StockAuditItemProspectiveInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditItemProspectiveInfoRequest {
    return new StockAuditItemProspectiveInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditItemProspectiveInfoRequest {
    return new StockAuditItemProspectiveInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditItemProspectiveInfoRequest | PlainMessage<StockAuditItemProspectiveInfoRequest> | undefined, b: StockAuditItemProspectiveInfoRequest | PlainMessage<StockAuditItemProspectiveInfoRequest> | undefined): boolean {
    return proto3.util.equals(StockAuditItemProspectiveInfoRequest, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.StockAuditsServicePaginationReq
 */
export class StockAuditsServicePaginationReq extends Message<StockAuditsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.STOCK_AUDIT_SORT_KEY sort_key = 5;
   */
  sortKey = STOCK_AUDIT_SORT_KEY.STOCK_AUDIT_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this stock audit
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<StockAuditsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(STOCK_AUDIT_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServicePaginationReq {
    return new StockAuditsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServicePaginationReq {
    return new StockAuditsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServicePaginationReq {
    return new StockAuditsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServicePaginationReq | PlainMessage<StockAuditsServicePaginationReq> | undefined, b: StockAuditsServicePaginationReq | PlainMessage<StockAuditsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(StockAuditsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.StockAuditsServicePaginationResponse
 */
export class StockAuditsServicePaginationResponse extends Message<StockAuditsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.StockAudit payload = 4;
   */
  payload: StockAudit[] = [];

  constructor(data?: PartialMessage<StockAuditsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: StockAudit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServicePaginationResponse {
    return new StockAuditsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServicePaginationResponse {
    return new StockAuditsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServicePaginationResponse {
    return new StockAuditsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServicePaginationResponse | PlainMessage<StockAuditsServicePaginationResponse> | undefined, b: StockAuditsServicePaginationResponse | PlainMessage<StockAuditsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(StockAuditsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.StockAuditsServiceFilterReq
 */
export class StockAuditsServiceFilterReq extends Message<StockAuditsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.STOCK_AUDIT_SORT_KEY sort_key = 5;
   */
  sortKey = STOCK_AUDIT_SORT_KEY.STOCK_AUDIT_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this stock audit
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the stock audit
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The location ID of where the record is created
   *
   * @generated from field: uint64 location_id = 25;
   */
  locationId = protoInt64.zero;

  /**
   * The ID of the family
   *
   * @generated from field: uint64 family_id = 30;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<StockAuditsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(STOCK_AUDIT_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServiceFilterReq {
    return new StockAuditsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServiceFilterReq {
    return new StockAuditsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServiceFilterReq {
    return new StockAuditsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServiceFilterReq | PlainMessage<StockAuditsServiceFilterReq> | undefined, b: StockAuditsServiceFilterReq | PlainMessage<StockAuditsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(StockAuditsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.StockAuditsServiceCountReq
 */
export class StockAuditsServiceCountReq extends Message<StockAuditsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this stock audit
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the stock audit
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The location ID of where the record is created
   *
   * @generated from field: uint64 location_id = 25;
   */
  locationId = protoInt64.zero;

  /**
   * The ID of the family
   *
   * @generated from field: uint64 family_id = 30;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<StockAuditsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "location_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServiceCountReq {
    return new StockAuditsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServiceCountReq {
    return new StockAuditsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServiceCountReq {
    return new StockAuditsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServiceCountReq | PlainMessage<StockAuditsServiceCountReq> | undefined, b: StockAuditsServiceCountReq | PlainMessage<StockAuditsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(StockAuditsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.StockAuditsServiceSearchAllReq
 */
export class StockAuditsServiceSearchAllReq extends Message<StockAuditsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.STOCK_AUDIT_SORT_KEY sort_key = 5;
   */
  sortKey = STOCK_AUDIT_SORT_KEY.STOCK_AUDIT_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<StockAuditsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(STOCK_AUDIT_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServiceSearchAllReq {
    return new StockAuditsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServiceSearchAllReq {
    return new StockAuditsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServiceSearchAllReq {
    return new StockAuditsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServiceSearchAllReq | PlainMessage<StockAuditsServiceSearchAllReq> | undefined, b: StockAuditsServiceSearchAllReq | PlainMessage<StockAuditsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(StockAuditsServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve approved or unapproved items.
 *
 * @generated from message Scailo.StockAuditItemsSearchRequest
 */
export class StockAuditItemsSearchRequest extends Message<StockAuditItemsSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.STOCK_AUDIT_ITEM_SORT_KEY sort_key = 5;
   */
  sortKey = STOCK_AUDIT_ITEM_SORT_KEY.STOCK_AUDIT_ITEM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The status of the items
   *
   * @generated from field: Scailo.STOCK_AUDIT_ITEM_STATUS status = 7;
   */
  status = STOCK_AUDIT_ITEM_STATUS.STOCK_AUDIT_ITEM_STATUS_ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 10;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 11;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 12;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 13;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The ID of the stock audit
   *
   * @generated from field: uint64 stock_audit_id = 20;
   */
  stockAuditId = protoInt64.zero;

  /**
   * The ID of the family
   *
   * @generated from field: uint64 family_id = 21;
   */
  familyId = protoInt64.zero;

  /**
   * Stores the item hash
   *
   * @generated from field: string item_hash = 22;
   */
  itemHash = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<StockAuditItemsSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditItemsSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(STOCK_AUDIT_ITEM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(STOCK_AUDIT_ITEM_STATUS) },
    { no: 10, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "stock_audit_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "item_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditItemsSearchRequest {
    return new StockAuditItemsSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditItemsSearchRequest {
    return new StockAuditItemsSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditItemsSearchRequest {
    return new StockAuditItemsSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditItemsSearchRequest | PlainMessage<StockAuditItemsSearchRequest> | undefined, b: StockAuditItemsSearchRequest | PlainMessage<StockAuditItemsSearchRequest> | undefined): boolean {
    return proto3.util.equals(StockAuditItemsSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination items request
 *
 * @generated from message Scailo.StockAuditsServicePaginatedItemsResponse
 */
export class StockAuditsServicePaginatedItemsResponse extends Message<StockAuditsServicePaginatedItemsResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.StockAuditItem payload = 4;
   */
  payload: StockAuditItem[] = [];

  constructor(data?: PartialMessage<StockAuditsServicePaginatedItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.StockAuditsServicePaginatedItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: StockAuditItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StockAuditsServicePaginatedItemsResponse {
    return new StockAuditsServicePaginatedItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StockAuditsServicePaginatedItemsResponse {
    return new StockAuditsServicePaginatedItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StockAuditsServicePaginatedItemsResponse {
    return new StockAuditsServicePaginatedItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StockAuditsServicePaginatedItemsResponse | PlainMessage<StockAuditsServicePaginatedItemsResponse> | undefined, b: StockAuditsServicePaginatedItemsResponse | PlainMessage<StockAuditsServicePaginatedItemsResponse> | undefined): boolean {
    return proto3.util.equals(StockAuditsServicePaginatedItemsResponse, a, b);
  }
}

