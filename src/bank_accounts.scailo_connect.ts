// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file bank_accounts.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BankAccount, BankAccountsList, BankAccountsServiceCountReq, BankAccountsServiceCreateRequest, BankAccountsServiceFilterReq, BankAccountsServicePaginationReq, BankAccountsServicePaginationResponse, BankAccountsServiceSearchAllReq, BankAccountsServiceUpdateRequest } from "./bank_accounts.scailo_pb.js";
import { ActiveStatus, CountInSLCStatusRequest, CountResponse, Identifier, IdentifierResponse, IdentifierUUID, IdentifierUUIDWithUserComment } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each bank account
 *
 * @generated from service Scailo.BankAccountsService
 */
export const BankAccountsService = {
  typeName: "Scailo.BankAccountsService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.BankAccountsService.Create
     */
    create: {
      name: "Create",
      I: BankAccountsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.BankAccountsService.Draft
     */
    draft: {
      name: "Draft",
      I: BankAccountsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.BankAccountsService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: BankAccountsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.BankAccountsService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.BankAccountsService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.BankAccountsService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.BankAccountsService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.BankAccountsService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: BankAccountsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.BankAccountsService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.BankAccountsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.BankAccountsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (Identifier) returns (IdentifierResponse);
     *
     * @generated from rpc Scailo.BankAccountsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.BankAccountsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: BankAccount,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.BankAccountsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: BankAccountsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.BankAccountsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: BankAccountsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.BankAccountsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: BankAccountsServicePaginationReq,
      O: BankAccountsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.BankAccountsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: BankAccountsServiceSearchAllReq,
      O: BankAccountsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.BankAccountsService.Filter
     */
    filter: {
      name: "Filter",
      I: BankAccountsServiceFilterReq,
      O: BankAccountsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.BankAccountsService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given count criteria
     *
     * @generated from rpc Scailo.BankAccountsService.Count
     */
    count: {
      name: "Count",
      I: BankAccountsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

