// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file expenses.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest, FormFieldDatumFilterRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.EXPENSE_ITEM_SORT_KEY
 */
export enum EXPENSE_ITEM_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  EXPENSE_ITEM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_CREATED_AT = 1;
   */
  EXPENSE_ITEM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_MODIFIED_AT = 2;
   */
  EXPENSE_ITEM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_APPROVED_ON = 3;
   */
  EXPENSE_ITEM_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_APPROVED_BY = 4;
   */
  EXPENSE_ITEM_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  EXPENSE_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the ledger ID
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_LEDGER_ID = 10;
   */
  EXPENSE_ITEM_SORT_KEY_LEDGER_ID = 10,

  /**
   * Fetch ordered results by the tax group ID
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_TAX_GROUP_ID = 11;
   */
  EXPENSE_ITEM_SORT_KEY_TAX_GROUP_ID = 11,

  /**
   * Fetch ordered results by the amount
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_AMOUNT = 12;
   */
  EXPENSE_ITEM_SORT_KEY_AMOUNT = 12,

  /**
   * Fetch ordered results by the date of expense
   *
   * @generated from enum value: EXPENSE_ITEM_SORT_KEY_DATE_OF_EXPENSE = 13;
   */
  EXPENSE_ITEM_SORT_KEY_DATE_OF_EXPENSE = 13,
}
// Retrieve enum metadata with: proto3.getEnumType(EXPENSE_ITEM_SORT_KEY)
proto3.util.setEnumType(EXPENSE_ITEM_SORT_KEY, "Scailo.EXPENSE_ITEM_SORT_KEY", [
  { no: 0, name: "EXPENSE_ITEM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "EXPENSE_ITEM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "EXPENSE_ITEM_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "EXPENSE_ITEM_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "EXPENSE_ITEM_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "EXPENSE_ITEM_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "EXPENSE_ITEM_SORT_KEY_LEDGER_ID" },
  { no: 11, name: "EXPENSE_ITEM_SORT_KEY_TAX_GROUP_ID" },
  { no: 12, name: "EXPENSE_ITEM_SORT_KEY_AMOUNT" },
  { no: 13, name: "EXPENSE_ITEM_SORT_KEY_DATE_OF_EXPENSE" },
]);

/**
 *
 * Describes the applicable statuses of expense items
 *
 * @generated from enum Scailo.EXPENSE_ITEM_STATUS
 */
export enum EXPENSE_ITEM_STATUS {
  /**
   * Denotes that status be disregarded. This is used only within search APIs
   *
   * @generated from enum value: EXPENSE_ITEM_STATUS_ANY_UNSPECIFIED = 0;
   */
  EXPENSE_ITEM_STATUS_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the expense items must have been approved
   *
   * @generated from enum value: EXPENSE_ITEM_STATUS_APPROVED = 1;
   */
  EXPENSE_ITEM_STATUS_APPROVED = 1,

  /**
   * Denotes that the expense items must be waiting for approval
   *
   * @generated from enum value: EXPENSE_ITEM_STATUS_UNAPPROVED = 2;
   */
  EXPENSE_ITEM_STATUS_UNAPPROVED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EXPENSE_ITEM_STATUS)
proto3.util.setEnumType(EXPENSE_ITEM_STATUS, "Scailo.EXPENSE_ITEM_STATUS", [
  { no: 0, name: "EXPENSE_ITEM_STATUS_ANY_UNSPECIFIED" },
  { no: 1, name: "EXPENSE_ITEM_STATUS_APPROVED" },
  { no: 2, name: "EXPENSE_ITEM_STATUS_UNAPPROVED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.EXPENSE_SORT_KEY
 */
export enum EXPENSE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: EXPENSE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  EXPENSE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: EXPENSE_SORT_KEY_CREATED_AT = 1;
   */
  EXPENSE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: EXPENSE_SORT_KEY_MODIFIED_AT = 2;
   */
  EXPENSE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: EXPENSE_SORT_KEY_APPROVED_ON = 3;
   */
  EXPENSE_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: EXPENSE_SORT_KEY_APPROVED_BY = 4;
   */
  EXPENSE_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: EXPENSE_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  EXPENSE_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: EXPENSE_SORT_KEY_COMPLETED_ON = 6;
   */
  EXPENSE_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: EXPENSE_SORT_KEY_REFERENCE_ID = 10;
   */
  EXPENSE_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: EXPENSE_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  EXPENSE_SORT_KEY_FINAL_REF_NUMBER = 11,

  /**
   * Fetch ordered results by the currency ID
   *
   * @generated from enum value: EXPENSE_SORT_KEY_CURRENCY_ID = 12;
   */
  EXPENSE_SORT_KEY_CURRENCY_ID = 12,

  /**
   * Fetch ordered results by the user ID who paid for the expense
   *
   * @generated from enum value: EXPENSE_SORT_KEY_PAID_BY_USER_ID = 13;
   */
  EXPENSE_SORT_KEY_PAID_BY_USER_ID = 13,
}
// Retrieve enum metadata with: proto3.getEnumType(EXPENSE_SORT_KEY)
proto3.util.setEnumType(EXPENSE_SORT_KEY, "Scailo.EXPENSE_SORT_KEY", [
  { no: 0, name: "EXPENSE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "EXPENSE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "EXPENSE_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "EXPENSE_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "EXPENSE_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "EXPENSE_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "EXPENSE_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "EXPENSE_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "EXPENSE_SORT_KEY_FINAL_REF_NUMBER" },
  { no: 12, name: "EXPENSE_SORT_KEY_CURRENCY_ID" },
  { no: 13, name: "EXPENSE_SORT_KEY_PAID_BY_USER_ID" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.ExpensesServiceCreateRequest
 */
export class ExpensesServiceCreateRequest extends Message<ExpensesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 8;
   */
  projectId = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the expense
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The reference on which the expense has been created
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The ID of the associated reference (can be 0 in case ref_from is "not-applicable")
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: uint64 currency_id = 14;
   */
  currencyId = protoInt64.zero;

  /**
   * The ID of the user who paid for this expense (if paid by organization, then this will be 0)
   *
   * @generated from field: uint64 paid_by_user_id = 15;
   */
  paidByUserId = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<ExpensesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "paid_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServiceCreateRequest {
    return new ExpensesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServiceCreateRequest {
    return new ExpensesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServiceCreateRequest {
    return new ExpensesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServiceCreateRequest | PlainMessage<ExpensesServiceCreateRequest> | undefined, b: ExpensesServiceCreateRequest | PlainMessage<ExpensesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(ExpensesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.ExpensesServiceUpdateRequest
 */
export class ExpensesServiceUpdateRequest extends Message<ExpensesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 8;
   */
  projectId = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the expense
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The reference on which the expense has been created
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The ID of the associated reference (can be 0 in case ref_from is "not-applicable")
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: uint64 currency_id = 14;
   */
  currencyId = protoInt64.zero;

  /**
   * The ID of the user who paid for this expense (if paid by organization, then this will be 0)
   *
   * @generated from field: uint64 paid_by_user_id = 15;
   */
  paidByUserId = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<ExpensesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "paid_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServiceUpdateRequest {
    return new ExpensesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServiceUpdateRequest {
    return new ExpensesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServiceUpdateRequest {
    return new ExpensesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServiceUpdateRequest | PlainMessage<ExpensesServiceUpdateRequest> | undefined, b: ExpensesServiceUpdateRequest | PlainMessage<ExpensesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ExpensesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.Expense
 */
export class Expense extends Message<Expense> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this expense
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this expense
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this expense
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this expense was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 8;
   */
  projectId = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the expense
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The reference on which the expense has been created
   *
   * @generated from field: string ref_from = 12;
   */
  refFrom = "";

  /**
   * The ID of the associated reference (can be 0 in case ref_from is "not-applicable")
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: uint64 currency_id = 14;
   */
  currencyId = protoInt64.zero;

  /**
   * The ID of the user who paid for this expense (if paid by organization, then this will be 0)
   *
   * @generated from field: uint64 paid_by_user_id = 15;
   */
  paidByUserId = protoInt64.zero;

  /**
   * The list of associated expense items
   *
   * @generated from field: repeated Scailo.ExpenseItem list = 20;
   */
  list: ExpenseItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 30;
   */
  formData: FormFieldDatum[] = [];

  /**
   * The total amount of the expense
   *
   * @generated from field: double total_amount = 40;
   */
  totalAmount = 0;

  constructor(data?: PartialMessage<Expense>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.Expense";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "paid_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "list", kind: "message", T: ExpenseItem, repeated: true },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
    { no: 40, name: "total_amount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Expense {
    return new Expense().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Expense {
    return new Expense().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Expense {
    return new Expense().fromJsonString(jsonString, options);
  }

  static equals(a: Expense | PlainMessage<Expense> | undefined, b: Expense | PlainMessage<Expense> | undefined): boolean {
    return proto3.util.equals(Expense, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an item to a expense
 *
 * @generated from message Scailo.ExpensesServiceItemCreateRequest
 */
export class ExpensesServiceItemCreateRequest extends Message<ExpensesServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the expense ID
   *
   * @generated from field: uint64 expense_id = 10;
   */
  expenseId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * The associated bill number
   *
   * @generated from field: string bill_no = 12;
   */
  billNo = "";

  /**
   * The description of the item
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The ID of the associated ledger account (can be 0 temporarily)
   *
   * @generated from field: uint64 ledger_id = 15;
   */
  ledgerId = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 16;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The total amount of this item (in cents)
   *
   * @generated from field: uint64 amount = 17;
   */
  amount = protoInt64.zero;

  /**
   * The date on which this expense was incurred
   *
   * @generated from field: string date_of_expense = 18;
   */
  dateOfExpense = "";

  constructor(data?: PartialMessage<ExpensesServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "expense_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "bill_no", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "ledger_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "date_of_expense", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServiceItemCreateRequest {
    return new ExpensesServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServiceItemCreateRequest {
    return new ExpensesServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServiceItemCreateRequest {
    return new ExpensesServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServiceItemCreateRequest | PlainMessage<ExpensesServiceItemCreateRequest> | undefined, b: ExpensesServiceItemCreateRequest | PlainMessage<ExpensesServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(ExpensesServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an item in a expense
 *
 * @generated from message Scailo.ExpensesServiceItemUpdateRequest
 */
export class ExpensesServiceItemUpdateRequest extends Message<ExpensesServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * The associated bill number
   *
   * @generated from field: string bill_no = 12;
   */
  billNo = "";

  /**
   * The description of the item
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The ID of the associated ledger account (can be 0 temporarily)
   *
   * @generated from field: uint64 ledger_id = 15;
   */
  ledgerId = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 16;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The total amount of this item (in cents)
   *
   * @generated from field: uint64 amount = 17;
   */
  amount = protoInt64.zero;

  /**
   * The date on which this expense was incurred
   *
   * @generated from field: string date_of_expense = 18;
   */
  dateOfExpense = "";

  constructor(data?: PartialMessage<ExpensesServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "bill_no", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "ledger_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "date_of_expense", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServiceItemUpdateRequest {
    return new ExpensesServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServiceItemUpdateRequest {
    return new ExpensesServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServiceItemUpdateRequest {
    return new ExpensesServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServiceItemUpdateRequest | PlainMessage<ExpensesServiceItemUpdateRequest> | undefined, b: ExpensesServiceItemUpdateRequest | PlainMessage<ExpensesServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ExpensesServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an item associated to a expense
 *
 * @generated from message Scailo.ExpenseItem
 */
export class ExpenseItem extends Message<ExpenseItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this expense
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the expense ID
   *
   * @generated from field: uint64 expense_id = 10;
   */
  expenseId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  /**
   * The associated bill number
   *
   * @generated from field: string bill_no = 12;
   */
  billNo = "";

  /**
   * The description of the item
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The ID of the associated ledger account (can be 0 temporarily)
   *
   * @generated from field: uint64 ledger_id = 15;
   */
  ledgerId = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 16;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The total amount of this item (in cents)
   *
   * @generated from field: uint64 amount = 17;
   */
  amount = protoInt64.zero;

  /**
   * The date on which this expense was incurred
   *
   * @generated from field: string date_of_expense = 18;
   */
  dateOfExpense = "";

  constructor(data?: PartialMessage<ExpenseItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpenseItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "expense_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "bill_no", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "ledger_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "date_of_expense", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpenseItem {
    return new ExpenseItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpenseItem {
    return new ExpenseItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpenseItem {
    return new ExpenseItem().fromJsonString(jsonString, options);
  }

  static equals(a: ExpenseItem | PlainMessage<ExpenseItem> | undefined, b: ExpenseItem | PlainMessage<ExpenseItem> | undefined): boolean {
    return proto3.util.equals(ExpenseItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of expenses
 *
 * @generated from message Scailo.ExpensesList
 */
export class ExpensesList extends Message<ExpensesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.Expense list = 1;
   */
  list: Expense[] = [];

  constructor(data?: PartialMessage<ExpensesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Expense, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesList {
    return new ExpensesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesList {
    return new ExpensesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesList {
    return new ExpensesList().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesList | PlainMessage<ExpensesList> | undefined, b: ExpensesList | PlainMessage<ExpensesList> | undefined): boolean {
    return proto3.util.equals(ExpensesList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of expense items
 *
 * @generated from message Scailo.ExpensesItemsList
 */
export class ExpensesItemsList extends Message<ExpensesItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ExpenseItem list = 1;
   */
  list: ExpenseItem[] = [];

  constructor(data?: PartialMessage<ExpensesItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ExpenseItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesItemsList {
    return new ExpensesItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesItemsList {
    return new ExpensesItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesItemsList {
    return new ExpensesItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesItemsList | PlainMessage<ExpensesItemsList> | undefined, b: ExpensesItemsList | PlainMessage<ExpensesItemsList> | undefined): boolean {
    return proto3.util.equals(ExpensesItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.ExpenseItemHistoryRequest
 */
export class ExpenseItemHistoryRequest extends Message<ExpenseItemHistoryRequest> {
  /**
   * Stores the expense ID
   *
   * @generated from field: uint64 expense_id = 10;
   */
  expenseId = protoInt64.zero;

  /**
   * Stores the name of the item
   *
   * @generated from field: string name = 11;
   */
  name = "";

  constructor(data?: PartialMessage<ExpenseItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpenseItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "expense_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpenseItemHistoryRequest {
    return new ExpenseItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpenseItemHistoryRequest {
    return new ExpenseItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpenseItemHistoryRequest {
    return new ExpenseItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExpenseItemHistoryRequest | PlainMessage<ExpenseItemHistoryRequest> | undefined, b: ExpenseItemHistoryRequest | PlainMessage<ExpenseItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(ExpenseItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve approved or unapproved items.
 *
 * @generated from message Scailo.ExpenseItemsSearchRequest
 */
export class ExpenseItemsSearchRequest extends Message<ExpenseItemsSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.EXPENSE_ITEM_SORT_KEY sort_key = 5;
   */
  sortKey = EXPENSE_ITEM_SORT_KEY.EXPENSE_ITEM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The status of the items
   *
   * @generated from field: Scailo.EXPENSE_ITEM_STATUS status = 7;
   */
  status = EXPENSE_ITEM_STATUS.EXPENSE_ITEM_STATUS_ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 10;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 11;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 12;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 13;
   */
  approverRoleId = protoInt64.zero;

  /**
   * Stores the expense ID
   *
   * @generated from field: uint64 expense_id = 20;
   */
  expenseId = protoInt64.zero;

  /**
   * The ID of the associated ledger account
   *
   * @generated from field: uint64 ledger_id = 25;
   */
  ledgerId = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 26;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The date on which this expense was incurred
   *
   * @generated from field: string date_of_expense = 28;
   */
  dateOfExpense = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<ExpenseItemsSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpenseItemsSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(EXPENSE_ITEM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(EXPENSE_ITEM_STATUS) },
    { no: 10, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "expense_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "ledger_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "date_of_expense", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpenseItemsSearchRequest {
    return new ExpenseItemsSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpenseItemsSearchRequest {
    return new ExpenseItemsSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpenseItemsSearchRequest {
    return new ExpenseItemsSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExpenseItemsSearchRequest | PlainMessage<ExpenseItemsSearchRequest> | undefined, b: ExpenseItemsSearchRequest | PlainMessage<ExpenseItemsSearchRequest> | undefined): boolean {
    return proto3.util.equals(ExpenseItemsSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination items request
 *
 * @generated from message Scailo.ExpensesServicePaginatedItemsResponse
 */
export class ExpensesServicePaginatedItemsResponse extends Message<ExpensesServicePaginatedItemsResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.ExpenseItem payload = 4;
   */
  payload: ExpenseItem[] = [];

  constructor(data?: PartialMessage<ExpensesServicePaginatedItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServicePaginatedItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: ExpenseItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServicePaginatedItemsResponse {
    return new ExpensesServicePaginatedItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServicePaginatedItemsResponse {
    return new ExpensesServicePaginatedItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServicePaginatedItemsResponse {
    return new ExpensesServicePaginatedItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServicePaginatedItemsResponse | PlainMessage<ExpensesServicePaginatedItemsResponse> | undefined, b: ExpensesServicePaginatedItemsResponse | PlainMessage<ExpensesServicePaginatedItemsResponse> | undefined): boolean {
    return proto3.util.equals(ExpensesServicePaginatedItemsResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.ExpensesServicePaginationReq
 */
export class ExpensesServicePaginationReq extends Message<ExpensesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.EXPENSE_SORT_KEY sort_key = 5;
   */
  sortKey = EXPENSE_SORT_KEY.EXPENSE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this expense
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<ExpensesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(EXPENSE_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServicePaginationReq {
    return new ExpensesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServicePaginationReq {
    return new ExpensesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServicePaginationReq {
    return new ExpensesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServicePaginationReq | PlainMessage<ExpensesServicePaginationReq> | undefined, b: ExpensesServicePaginationReq | PlainMessage<ExpensesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(ExpensesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.ExpensesServicePaginationResponse
 */
export class ExpensesServicePaginationResponse extends Message<ExpensesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.Expense payload = 4;
   */
  payload: Expense[] = [];

  constructor(data?: PartialMessage<ExpensesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: Expense, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServicePaginationResponse {
    return new ExpensesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServicePaginationResponse {
    return new ExpensesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServicePaginationResponse {
    return new ExpensesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServicePaginationResponse | PlainMessage<ExpensesServicePaginationResponse> | undefined, b: ExpensesServicePaginationResponse | PlainMessage<ExpensesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(ExpensesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.ExpensesServiceFilterReq
 */
export class ExpensesServiceFilterReq extends Message<ExpensesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.EXPENSE_SORT_KEY sort_key = 5;
   */
  sortKey = EXPENSE_SORT_KEY.EXPENSE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this expense
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the expense
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The currency ID of the expense
   *
   * @generated from field: uint64 currency_id = 22;
   */
  currencyId = protoInt64.zero;

  /**
   * The ID of the user who paid for this expense (if paid by organization, then this will be 0)
   *
   * @generated from field: uint64 paid_by_user_id = 23;
   */
  paidByUserId = protoInt64.zero;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 30;
   */
  projectId = protoInt64.zero;

  /**
   * The list of form data filters
   *
   * @generated from field: repeated Scailo.FormFieldDatumFilterRequest form_data = 500;
   */
  formData: FormFieldDatumFilterRequest[] = [];

  constructor(data?: PartialMessage<ExpensesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(EXPENSE_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "paid_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 500, name: "form_data", kind: "message", T: FormFieldDatumFilterRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServiceFilterReq {
    return new ExpensesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServiceFilterReq {
    return new ExpensesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServiceFilterReq {
    return new ExpensesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServiceFilterReq | PlainMessage<ExpensesServiceFilterReq> | undefined, b: ExpensesServiceFilterReq | PlainMessage<ExpensesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(ExpensesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.ExpensesServiceCountReq
 */
export class ExpensesServiceCountReq extends Message<ExpensesServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this expense
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the expense
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The currency ID of the expense
   *
   * @generated from field: uint64 currency_id = 22;
   */
  currencyId = protoInt64.zero;

  /**
   * The ID of the user who paid for this expense (if paid by organization, then this will be 0)
   *
   * @generated from field: uint64 paid_by_user_id = 23;
   */
  paidByUserId = protoInt64.zero;

  /**
   * The associated project ID
   *
   * @generated from field: uint64 project_id = 30;
   */
  projectId = protoInt64.zero;

  /**
   * The list of form data filters
   *
   * @generated from field: repeated Scailo.FormFieldDatumFilterRequest form_data = 500;
   */
  formData: FormFieldDatumFilterRequest[] = [];

  constructor(data?: PartialMessage<ExpensesServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "paid_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 30, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 500, name: "form_data", kind: "message", T: FormFieldDatumFilterRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServiceCountReq {
    return new ExpensesServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServiceCountReq {
    return new ExpensesServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServiceCountReq {
    return new ExpensesServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServiceCountReq | PlainMessage<ExpensesServiceCountReq> | undefined, b: ExpensesServiceCountReq | PlainMessage<ExpensesServiceCountReq> | undefined): boolean {
    return proto3.util.equals(ExpensesServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.ExpensesServiceSearchAllReq
 */
export class ExpensesServiceSearchAllReq extends Message<ExpensesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.EXPENSE_SORT_KEY sort_key = 5;
   */
  sortKey = EXPENSE_SORT_KEY.EXPENSE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<ExpensesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ExpensesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(EXPENSE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpensesServiceSearchAllReq {
    return new ExpensesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpensesServiceSearchAllReq {
    return new ExpensesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpensesServiceSearchAllReq {
    return new ExpensesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: ExpensesServiceSearchAllReq | PlainMessage<ExpensesServiceSearchAllReq> | undefined, b: ExpensesServiceSearchAllReq | PlainMessage<ExpensesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(ExpensesServiceSearchAllReq, a, b);
  }
}

