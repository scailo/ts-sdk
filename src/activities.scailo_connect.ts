// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file activities.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ActivitiesList, ActivitiesServiceActionCreateRequest, ActivitiesServiceActionUpdateRequest, ActivitiesServiceActionWithTimerCreateRequest, ActivitiesServiceActivityTagAssociationCreateRequest, ActivitiesServiceCountReq, ActivitiesServiceCreateRequest, ActivitiesServiceFilterReq, ActivitiesServiceImportOwnersRequest, ActivitiesServiceOwnerCreateRequest, ActivitiesServicePaginatedActionsResponse, ActivitiesServicePaginatedTimersResponse, ActivitiesServicePaginationReq, ActivitiesServicePaginationResponse, ActivitiesServiceSearchAllReq, ActivitiesServiceSupervisorCreateRequest, ActivitiesServiceTimerCreateRequest, ActivitiesServiceTimerEndRequest, ActivitiesServiceUpdateRequest, Activity, ActivityAction, ActivityActionHistoryRequest, ActivityActionsList, ActivityActionsSearchRequest, ActivityActionStatistics, ActivityOwner, ActivityOwnersList, ActivityStatistics, ActivitySupervisor, ActivitySupervisorsList, ActivityTagAssociation, ActivityTagAssociationsList, ActivityTimer, ActivityTimersList, ActivityTimersSearchRequest } from "./activities.scailo_pb.js";
import { ActiveStatus, CountResponse, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDsList, IdentifierUUIDWithFile, IdentifierUUIDWithUserComment, IdentifierWithEmailAttributes, IdentifierWithUserComment, ReorderItemsRequest, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each activity
 *
 * @generated from service Scailo.ActivitiesService
 */
export const ActivitiesService = {
  typeName: "Scailo.ActivitiesService",
  methods: {
    /**
     * Create
     *
     * @generated from rpc Scailo.ActivitiesService.Create
     */
    create: {
      name: "Create",
      I: ActivitiesServiceCreateRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Update
     *
     * @generated from rpc Scailo.ActivitiesService.Update
     */
    update: {
      name: "Update",
      I: ActivitiesServiceUpdateRequest,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Cancel
     *
     * @generated from rpc Scailo.ActivitiesService.Cancel
     */
    cancel: {
      name: "Cancel",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.ActivitiesService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.ActivitiesService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.ActivitiesService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.ActivitiesService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Send Email
     *
     * @generated from rpc Scailo.ActivitiesService.SendEmail
     */
    sendEmail: {
      name: "SendEmail",
      I: IdentifierWithEmailAttributes,
      O: IdentifierUUID,
      kind: MethodKind.Unary,
    },
    /**
     * Add an action to an activity
     *
     * @generated from rpc Scailo.ActivitiesService.AddAction
     */
    addAction: {
      name: "AddAction",
      I: ActivitiesServiceActionCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an action with an activity timer to an activity
     *
     * @generated from rpc Scailo.ActivitiesService.AddActionWithTimer
     */
    addActionWithTimer: {
      name: "AddActionWithTimer",
      I: ActivitiesServiceActionWithTimerCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an action in an activity
     *
     * @generated from rpc Scailo.ActivitiesService.ModifyAction
     */
    modifyAction: {
      name: "ModifyAction",
      I: ActivitiesServiceActionUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an action in an activity
     *
     * @generated from rpc Scailo.ActivitiesService.DeleteAction
     */
    deleteAction: {
      name: "DeleteAction",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder actions in an activity
     *
     * @generated from rpc Scailo.ActivitiesService.ReorderActions
     */
    reorderActions: {
      name: "ReorderActions",
      I: ReorderItemsRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View Activity Action by ID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewActionByID
     */
    viewActionByID: {
      name: "ViewActionByID",
      I: Identifier,
      O: ActivityAction,
      kind: MethodKind.Unary,
    },
    /**
     * View Statistics of Activity Action by ID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewActionStatistics
     */
    viewActionStatistics: {
      name: "ViewActionStatistics",
      I: Identifier,
      O: ActivityActionStatistics,
      kind: MethodKind.Unary,
    },
    /**
     * View all actions for given activity UUID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewActions
     */
    viewActions: {
      name: "ViewActions",
      I: IdentifierUUID,
      O: ActivityActionsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the activity action
     *
     * @generated from rpc Scailo.ActivitiesService.ViewActionHistory
     */
    viewActionHistory: {
      name: "ViewActionHistory",
      I: ActivityActionHistoryRequest,
      O: ActivityActionsList,
      kind: MethodKind.Unary,
    },
    /**
     * View activity actions for given activity ID with pagination
     *
     * @generated from rpc Scailo.ActivitiesService.ViewPaginatedActions
     */
    viewPaginatedActions: {
      name: "ViewPaginatedActions",
      I: ActivityActionsSearchRequest,
      O: ActivitiesServicePaginatedActionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through activity actions with pagination
     *
     * @generated from rpc Scailo.ActivitiesService.SearchActionsWithPagination
     */
    searchActionsWithPagination: {
      name: "SearchActionsWithPagination",
      I: ActivityActionsSearchRequest,
      O: ActivitiesServicePaginatedActionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that could be used to upload actions from the filled CSV file. The same file can also be used as a template when there are no existing records
     *
     * @generated from rpc Scailo.ActivitiesService.DownloadActionsAsCSV
     */
    downloadActionsAsCSV: {
      name: "DownloadActionsAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Upload actions using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
     *
     * @generated from rpc Scailo.ActivitiesService.UploadActivityActions
     */
    uploadActivityActions: {
      name: "UploadActivityActions",
      I: IdentifierUUIDWithFile,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * Add an activity tag
     *
     * @generated from rpc Scailo.ActivitiesService.AddActivityTagAssociation
     */
    addActivityTagAssociation: {
      name: "AddActivityTagAssociation",
      I: ActivitiesServiceActivityTagAssociationCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an activity tag
     *
     * @generated from rpc Scailo.ActivitiesService.DeleteActivityTagAssociation
     */
    deleteActivityTagAssociation: {
      name: "DeleteActivityTagAssociation",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View activity tag for the given ID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewActivityTagAssociationByID
     */
    viewActivityTagAssociationByID: {
      name: "ViewActivityTagAssociationByID",
      I: Identifier,
      O: ActivityTagAssociation,
      kind: MethodKind.Unary,
    },
    /**
     * View all activities tags for given activity UUID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewActivityTagAssociations
     */
    viewActivityTagAssociations: {
      name: "ViewActivityTagAssociations",
      I: IdentifierUUID,
      O: ActivityTagAssociationsList,
      kind: MethodKind.Unary,
    },
    /**
     * Add an owner
     *
     * @generated from rpc Scailo.ActivitiesService.AddOwner
     */
    addOwner: {
      name: "AddOwner",
      I: ActivitiesServiceOwnerCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an owner
     *
     * @generated from rpc Scailo.ActivitiesService.DeleteOwner
     */
    deleteOwner: {
      name: "DeleteOwner",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View an owner for the given ID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewOwnerByID
     */
    viewOwnerByID: {
      name: "ViewOwnerByID",
      I: Identifier,
      O: ActivityOwner,
      kind: MethodKind.Unary,
    },
    /**
     * View all owners for given activity UUID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewOwners
     */
    viewOwners: {
      name: "ViewOwners",
      I: IdentifierUUID,
      O: ActivityOwnersList,
      kind: MethodKind.Unary,
    },
    /**
     * Import employees as owners from team and returns the ID of the activity
     *
     * @generated from rpc Scailo.ActivitiesService.ImportOwnersFromTeam
     */
    importOwnersFromTeam: {
      name: "ImportOwnersFromTeam",
      I: ActivitiesServiceImportOwnersRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Import employees as owners from department and returns the ID of the activity
     *
     * @generated from rpc Scailo.ActivitiesService.ImportOwnersFromDepartment
     */
    importOwnersFromDepartment: {
      name: "ImportOwnersFromDepartment",
      I: ActivitiesServiceImportOwnersRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add a supervisor
     *
     * @generated from rpc Scailo.ActivitiesService.AddSupervisor
     */
    addSupervisor: {
      name: "AddSupervisor",
      I: ActivitiesServiceSupervisorCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a supervisor
     *
     * @generated from rpc Scailo.ActivitiesService.DeleteSupervisor
     */
    deleteSupervisor: {
      name: "DeleteSupervisor",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View supervisor for the given ID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewSupervisorByID
     */
    viewSupervisorByID: {
      name: "ViewSupervisorByID",
      I: Identifier,
      O: ActivitySupervisor,
      kind: MethodKind.Unary,
    },
    /**
     * View all supervisors for given activity UUID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewSupervisors
     */
    viewSupervisors: {
      name: "ViewSupervisors",
      I: IdentifierUUID,
      O: ActivitySupervisorsList,
      kind: MethodKind.Unary,
    },
    /**
     * Add a timer
     *
     * @generated from rpc Scailo.ActivitiesService.AddTimer
     */
    addTimer: {
      name: "AddTimer",
      I: ActivitiesServiceTimerCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * End a timer
     *
     * @generated from rpc Scailo.ActivitiesService.EndTimer
     */
    endTimer: {
      name: "EndTimer",
      I: ActivitiesServiceTimerEndRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View a timer for the given ID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewTimerByID
     */
    viewTimerByID: {
      name: "ViewTimerByID",
      I: Identifier,
      O: ActivityTimer,
      kind: MethodKind.Unary,
    },
    /**
     * View all timers for given activity UUID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewTimers
     */
    viewTimers: {
      name: "ViewTimers",
      I: IdentifierUUID,
      O: ActivityTimersList,
      kind: MethodKind.Unary,
    },
    /**
     * View activity timers for given activity ID with pagination
     *
     * @generated from rpc Scailo.ActivitiesService.ViewPaginatedTimers
     */
    viewPaginatedTimers: {
      name: "ViewPaginatedTimers",
      I: ActivityTimersSearchRequest,
      O: ActivitiesServicePaginatedTimersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through activity timers with pagination
     *
     * @generated from rpc Scailo.ActivitiesService.SearchTimersWithPagination
     */
    searchTimersWithPagination: {
      name: "SearchTimersWithPagination",
      I: ActivityTimersSearchRequest,
      O: ActivitiesServicePaginatedTimersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that could be used to upload timers from the filled CSV file. The same file can also be used as a template when there are no existing records
     *
     * Upload timers using a CSV file. This is not an idempotent operation.
     * rpc UploadActivityTimers(IdentifierUUIDWithFile) returns (IdentifiersList);
     *
     * @generated from rpc Scailo.ActivitiesService.DownloadTimersAsCSV
     */
    downloadTimersAsCSV: {
      name: "DownloadTimersAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: Activity,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: Activity,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components by ID (without logs)
     *
     * @generated from rpc Scailo.ActivitiesService.ViewEssentialByID
     */
    viewEssentialByID: {
      name: "ViewEssentialByID",
      I: Identifier,
      O: Activity,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components (without logs) that matches the given UUID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewEssentialByUUID
     */
    viewEssentialByUUID: {
      name: "ViewEssentialByUUID",
      I: IdentifierUUID,
      O: Activity,
      kind: MethodKind.Unary,
    },
    /**
     * View all records with the given IDs
     *
     * @generated from rpc Scailo.ActivitiesService.ViewFromIDs
     */
    viewFromIDs: {
      name: "ViewFromIDs",
      I: IdentifiersList,
      O: ActivitiesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.ActivitiesService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: ActivitiesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.ActivitiesService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: ActivitiesList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.ActivitiesService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: ActivitiesServicePaginationReq,
      O: ActivitiesServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View Statistics of Activity
     *
     * @generated from rpc Scailo.ActivitiesService.ViewStatistics
     */
    viewStatistics: {
      name: "ViewStatistics",
      I: IdentifierUUID,
      O: ActivityStatistics,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.ActivitiesService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: ActivitiesServiceSearchAllReq,
      O: ActivitiesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.ActivitiesService.Filter
     */
    filter: {
      name: "Filter",
      I: ActivitiesServiceFilterReq,
      O: ActivitiesList,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.ActivitiesService.Count
     */
    count: {
      name: "Count",
      I: ActivitiesServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
     *
     * @generated from rpc Scailo.ActivitiesService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: ActivitiesServiceFilterReq,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Import records using a CSV file (duplicate codes will be skipped)
     *
     * @generated from rpc Scailo.ActivitiesService.ImportFromCSV
     */
    importFromCSV: {
      name: "ImportFromCSV",
      I: StandardFile,
      O: IdentifierUUIDsList,
      kind: MethodKind.Unary,
    },
  }
} as const;

