// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file salaries.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.SALARY_SORT_KEY
 */
export enum SALARY_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: SALARY_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  SALARY_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: SALARY_SORT_KEY_CREATED_AT = 1;
   */
  SALARY_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: SALARY_SORT_KEY_MODIFIED_AT = 2;
   */
  SALARY_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: SALARY_SORT_KEY_APPROVED_ON = 3;
   */
  SALARY_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: SALARY_SORT_KEY_APPROVED_BY = 4;
   */
  SALARY_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: SALARY_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  SALARY_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: SALARY_SORT_KEY_COMPLETED_ON = 6;
   */
  SALARY_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: SALARY_SORT_KEY_REFERENCE_ID = 10;
   */
  SALARY_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: SALARY_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  SALARY_SORT_KEY_FINAL_REF_NUMBER = 11,

  /**
   * Fetch ordered results by the employee ID
   *
   * @generated from enum value: SALARY_SORT_KEY_EMPLOYEE_ID = 12;
   */
  SALARY_SORT_KEY_EMPLOYEE_ID = 12,

  /**
   * Fetch ordered results by the bank account ID
   *
   * @generated from enum value: SALARY_SORT_KEY_BANK_ACCOUNT_ID = 13;
   */
  SALARY_SORT_KEY_BANK_ACCOUNT_ID = 13,

  /**
   * Fetch ordered results by the currency ID
   *
   * @generated from enum value: SALARY_SORT_KEY_CURRENCY_ID = 14;
   */
  SALARY_SORT_KEY_CURRENCY_ID = 14,

  /**
   * Fetch ordered results by the payroll group ID
   *
   * @generated from enum value: SALARY_SORT_KEY_PAYROLL_GROUP_ID = 15;
   */
  SALARY_SORT_KEY_PAYROLL_GROUP_ID = 15,

  /**
   * Fetch ordered results by the tax group ID
   *
   * @generated from enum value: SALARY_SORT_KEY_TAX_GROUP_ID = 16;
   */
  SALARY_SORT_KEY_TAX_GROUP_ID = 16,
}
// Retrieve enum metadata with: proto3.getEnumType(SALARY_SORT_KEY)
proto3.util.setEnumType(SALARY_SORT_KEY, "Scailo.SALARY_SORT_KEY", [
  { no: 0, name: "SALARY_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "SALARY_SORT_KEY_CREATED_AT" },
  { no: 2, name: "SALARY_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "SALARY_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "SALARY_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "SALARY_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "SALARY_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "SALARY_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "SALARY_SORT_KEY_FINAL_REF_NUMBER" },
  { no: 12, name: "SALARY_SORT_KEY_EMPLOYEE_ID" },
  { no: 13, name: "SALARY_SORT_KEY_BANK_ACCOUNT_ID" },
  { no: 14, name: "SALARY_SORT_KEY_CURRENCY_ID" },
  { no: 15, name: "SALARY_SORT_KEY_PAYROLL_GROUP_ID" },
  { no: 16, name: "SALARY_SORT_KEY_TAX_GROUP_ID" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.SalariesServiceCreateRequest
 */
export class SalariesServiceCreateRequest extends Message<SalariesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the salary
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The ID of the associated employee
   *
   * @generated from field: int64 employee_id = 12;
   */
  employeeId = protoInt64.zero;

  /**
   * The date from which the salary is being calculated
   *
   * @generated from field: string from_date = 13;
   */
  fromDate = "";

  /**
   * The date until which the salary is being calculated
   *
   * @generated from field: string to_date = 14;
   */
  toDate = "";

  /**
   * The ID of the bank account (belonging to the organization) from which the salary will be debited
   *
   * @generated from field: int64 bank_account_id = 15;
   */
  bankAccountId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: int64 currency_id = 16;
   */
  currencyId = protoInt64.zero;

  /**
   * The basic pay amount
   *
   * @generated from field: int64 basic_pay_amount = 17;
   */
  basicPayAmount = protoInt64.zero;

  /**
   * The unit of the basic pay
   *
   * @generated from field: int64 basic_pay_uom_id = 18;
   */
  basicPayUomId = protoInt64.zero;

  /**
   * The number of attendance records being considered
   *
   * @generated from field: int64 applicable_attendance_records_count = 19;
   */
  applicableAttendanceRecordsCount = protoInt64.zero;

  /**
   * The unit of attendance
   *
   * @generated from field: int64 applicable_attendance_uom_id = 20;
   */
  applicableAttendanceUomId = protoInt64.zero;

  /**
   * The numerator for the conversion factor from attendance unit to basic pay unit
   *
   * @generated from field: int64 cf_from_attendance_uom_id_to_basic_pay_uom_id_numerator = 21;
   */
  cfFromAttendanceUomIdToBasicPayUomIdNumerator = protoInt64.zero;

  /**
   * The denominator for the conversion factor from attendance unit to basic pay unit
   *
   * @generated from field: int64 cf_from_attendance_uom_id_to_basic_pay_uom_id_denominator = 22;
   */
  cfFromAttendanceUomIdToBasicPayUomIdDenominator = protoInt64.zero;

  /**
   * The ID of the associated payroll group
   *
   * @generated from field: int64 payroll_group_id = 23;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: int64 tax_group_id = 24;
   */
  taxGroupId = protoInt64.zero;

  /**
   * Any additional description
   *
   * @generated from field: string description = 25;
   */
  description = "";

  /**
   * Stores any roundoff amount
   *
   * @generated from field: int64 round_off = 30;
   */
  roundOff = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 50;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<SalariesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "employee_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "from_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "to_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "bank_account_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "currency_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "basic_pay_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "basic_pay_uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "applicable_attendance_records_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "applicable_attendance_uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 21, name: "cf_from_attendance_uom_id_to_basic_pay_uom_id_numerator", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "cf_from_attendance_uom_id_to_basic_pay_uom_id_denominator", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "payroll_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "tax_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 50, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceCreateRequest {
    return new SalariesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceCreateRequest {
    return new SalariesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceCreateRequest {
    return new SalariesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceCreateRequest | PlainMessage<SalariesServiceCreateRequest> | undefined, b: SalariesServiceCreateRequest | PlainMessage<SalariesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(SalariesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.SalariesServiceUpdateRequest
 */
export class SalariesServiceUpdateRequest extends Message<SalariesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the salary
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The date from which the salary is being calculated
   *
   * @generated from field: string from_date = 13;
   */
  fromDate = "";

  /**
   * The date until which the salary is being calculated
   *
   * @generated from field: string to_date = 14;
   */
  toDate = "";

  /**
   * The ID of the bank account (belonging to the organization) from which the salary will be debited
   *
   * @generated from field: int64 bank_account_id = 15;
   */
  bankAccountId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: int64 currency_id = 16;
   */
  currencyId = protoInt64.zero;

  /**
   * The basic pay amount
   *
   * @generated from field: int64 basic_pay_amount = 17;
   */
  basicPayAmount = protoInt64.zero;

  /**
   * The unit of the basic pay
   *
   * @generated from field: int64 basic_pay_uom_id = 18;
   */
  basicPayUomId = protoInt64.zero;

  /**
   * The number of attendance records being considered
   *
   * @generated from field: int64 applicable_attendance_records_count = 19;
   */
  applicableAttendanceRecordsCount = protoInt64.zero;

  /**
   * The unit of attendance
   *
   * @generated from field: int64 applicable_attendance_uom_id = 20;
   */
  applicableAttendanceUomId = protoInt64.zero;

  /**
   * The numerator for the conversion factor from attendance unit to basic pay unit
   *
   * @generated from field: int64 cf_from_attendance_uom_id_to_basic_pay_uom_id_numerator = 21;
   */
  cfFromAttendanceUomIdToBasicPayUomIdNumerator = protoInt64.zero;

  /**
   * The denominator for the conversion factor from attendance unit to basic pay unit
   *
   * @generated from field: int64 cf_from_attendance_uom_id_to_basic_pay_uom_id_denominator = 22;
   */
  cfFromAttendanceUomIdToBasicPayUomIdDenominator = protoInt64.zero;

  /**
   * The ID of the associated payroll group
   *
   * @generated from field: int64 payroll_group_id = 23;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: int64 tax_group_id = 24;
   */
  taxGroupId = protoInt64.zero;

  /**
   * Any additional description
   *
   * @generated from field: string description = 25;
   */
  description = "";

  /**
   * Stores any roundoff amount
   *
   * @generated from field: int64 round_off = 30;
   */
  roundOff = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 50;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<SalariesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "from_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "to_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "bank_account_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "currency_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "basic_pay_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "basic_pay_uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "applicable_attendance_records_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "applicable_attendance_uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 21, name: "cf_from_attendance_uom_id_to_basic_pay_uom_id_numerator", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "cf_from_attendance_uom_id_to_basic_pay_uom_id_denominator", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "payroll_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "tax_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 50, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceUpdateRequest {
    return new SalariesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceUpdateRequest {
    return new SalariesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceUpdateRequest {
    return new SalariesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceUpdateRequest | PlainMessage<SalariesServiceUpdateRequest> | undefined, b: SalariesServiceUpdateRequest | PlainMessage<SalariesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SalariesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to perform an autofill request
 *
 * @generated from message Scailo.SalariesServiceAutofillRequest
 */
export class SalariesServiceAutofillRequest extends Message<SalariesServiceAutofillRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the record that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  constructor(data?: PartialMessage<SalariesServiceAutofillRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceAutofillRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceAutofillRequest {
    return new SalariesServiceAutofillRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceAutofillRequest {
    return new SalariesServiceAutofillRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceAutofillRequest {
    return new SalariesServiceAutofillRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceAutofillRequest | PlainMessage<SalariesServiceAutofillRequest> | undefined, b: SalariesServiceAutofillRequest | PlainMessage<SalariesServiceAutofillRequest> | undefined): boolean {
    return proto3.util.equals(SalariesServiceAutofillRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.Salary
 */
export class Salary extends Message<Salary> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this salary
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this salary
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this salary
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this salary was marked as completed
   *
   * @generated from field: int64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: int64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the salary
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The ID of the associated employee
   *
   * @generated from field: int64 employee_id = 12;
   */
  employeeId = protoInt64.zero;

  /**
   * The date from which the salary is being calculated
   *
   * @generated from field: string from_date = 13;
   */
  fromDate = "";

  /**
   * The date until which the salary is being calculated
   *
   * @generated from field: string to_date = 14;
   */
  toDate = "";

  /**
   * The ID of the bank account (belonging to the organization) from which the salary will be debited
   *
   * @generated from field: int64 bank_account_id = 15;
   */
  bankAccountId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: int64 currency_id = 16;
   */
  currencyId = protoInt64.zero;

  /**
   * The basic pay amount
   *
   * @generated from field: int64 basic_pay_amount = 17;
   */
  basicPayAmount = protoInt64.zero;

  /**
   * The unit of the basic pay
   *
   * @generated from field: int64 basic_pay_uom_id = 18;
   */
  basicPayUomId = protoInt64.zero;

  /**
   * The number of attendance records being considered
   *
   * @generated from field: int64 applicable_attendance_records_count = 19;
   */
  applicableAttendanceRecordsCount = protoInt64.zero;

  /**
   * The unit of attendance
   *
   * @generated from field: int64 applicable_attendance_uom_id = 20;
   */
  applicableAttendanceUomId = protoInt64.zero;

  /**
   * The numerator for the conversion factor from attendance unit to basic pay unit
   *
   * @generated from field: int64 cf_from_attendance_uom_id_to_basic_pay_uom_id_numerator = 21;
   */
  cfFromAttendanceUomIdToBasicPayUomIdNumerator = protoInt64.zero;

  /**
   * The denominator for the conversion factor from attendance unit to basic pay unit
   *
   * @generated from field: int64 cf_from_attendance_uom_id_to_basic_pay_uom_id_denominator = 22;
   */
  cfFromAttendanceUomIdToBasicPayUomIdDenominator = protoInt64.zero;

  /**
   * The ID of the associated payroll group
   *
   * @generated from field: int64 payroll_group_id = 23;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: int64 tax_group_id = 24;
   */
  taxGroupId = protoInt64.zero;

  /**
   * Any additional description
   *
   * @generated from field: string description = 25;
   */
  description = "";

  /**
   * Stores any roundoff amount
   *
   * @generated from field: int64 round_off = 30;
   */
  roundOff = protoInt64.zero;

  /**
   * The list of associated addition items
   *
   * @generated from field: repeated Scailo.SalaryAdditionItem addition_items_list = 40;
   */
  additionItemsList: SalaryAdditionItem[] = [];

  /**
   * The list of associated deduction items
   *
   * @generated from field: repeated Scailo.SalaryDeductionItem deduction_items_list = 41;
   */
  deductionItemsList: SalaryDeductionItem[] = [];

  /**
   * The list of associated reimbursement items
   *
   * @generated from field: repeated Scailo.SalaryReimbursementItem reimbursement_items_list = 42;
   */
  reimbursementItemsList: SalaryReimbursementItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 50;
   */
  formData: FormFieldDatum[] = [];

  /**
   * The total amount of the salary
   *
   * @generated from field: double total_amount = 60;
   */
  totalAmount = 0;

  constructor(data?: PartialMessage<Salary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.Salary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "employee_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "from_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "to_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "bank_account_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "currency_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "basic_pay_amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "basic_pay_uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "applicable_attendance_records_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "applicable_attendance_uom_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 21, name: "cf_from_attendance_uom_id_to_basic_pay_uom_id_numerator", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "cf_from_attendance_uom_id_to_basic_pay_uom_id_denominator", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "payroll_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "tax_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 40, name: "addition_items_list", kind: "message", T: SalaryAdditionItem, repeated: true },
    { no: 41, name: "deduction_items_list", kind: "message", T: SalaryDeductionItem, repeated: true },
    { no: 42, name: "reimbursement_items_list", kind: "message", T: SalaryReimbursementItem, repeated: true },
    { no: 50, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
    { no: 60, name: "total_amount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Salary {
    return new Salary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Salary {
    return new Salary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Salary {
    return new Salary().fromJsonString(jsonString, options);
  }

  static equals(a: Salary | PlainMessage<Salary> | undefined, b: Salary | PlainMessage<Salary> | undefined): boolean {
    return proto3.util.equals(Salary, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of salaries
 *
 * @generated from message Scailo.SalariesList
 */
export class SalariesList extends Message<SalariesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.Salary list = 1;
   */
  list: Salary[] = [];

  constructor(data?: PartialMessage<SalariesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Salary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesList {
    return new SalariesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesList {
    return new SalariesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesList {
    return new SalariesList().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesList | PlainMessage<SalariesList> | undefined, b: SalariesList | PlainMessage<SalariesList> | undefined): boolean {
    return proto3.util.equals(SalariesList, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an addition item to a salary
 *
 * @generated from message Scailo.SalariesServiceAdditionItemCreateRequest
 */
export class SalariesServiceAdditionItemCreateRequest extends Message<SalariesServiceAdditionItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 12;
   */
  refId = protoInt64.zero;

  /**
   * The total quantity of this item (in cents)
   *
   * @generated from field: int64 quantity = 13;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<SalariesServiceAdditionItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceAdditionItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceAdditionItemCreateRequest {
    return new SalariesServiceAdditionItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceAdditionItemCreateRequest {
    return new SalariesServiceAdditionItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceAdditionItemCreateRequest {
    return new SalariesServiceAdditionItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceAdditionItemCreateRequest | PlainMessage<SalariesServiceAdditionItemCreateRequest> | undefined, b: SalariesServiceAdditionItemCreateRequest | PlainMessage<SalariesServiceAdditionItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(SalariesServiceAdditionItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an addition item in a salary
 *
 * @generated from message Scailo.SalariesServiceAdditionItemUpdateRequest
 */
export class SalariesServiceAdditionItemUpdateRequest extends Message<SalariesServiceAdditionItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The total quantity of this item (in cents)
   *
   * @generated from field: int64 quantity = 13;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<SalariesServiceAdditionItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceAdditionItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceAdditionItemUpdateRequest {
    return new SalariesServiceAdditionItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceAdditionItemUpdateRequest {
    return new SalariesServiceAdditionItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceAdditionItemUpdateRequest {
    return new SalariesServiceAdditionItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceAdditionItemUpdateRequest | PlainMessage<SalariesServiceAdditionItemUpdateRequest> | undefined, b: SalariesServiceAdditionItemUpdateRequest | PlainMessage<SalariesServiceAdditionItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SalariesServiceAdditionItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an addition item associated to a salary
 *
 * @generated from message Scailo.SalaryAdditionItem
 */
export class SalaryAdditionItem extends Message<SalaryAdditionItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this salary
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 12;
   */
  refId = protoInt64.zero;

  /**
   * The total quantity of this item (in cents)
   *
   * @generated from field: int64 quantity = 13;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<SalaryAdditionItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalaryAdditionItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalaryAdditionItem {
    return new SalaryAdditionItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalaryAdditionItem {
    return new SalaryAdditionItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalaryAdditionItem {
    return new SalaryAdditionItem().fromJsonString(jsonString, options);
  }

  static equals(a: SalaryAdditionItem | PlainMessage<SalaryAdditionItem> | undefined, b: SalaryAdditionItem | PlainMessage<SalaryAdditionItem> | undefined): boolean {
    return proto3.util.equals(SalaryAdditionItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of salary addition items
 *
 * @generated from message Scailo.SalariesAdditionItemsList
 */
export class SalariesAdditionItemsList extends Message<SalariesAdditionItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.SalaryAdditionItem list = 1;
   */
  list: SalaryAdditionItem[] = [];

  constructor(data?: PartialMessage<SalariesAdditionItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesAdditionItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SalaryAdditionItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesAdditionItemsList {
    return new SalariesAdditionItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesAdditionItemsList {
    return new SalariesAdditionItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesAdditionItemsList {
    return new SalariesAdditionItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesAdditionItemsList | PlainMessage<SalariesAdditionItemsList> | undefined, b: SalariesAdditionItemsList | PlainMessage<SalariesAdditionItemsList> | undefined): boolean {
    return proto3.util.equals(SalariesAdditionItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the addition record
 *
 * @generated from message Scailo.SalaryAdditionItemHistoryRequest
 */
export class SalaryAdditionItemHistoryRequest extends Message<SalaryAdditionItemHistoryRequest> {
  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 12;
   */
  refId = protoInt64.zero;

  constructor(data?: PartialMessage<SalaryAdditionItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalaryAdditionItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalaryAdditionItemHistoryRequest {
    return new SalaryAdditionItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalaryAdditionItemHistoryRequest {
    return new SalaryAdditionItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalaryAdditionItemHistoryRequest {
    return new SalaryAdditionItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalaryAdditionItemHistoryRequest | PlainMessage<SalaryAdditionItemHistoryRequest> | undefined, b: SalaryAdditionItemHistoryRequest | PlainMessage<SalaryAdditionItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(SalaryAdditionItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the info of a prospective salary addition item
 *
 * @generated from message Scailo.SalaryAdditionItemProspectiveInfoRequest
 */
export class SalaryAdditionItemProspectiveInfoRequest extends Message<SalaryAdditionItemProspectiveInfoRequest> {
  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  constructor(data?: PartialMessage<SalaryAdditionItemProspectiveInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalaryAdditionItemProspectiveInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalaryAdditionItemProspectiveInfoRequest {
    return new SalaryAdditionItemProspectiveInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalaryAdditionItemProspectiveInfoRequest {
    return new SalaryAdditionItemProspectiveInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalaryAdditionItemProspectiveInfoRequest {
    return new SalaryAdditionItemProspectiveInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalaryAdditionItemProspectiveInfoRequest | PlainMessage<SalaryAdditionItemProspectiveInfoRequest> | undefined, b: SalaryAdditionItemProspectiveInfoRequest | PlainMessage<SalaryAdditionItemProspectiveInfoRequest> | undefined): boolean {
    return proto3.util.equals(SalaryAdditionItemProspectiveInfoRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an deduction item to a salary
 *
 * @generated from message Scailo.SalariesServiceDeductionItemCreateRequest
 */
export class SalariesServiceDeductionItemCreateRequest extends Message<SalariesServiceDeductionItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 12;
   */
  refId = protoInt64.zero;

  /**
   * The total quantity of this item (in cents)
   *
   * @generated from field: int64 quantity = 13;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<SalariesServiceDeductionItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceDeductionItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceDeductionItemCreateRequest {
    return new SalariesServiceDeductionItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceDeductionItemCreateRequest {
    return new SalariesServiceDeductionItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceDeductionItemCreateRequest {
    return new SalariesServiceDeductionItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceDeductionItemCreateRequest | PlainMessage<SalariesServiceDeductionItemCreateRequest> | undefined, b: SalariesServiceDeductionItemCreateRequest | PlainMessage<SalariesServiceDeductionItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(SalariesServiceDeductionItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an deduction item in a salary
 *
 * @generated from message Scailo.SalariesServiceDeductionItemUpdateRequest
 */
export class SalariesServiceDeductionItemUpdateRequest extends Message<SalariesServiceDeductionItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The total quantity of this item (in cents)
   *
   * @generated from field: int64 quantity = 13;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<SalariesServiceDeductionItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceDeductionItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceDeductionItemUpdateRequest {
    return new SalariesServiceDeductionItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceDeductionItemUpdateRequest {
    return new SalariesServiceDeductionItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceDeductionItemUpdateRequest {
    return new SalariesServiceDeductionItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceDeductionItemUpdateRequest | PlainMessage<SalariesServiceDeductionItemUpdateRequest> | undefined, b: SalariesServiceDeductionItemUpdateRequest | PlainMessage<SalariesServiceDeductionItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SalariesServiceDeductionItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an deduction item associated to a salary
 *
 * @generated from message Scailo.SalaryDeductionItem
 */
export class SalaryDeductionItem extends Message<SalaryDeductionItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this salary
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 12;
   */
  refId = protoInt64.zero;

  /**
   * The total quantity of this item (in cents)
   *
   * @generated from field: int64 quantity = 13;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<SalaryDeductionItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalaryDeductionItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalaryDeductionItem {
    return new SalaryDeductionItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalaryDeductionItem {
    return new SalaryDeductionItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalaryDeductionItem {
    return new SalaryDeductionItem().fromJsonString(jsonString, options);
  }

  static equals(a: SalaryDeductionItem | PlainMessage<SalaryDeductionItem> | undefined, b: SalaryDeductionItem | PlainMessage<SalaryDeductionItem> | undefined): boolean {
    return proto3.util.equals(SalaryDeductionItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of salary deduction items
 *
 * @generated from message Scailo.SalariesDeductionItemsList
 */
export class SalariesDeductionItemsList extends Message<SalariesDeductionItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.SalaryDeductionItem list = 1;
   */
  list: SalaryDeductionItem[] = [];

  constructor(data?: PartialMessage<SalariesDeductionItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesDeductionItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SalaryDeductionItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesDeductionItemsList {
    return new SalariesDeductionItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesDeductionItemsList {
    return new SalariesDeductionItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesDeductionItemsList {
    return new SalariesDeductionItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesDeductionItemsList | PlainMessage<SalariesDeductionItemsList> | undefined, b: SalariesDeductionItemsList | PlainMessage<SalariesDeductionItemsList> | undefined): boolean {
    return proto3.util.equals(SalariesDeductionItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the deduction record
 *
 * @generated from message Scailo.SalaryDeductionItemHistoryRequest
 */
export class SalaryDeductionItemHistoryRequest extends Message<SalaryDeductionItemHistoryRequest> {
  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 12;
   */
  refId = protoInt64.zero;

  constructor(data?: PartialMessage<SalaryDeductionItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalaryDeductionItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalaryDeductionItemHistoryRequest {
    return new SalaryDeductionItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalaryDeductionItemHistoryRequest {
    return new SalaryDeductionItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalaryDeductionItemHistoryRequest {
    return new SalaryDeductionItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalaryDeductionItemHistoryRequest | PlainMessage<SalaryDeductionItemHistoryRequest> | undefined, b: SalaryDeductionItemHistoryRequest | PlainMessage<SalaryDeductionItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(SalaryDeductionItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the info of a prospective salary deduction item
 *
 * @generated from message Scailo.SalaryDeductionItemProspectiveInfoRequest
 */
export class SalaryDeductionItemProspectiveInfoRequest extends Message<SalaryDeductionItemProspectiveInfoRequest> {
  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  constructor(data?: PartialMessage<SalaryDeductionItemProspectiveInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalaryDeductionItemProspectiveInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalaryDeductionItemProspectiveInfoRequest {
    return new SalaryDeductionItemProspectiveInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalaryDeductionItemProspectiveInfoRequest {
    return new SalaryDeductionItemProspectiveInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalaryDeductionItemProspectiveInfoRequest {
    return new SalaryDeductionItemProspectiveInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalaryDeductionItemProspectiveInfoRequest | PlainMessage<SalaryDeductionItemProspectiveInfoRequest> | undefined, b: SalaryDeductionItemProspectiveInfoRequest | PlainMessage<SalaryDeductionItemProspectiveInfoRequest> | undefined): boolean {
    return proto3.util.equals(SalaryDeductionItemProspectiveInfoRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an reimbursement item to a salary
 *
 * @generated from message Scailo.SalariesServiceReimbursementItemCreateRequest
 */
export class SalariesServiceReimbursementItemCreateRequest extends Message<SalariesServiceReimbursementItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 12;
   */
  refId = protoInt64.zero;

  /**
   * The total amount of this item (in cents)
   *
   * @generated from field: int64 amount = 13;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<SalariesServiceReimbursementItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceReimbursementItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceReimbursementItemCreateRequest {
    return new SalariesServiceReimbursementItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceReimbursementItemCreateRequest {
    return new SalariesServiceReimbursementItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceReimbursementItemCreateRequest {
    return new SalariesServiceReimbursementItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceReimbursementItemCreateRequest | PlainMessage<SalariesServiceReimbursementItemCreateRequest> | undefined, b: SalariesServiceReimbursementItemCreateRequest | PlainMessage<SalariesServiceReimbursementItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(SalariesServiceReimbursementItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an reimbursement item in a salary
 *
 * @generated from message Scailo.SalariesServiceReimbursementItemUpdateRequest
 */
export class SalariesServiceReimbursementItemUpdateRequest extends Message<SalariesServiceReimbursementItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The total amount of this item (in cents)
   *
   * @generated from field: int64 amount = 13;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<SalariesServiceReimbursementItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceReimbursementItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceReimbursementItemUpdateRequest {
    return new SalariesServiceReimbursementItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceReimbursementItemUpdateRequest {
    return new SalariesServiceReimbursementItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceReimbursementItemUpdateRequest {
    return new SalariesServiceReimbursementItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceReimbursementItemUpdateRequest | PlainMessage<SalariesServiceReimbursementItemUpdateRequest> | undefined, b: SalariesServiceReimbursementItemUpdateRequest | PlainMessage<SalariesServiceReimbursementItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SalariesServiceReimbursementItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an reimbursement item associated to a salary
 *
 * @generated from message Scailo.SalaryReimbursementItem
 */
export class SalaryReimbursementItem extends Message<SalaryReimbursementItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this salary
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 12;
   */
  refId = protoInt64.zero;

  /**
   * The total amount of this item (in cents)
   *
   * @generated from field: int64 amount = 13;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<SalaryReimbursementItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalaryReimbursementItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalaryReimbursementItem {
    return new SalaryReimbursementItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalaryReimbursementItem {
    return new SalaryReimbursementItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalaryReimbursementItem {
    return new SalaryReimbursementItem().fromJsonString(jsonString, options);
  }

  static equals(a: SalaryReimbursementItem | PlainMessage<SalaryReimbursementItem> | undefined, b: SalaryReimbursementItem | PlainMessage<SalaryReimbursementItem> | undefined): boolean {
    return proto3.util.equals(SalaryReimbursementItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of salary reimbursement items
 *
 * @generated from message Scailo.SalariesReimbursementItemsList
 */
export class SalariesReimbursementItemsList extends Message<SalariesReimbursementItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.SalaryReimbursementItem list = 1;
   */
  list: SalaryReimbursementItem[] = [];

  constructor(data?: PartialMessage<SalariesReimbursementItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesReimbursementItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SalaryReimbursementItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesReimbursementItemsList {
    return new SalariesReimbursementItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesReimbursementItemsList {
    return new SalariesReimbursementItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesReimbursementItemsList {
    return new SalariesReimbursementItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesReimbursementItemsList | PlainMessage<SalariesReimbursementItemsList> | undefined, b: SalariesReimbursementItemsList | PlainMessage<SalariesReimbursementItemsList> | undefined): boolean {
    return proto3.util.equals(SalariesReimbursementItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the reimbursement record
 *
 * @generated from message Scailo.SalaryReimbursementItemHistoryRequest
 */
export class SalaryReimbursementItemHistoryRequest extends Message<SalaryReimbursementItemHistoryRequest> {
  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  /**
   * The associated ID of the reference
   *
   * @generated from field: int64 ref_id = 12;
   */
  refId = protoInt64.zero;

  constructor(data?: PartialMessage<SalaryReimbursementItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalaryReimbursementItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalaryReimbursementItemHistoryRequest {
    return new SalaryReimbursementItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalaryReimbursementItemHistoryRequest {
    return new SalaryReimbursementItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalaryReimbursementItemHistoryRequest {
    return new SalaryReimbursementItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalaryReimbursementItemHistoryRequest | PlainMessage<SalaryReimbursementItemHistoryRequest> | undefined, b: SalaryReimbursementItemHistoryRequest | PlainMessage<SalaryReimbursementItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(SalaryReimbursementItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the info of a prospective salary reimbursement item
 *
 * @generated from message Scailo.SalaryReimbursementItemProspectiveInfoRequest
 */
export class SalaryReimbursementItemProspectiveInfoRequest extends Message<SalaryReimbursementItemProspectiveInfoRequest> {
  /**
   * Stores the salary ID
   *
   * @generated from field: int64 salary_id = 10;
   */
  salaryId = protoInt64.zero;

  /**
   * The associated reference
   *
   * @generated from field: string ref_from = 11;
   */
  refFrom = "";

  constructor(data?: PartialMessage<SalaryReimbursementItemProspectiveInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalaryReimbursementItemProspectiveInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "salary_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "ref_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalaryReimbursementItemProspectiveInfoRequest {
    return new SalaryReimbursementItemProspectiveInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalaryReimbursementItemProspectiveInfoRequest {
    return new SalaryReimbursementItemProspectiveInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalaryReimbursementItemProspectiveInfoRequest {
    return new SalaryReimbursementItemProspectiveInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SalaryReimbursementItemProspectiveInfoRequest | PlainMessage<SalaryReimbursementItemProspectiveInfoRequest> | undefined, b: SalaryReimbursementItemProspectiveInfoRequest | PlainMessage<SalaryReimbursementItemProspectiveInfoRequest> | undefined): boolean {
    return proto3.util.equals(SalaryReimbursementItemProspectiveInfoRequest, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.SalariesServicePaginationReq
 */
export class SalariesServicePaginationReq extends Message<SalariesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SALARY_SORT_KEY sort_key = 5;
   */
  sortKey = SALARY_SORT_KEY.SALARY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this salary
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<SalariesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SALARY_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServicePaginationReq {
    return new SalariesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServicePaginationReq {
    return new SalariesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServicePaginationReq {
    return new SalariesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServicePaginationReq | PlainMessage<SalariesServicePaginationReq> | undefined, b: SalariesServicePaginationReq | PlainMessage<SalariesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(SalariesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.SalariesServicePaginationResponse
 */
export class SalariesServicePaginationResponse extends Message<SalariesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: int64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.Salary payload = 4;
   */
  payload: Salary[] = [];

  constructor(data?: PartialMessage<SalariesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "payload", kind: "message", T: Salary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServicePaginationResponse {
    return new SalariesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServicePaginationResponse {
    return new SalariesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServicePaginationResponse {
    return new SalariesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServicePaginationResponse | PlainMessage<SalariesServicePaginationResponse> | undefined, b: SalariesServicePaginationResponse | PlainMessage<SalariesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(SalariesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.SalariesServiceFilterReq
 */
export class SalariesServiceFilterReq extends Message<SalariesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SALARY_SORT_KEY sort_key = 5;
   */
  sortKey = SALARY_SORT_KEY.SALARY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this salary
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: int64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: int64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: int64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: int64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: int64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: int64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the salary
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The employee ID of the salary
   *
   * @generated from field: int64 employee_id = 22;
   */
  employeeId = protoInt64.zero;

  /**
   * The bank account ID of the salary
   *
   * @generated from field: int64 bank_account_id = 23;
   */
  bankAccountId = protoInt64.zero;

  /**
   * The currency ID of the salary
   *
   * @generated from field: int64 currency_id = 24;
   */
  currencyId = protoInt64.zero;

  /**
   * The payroll group ID of the salary
   *
   * @generated from field: int64 payroll_group_id = 25;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The tax group ID of the salary
   *
   * @generated from field: int64 tax_group_id = 26;
   */
  taxGroupId = protoInt64.zero;

  constructor(data?: PartialMessage<SalariesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SALARY_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "employee_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "bank_account_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "currency_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "payroll_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 26, name: "tax_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceFilterReq {
    return new SalariesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceFilterReq {
    return new SalariesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceFilterReq {
    return new SalariesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceFilterReq | PlainMessage<SalariesServiceFilterReq> | undefined, b: SalariesServiceFilterReq | PlainMessage<SalariesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(SalariesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.SalariesServiceCountReq
 */
export class SalariesServiceCountReq extends Message<SalariesServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this salary
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: int64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: int64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: int64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: int64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: int64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: int64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the salary
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The employee ID of the salary
   *
   * @generated from field: int64 employee_id = 22;
   */
  employeeId = protoInt64.zero;

  /**
   * The bank account ID of the salary
   *
   * @generated from field: int64 bank_account_id = 23;
   */
  bankAccountId = protoInt64.zero;

  /**
   * The currency ID of the salary
   *
   * @generated from field: int64 currency_id = 24;
   */
  currencyId = protoInt64.zero;

  /**
   * The payroll group ID of the salary
   *
   * @generated from field: int64 payroll_group_id = 25;
   */
  payrollGroupId = protoInt64.zero;

  /**
   * The tax group ID of the salary
   *
   * @generated from field: int64 tax_group_id = 26;
   */
  taxGroupId = protoInt64.zero;

  constructor(data?: PartialMessage<SalariesServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "employee_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "bank_account_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 24, name: "currency_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "payroll_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 26, name: "tax_group_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceCountReq {
    return new SalariesServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceCountReq {
    return new SalariesServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceCountReq {
    return new SalariesServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceCountReq | PlainMessage<SalariesServiceCountReq> | undefined, b: SalariesServiceCountReq | PlainMessage<SalariesServiceCountReq> | undefined): boolean {
    return proto3.util.equals(SalariesServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.SalariesServiceSearchAllReq
 */
export class SalariesServiceSearchAllReq extends Message<SalariesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SALARY_SORT_KEY sort_key = 5;
   */
  sortKey = SALARY_SORT_KEY.SALARY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<SalariesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.SalariesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SALARY_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SalariesServiceSearchAllReq {
    return new SalariesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SalariesServiceSearchAllReq {
    return new SalariesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SalariesServiceSearchAllReq {
    return new SalariesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: SalariesServiceSearchAllReq | PlainMessage<SalariesServiceSearchAllReq> | undefined, b: SalariesServiceSearchAllReq | PlainMessage<SalariesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(SalariesServiceSearchAllReq, a, b);
  }
}

