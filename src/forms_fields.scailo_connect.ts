// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file forms_fields.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { FormField, FormFieldPaginationResp, FormsFieldsList, FormsFieldsServiceCountReq, FormsFieldsServiceCreateRequest, FormsFieldsServiceFilterReq, FormsFieldsServicePaginationReq, FormsFieldsServiceSearchAllReq, FormsFieldsServiceUpdateRequest } from "./forms_fields.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { ActiveStatus, CountResponse, Identifier, IdentifierResponse, IdentifierUUID, IdentifierUUIDsList, IdentifierUUIDWithUserComment, StandardFile } from "./base.scailo_pb.js";

/**
 *
 * Describes the methods applicable on each form field
 *
 * @generated from service Scailo.FormsFieldsService
 */
export const FormsFieldsService = {
  typeName: "Scailo.FormsFieldsService",
  methods: {
    /**
     * Create a form field
     *
     * @generated from rpc Scailo.FormsFieldsService.Create
     */
    create: {
      name: "Create",
      I: FormsFieldsServiceCreateRequest,
      O: FormField,
      kind: MethodKind.Unary,
    },
    /**
     * Update a form field
     *
     * @generated from rpc Scailo.FormsFieldsService.Update
     */
    update: {
      name: "Update",
      I: FormsFieldsServiceUpdateRequest,
      O: FormField,
      kind: MethodKind.Unary,
    },
    /**
     * Discard the form field
     *
     * @generated from rpc Scailo.FormsFieldsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore the form field
     *
     * @generated from rpc Scailo.FormsFieldsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.FormsFieldsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: FormField,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.FormsFieldsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: FormField,
      kind: MethodKind.Unary,
    },
    /**
     * View all forms fields
     *
     * @generated from rpc Scailo.FormsFieldsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: FormsFieldsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all forms fields with the given entity UUID
     *
     * @generated from rpc Scailo.FormsFieldsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: FormsFieldsList,
      kind: MethodKind.Unary,
    },
    /**
     * View forms fields with pagination
     *
     * @generated from rpc Scailo.FormsFieldsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: FormsFieldsServicePaginationReq,
      O: FormFieldPaginationResp,
      kind: MethodKind.Unary,
    },
    /**
     * View all forms fields that match the given search key
     *
     * @generated from rpc Scailo.FormsFieldsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: FormsFieldsServiceSearchAllReq,
      O: FormsFieldsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.FormsFieldsService.Filter
     */
    filter: {
      name: "Filter",
      I: FormsFieldsServiceFilterReq,
      O: FormsFieldsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.FormsFieldsService.Count
     */
    count: {
      name: "Count",
      I: FormsFieldsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
     *
     * @generated from rpc Scailo.FormsFieldsService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: FormsFieldsServiceFilterReq,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Import records using a CSV file (duplicate codes will be skipped)
     *
     * @generated from rpc Scailo.FormsFieldsService.ImportFromCSV
     */
    importFromCSV: {
      name: "ImportFromCSV",
      I: StandardFile,
      O: IdentifierUUIDsList,
      kind: MethodKind.Unary,
    },
  }
} as const;

