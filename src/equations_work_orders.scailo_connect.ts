// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file equations_work_orders.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { EquationsWorkOrdersItemsList, EquationsWorkOrdersList, EquationsWorkOrdersServiceCountReq, EquationsWorkOrdersServiceCreateRequest, EquationsWorkOrdersServiceFilterReq, EquationsWorkOrdersServiceItemCreateRequest, EquationsWorkOrdersServiceItemUpdateRequest, EquationsWorkOrdersServicePaginatedItemsResponse, EquationsWorkOrdersServicePaginationReq, EquationsWorkOrdersServicePaginationResponse, EquationsWorkOrdersServiceSearchAllReq, EquationsWorkOrdersServiceUpdateRequest, EquationWorkOrder, EquationWorkOrderItem, EquationWorkOrderItemHistoryRequest, EquationWorkOrderItemsSearchRequest } from "./equations_work_orders.scailo_pb.js";
import { ActiveStatus, AmendmentLogsList, CloneRequest, CountInSLCStatusRequest, CountResponse, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDsList, IdentifierUUIDWithFile, IdentifierUUIDWithUserComment, IdentifierWithSearchKey, IdentifierWithUserComment, ReorderItemsRequest, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each equation work order
 *
 * @generated from service Scailo.EquationsWorkOrdersService
 */
export const EquationsWorkOrdersService = {
  typeName: "Scailo.EquationsWorkOrdersService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Create
     */
    create: {
      name: "Create",
      I: EquationsWorkOrdersServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Draft
     */
    draft: {
      name: "Draft",
      I: EquationsWorkOrdersServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: EquationsWorkOrdersServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: EquationsWorkOrdersServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (IdentifierWithEmailAttributes) returns (IdentifierResponse);
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Amend the equation work order and send for revision
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Amend
     */
    amend: {
      name: "Amend",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Clone equation from an existing equation (denoted by the identifier)
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Clone
     */
    clone: {
      name: "Clone",
      I: CloneRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an item to a equation work order
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.AddEquationWorkOrderItem
     */
    addEquationWorkOrderItem: {
      name: "AddEquationWorkOrderItem",
      I: EquationsWorkOrdersServiceItemCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an item in a equation work order
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ModifyEquationWorkOrderItem
     */
    modifyEquationWorkOrderItem: {
      name: "ModifyEquationWorkOrderItem",
      I: EquationsWorkOrdersServiceItemUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve an item in a equation work order
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ApproveEquationWorkOrderItem
     */
    approveEquationWorkOrderItem: {
      name: "ApproveEquationWorkOrderItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an item in a equation work order
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.DeleteEquationWorkOrderItem
     */
    deleteEquationWorkOrderItem: {
      name: "DeleteEquationWorkOrderItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder items in a equation work order
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ReorderEquationWorkOrderItems
     */
    reorderEquationWorkOrderItems: {
      name: "ReorderEquationWorkOrderItems",
      I: ReorderItemsRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View Equation Work Order Item by ID
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewEquationWorkOrderItemByID
     */
    viewEquationWorkOrderItemByID: {
      name: "ViewEquationWorkOrderItemByID",
      I: Identifier,
      O: EquationWorkOrderItem,
      kind: MethodKind.Unary,
    },
    /**
     * View approved equation work order items for given equation work order ID
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewApprovedEquationWorkOrderItems
     */
    viewApprovedEquationWorkOrderItems: {
      name: "ViewApprovedEquationWorkOrderItems",
      I: IdentifierWithSearchKey,
      O: EquationsWorkOrdersItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved equation work order items for given equation work order ID
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewUnapprovedEquationWorkOrderItems
     */
    viewUnapprovedEquationWorkOrderItems: {
      name: "ViewUnapprovedEquationWorkOrderItems",
      I: IdentifierWithSearchKey,
      O: EquationsWorkOrdersItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the equation work order item
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewEquationWorkOrderItemHistory
     */
    viewEquationWorkOrderItemHistory: {
      name: "ViewEquationWorkOrderItemHistory",
      I: EquationWorkOrderItemHistoryRequest,
      O: EquationsWorkOrdersItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View approved equation work order items for given equation work order ID with pagination
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewPaginatedApprovedEquationWorkOrderItems
     */
    viewPaginatedApprovedEquationWorkOrderItems: {
      name: "ViewPaginatedApprovedEquationWorkOrderItems",
      I: EquationWorkOrderItemsSearchRequest,
      O: EquationsWorkOrdersServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved equation work order items for given equation work order ID with pagination
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewPaginatedUnapprovedEquationWorkOrderItems
     */
    viewPaginatedUnapprovedEquationWorkOrderItems: {
      name: "ViewPaginatedUnapprovedEquationWorkOrderItems",
      I: EquationWorkOrderItemsSearchRequest,
      O: EquationsWorkOrdersServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through equation work order items with pagination
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.SearchItemsWithPagination
     */
    searchItemsWithPagination: {
      name: "SearchItemsWithPagination",
      I: EquationWorkOrderItemsSearchRequest,
      O: EquationsWorkOrdersServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that could be used to upload items from the filled CSV file. The same file can also be used as a template when there are no existing records
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.DownloadItemsAsCSV
     */
    downloadItemsAsCSV: {
      name: "DownloadItemsAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download the CSV file with the entire dependency tree. Useful for identifying quantities necessary from all the dependencies.
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.DownloadTreeAsCSV
     */
    downloadTreeAsCSV: {
      name: "DownloadTreeAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.UploadEquationWorkOrderItems
     */
    uploadEquationWorkOrderItems: {
      name: "UploadEquationWorkOrderItems",
      I: IdentifierUUIDWithFile,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: EquationWorkOrder,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: EquationWorkOrder,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: EquationsWorkOrdersList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: EquationsWorkOrdersList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: EquationsWorkOrdersServicePaginationReq,
      O: EquationsWorkOrdersServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View the latest equation for a work order (denoted by the given identifier)
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewForWorkOrderID
     */
    viewForWorkOrderID: {
      name: "ViewForWorkOrderID",
      I: Identifier,
      O: EquationWorkOrder,
      kind: MethodKind.Unary,
    },
    /**
     * View all the amendments made
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ViewAmendments
     */
    viewAmendments: {
      name: "ViewAmendments",
      I: Identifier,
      O: AmendmentLogsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: EquationsWorkOrdersServiceSearchAllReq,
      O: EquationsWorkOrdersList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Filter
     */
    filter: {
      name: "Filter",
      I: EquationsWorkOrdersServiceFilterReq,
      O: EquationsWorkOrdersList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given count criteria
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.Count
     */
    count: {
      name: "Count",
      I: EquationsWorkOrdersServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: EquationsWorkOrdersServiceFilterReq,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Import records using a CSV file (duplicate codes will be skipped)
     *
     * @generated from rpc Scailo.EquationsWorkOrdersService.ImportFromCSV
     */
    importFromCSV: {
      name: "ImportFromCSV",
      I: StandardFile,
      O: IdentifierUUIDsList,
      kind: MethodKind.Unary,
    },
  }
} as const;

