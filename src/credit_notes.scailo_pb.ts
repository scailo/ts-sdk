// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file credit_notes.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Stores all the possible references from which a credit note can be added
 *
 * @generated from enum Scailo.CREDIT_NOTE_REF_FROM
 */
export enum CREDIT_NOTE_REF_FROM {
  /**
   * Used only in filters
   *
   * @generated from enum value: CREDIT_NOTE_REF_FROM_ANY_UNSPECIFIED = 0;
   */
  CREDIT_NOTE_REF_FROM_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the credit note originated from a sales order
   *
   * @generated from enum value: CREDIT_NOTE_REF_FROM_SALES_ORDER = 1;
   */
  CREDIT_NOTE_REF_FROM_SALES_ORDER = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(CREDIT_NOTE_REF_FROM)
proto3.util.setEnumType(CREDIT_NOTE_REF_FROM, "Scailo.CREDIT_NOTE_REF_FROM", [
  { no: 0, name: "CREDIT_NOTE_REF_FROM_ANY_UNSPECIFIED" },
  { no: 1, name: "CREDIT_NOTE_REF_FROM_SALES_ORDER" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.CREDIT_NOTE_ITEM_SORT_KEY
 */
export enum CREDIT_NOTE_ITEM_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_CREATED_AT = 1;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_MODIFIED_AT = 2;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_APPROVED_ON = 3;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_APPROVED_BY = 4;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the family ID
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_FAMILY_ID = 10;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_FAMILY_ID = 10,

  /**
   * Fetch ordered results by the internal quantity
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_INTERNAL_QUANTITY = 11;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_INTERNAL_QUANTITY = 11,

  /**
   * Fetch ordered results by the client unit of material ID
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_CLIENT_UOM_ID = 12;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_CLIENT_UOM_ID = 12,

  /**
   * Fetch ordered results by the client quantity
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_CLIENT_QUANTITY = 13;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_CLIENT_QUANTITY = 13,

  /**
   * Fetch ordered results by the client family code
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_CLIENT_FAMILY_CODE = 14;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_CLIENT_FAMILY_CODE = 14,

  /**
   * Fetch ordered results by the unit price
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_UNIT_PRICE = 15;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_UNIT_PRICE = 15,

  /**
   * Fetch ordered results by the tax group ID
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_SORT_KEY_TAX_GROUP_ID = 16;
   */
  CREDIT_NOTE_ITEM_SORT_KEY_TAX_GROUP_ID = 16,
}
// Retrieve enum metadata with: proto3.getEnumType(CREDIT_NOTE_ITEM_SORT_KEY)
proto3.util.setEnumType(CREDIT_NOTE_ITEM_SORT_KEY, "Scailo.CREDIT_NOTE_ITEM_SORT_KEY", [
  { no: 0, name: "CREDIT_NOTE_ITEM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "CREDIT_NOTE_ITEM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "CREDIT_NOTE_ITEM_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "CREDIT_NOTE_ITEM_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "CREDIT_NOTE_ITEM_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "CREDIT_NOTE_ITEM_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "CREDIT_NOTE_ITEM_SORT_KEY_FAMILY_ID" },
  { no: 11, name: "CREDIT_NOTE_ITEM_SORT_KEY_INTERNAL_QUANTITY" },
  { no: 12, name: "CREDIT_NOTE_ITEM_SORT_KEY_CLIENT_UOM_ID" },
  { no: 13, name: "CREDIT_NOTE_ITEM_SORT_KEY_CLIENT_QUANTITY" },
  { no: 14, name: "CREDIT_NOTE_ITEM_SORT_KEY_CLIENT_FAMILY_CODE" },
  { no: 15, name: "CREDIT_NOTE_ITEM_SORT_KEY_UNIT_PRICE" },
  { no: 16, name: "CREDIT_NOTE_ITEM_SORT_KEY_TAX_GROUP_ID" },
]);

/**
 *
 * Describes the applicable statuses of credit note items
 *
 * @generated from enum Scailo.CREDIT_NOTE_ITEM_STATUS
 */
export enum CREDIT_NOTE_ITEM_STATUS {
  /**
   * Denotes that status be disregarded. This is used only within search APIs
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_STATUS_ANY_UNSPECIFIED = 0;
   */
  CREDIT_NOTE_ITEM_STATUS_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the credit note items must have been approved
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_STATUS_APPROVED = 1;
   */
  CREDIT_NOTE_ITEM_STATUS_APPROVED = 1,

  /**
   * Denotes that the credit note items must be waiting for approval
   *
   * @generated from enum value: CREDIT_NOTE_ITEM_STATUS_UNAPPROVED = 2;
   */
  CREDIT_NOTE_ITEM_STATUS_UNAPPROVED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CREDIT_NOTE_ITEM_STATUS)
proto3.util.setEnumType(CREDIT_NOTE_ITEM_STATUS, "Scailo.CREDIT_NOTE_ITEM_STATUS", [
  { no: 0, name: "CREDIT_NOTE_ITEM_STATUS_ANY_UNSPECIFIED" },
  { no: 1, name: "CREDIT_NOTE_ITEM_STATUS_APPROVED" },
  { no: 2, name: "CREDIT_NOTE_ITEM_STATUS_UNAPPROVED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.CREDIT_NOTE_SORT_KEY
 */
export enum CREDIT_NOTE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  CREDIT_NOTE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_CREATED_AT = 1;
   */
  CREDIT_NOTE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_MODIFIED_AT = 2;
   */
  CREDIT_NOTE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_APPROVED_ON = 3;
   */
  CREDIT_NOTE_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_APPROVED_BY = 4;
   */
  CREDIT_NOTE_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  CREDIT_NOTE_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_COMPLETED_ON = 6;
   */
  CREDIT_NOTE_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the reference ID
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_REFERENCE_ID = 10;
   */
  CREDIT_NOTE_SORT_KEY_REFERENCE_ID = 10,

  /**
   * Fetch ordered results by the final ref number
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_FINAL_REF_NUMBER = 11;
   */
  CREDIT_NOTE_SORT_KEY_FINAL_REF_NUMBER = 11,

  /**
   * Fetch ordered results by the total value
   *
   * @generated from enum value: CREDIT_NOTE_SORT_KEY_TOTAL_VALUE = 30;
   */
  CREDIT_NOTE_SORT_KEY_TOTAL_VALUE = 30,
}
// Retrieve enum metadata with: proto3.getEnumType(CREDIT_NOTE_SORT_KEY)
proto3.util.setEnumType(CREDIT_NOTE_SORT_KEY, "Scailo.CREDIT_NOTE_SORT_KEY", [
  { no: 0, name: "CREDIT_NOTE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "CREDIT_NOTE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "CREDIT_NOTE_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "CREDIT_NOTE_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "CREDIT_NOTE_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "CREDIT_NOTE_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "CREDIT_NOTE_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "CREDIT_NOTE_SORT_KEY_REFERENCE_ID" },
  { no: 11, name: "CREDIT_NOTE_SORT_KEY_FINAL_REF_NUMBER" },
  { no: 30, name: "CREDIT_NOTE_SORT_KEY_TOTAL_VALUE" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.CreditNotesServiceCreateRequest
 */
export class CreditNotesServiceCreateRequest extends Message<CreditNotesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the credit note
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The associated reference
   *
   * @generated from field: Scailo.CREDIT_NOTE_REF_FROM ref_from = 12;
   */
  refFrom = CREDIT_NOTE_REF_FROM.CREDIT_NOTE_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The associated ID of the currency
   *
   * @generated from field: uint64 currency_id = 14;
   */
  currencyId = protoInt64.zero;

  /**
   * The associated ID of the bank account
   *
   * @generated from field: uint64 bank_account_id = 15;
   */
  bankAccountId = protoInt64.zero;

  /**
   * Any miscellaneous cost
   *
   * @generated from field: uint64 miscellaneous_cost = 16;
   */
  miscellaneousCost = protoInt64.zero;

  /**
   * The optional discount amount
   *
   * @generated from field: uint64 overall_discount = 17;
   */
  overallDiscount = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 18;
   */
  roundOff = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<CreditNotesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_from", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_REF_FROM) },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "bank_account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "miscellaneous_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "overall_discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceCreateRequest {
    return new CreditNotesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceCreateRequest {
    return new CreditNotesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceCreateRequest {
    return new CreditNotesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceCreateRequest | PlainMessage<CreditNotesServiceCreateRequest> | undefined, b: CreditNotesServiceCreateRequest | PlainMessage<CreditNotesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.CreditNotesServiceUpdateRequest
 */
export class CreditNotesServiceUpdateRequest extends Message<CreditNotesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the credit note
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The associated ID of the currency
   *
   * @generated from field: uint64 currency_id = 14;
   */
  currencyId = protoInt64.zero;

  /**
   * The associated ID of the bank account
   *
   * @generated from field: uint64 bank_account_id = 15;
   */
  bankAccountId = protoInt64.zero;

  /**
   * Any miscellaneous cost
   *
   * @generated from field: uint64 miscellaneous_cost = 16;
   */
  miscellaneousCost = protoInt64.zero;

  /**
   * The optional discount amount
   *
   * @generated from field: uint64 overall_discount = 17;
   */
  overallDiscount = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 18;
   */
  roundOff = protoInt64.zero;

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<CreditNotesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "bank_account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "miscellaneous_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "overall_discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceUpdateRequest {
    return new CreditNotesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceUpdateRequest {
    return new CreditNotesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceUpdateRequest {
    return new CreditNotesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceUpdateRequest | PlainMessage<CreditNotesServiceUpdateRequest> | undefined, b: CreditNotesServiceUpdateRequest | PlainMessage<CreditNotesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to perform an autofill request
 *
 * @generated from message Scailo.CreditNotesServiceAutofillRequest
 */
export class CreditNotesServiceAutofillRequest extends Message<CreditNotesServiceAutofillRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the record that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  constructor(data?: PartialMessage<CreditNotesServiceAutofillRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceAutofillRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceAutofillRequest {
    return new CreditNotesServiceAutofillRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceAutofillRequest {
    return new CreditNotesServiceAutofillRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceAutofillRequest {
    return new CreditNotesServiceAutofillRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceAutofillRequest | PlainMessage<CreditNotesServiceAutofillRequest> | undefined, b: CreditNotesServiceAutofillRequest | PlainMessage<CreditNotesServiceAutofillRequest> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceAutofillRequest, a, b);
  }
}

/**
 *
 * Stores the UUID references of the record
 *
 * @generated from message Scailo.CreditNoteAncillaryParameters
 */
export class CreditNoteAncillaryParameters extends Message<CreditNoteAncillaryParameters> {
  /**
   * The UUID of the ref_id (the UUID of the associated ref_id)
   *
   * @generated from field: string ref_uuid = 213;
   */
  refUuid = "";

  /**
   * The UUID of the currency (the UUID of the associated currency)
   *
   * @generated from field: string currency_uuid = 214;
   */
  currencyUuid = "";

  constructor(data?: PartialMessage<CreditNoteAncillaryParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNoteAncillaryParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 213, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 214, name: "currency_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNoteAncillaryParameters {
    return new CreditNoteAncillaryParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNoteAncillaryParameters {
    return new CreditNoteAncillaryParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNoteAncillaryParameters {
    return new CreditNoteAncillaryParameters().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNoteAncillaryParameters | PlainMessage<CreditNoteAncillaryParameters> | undefined, b: CreditNoteAncillaryParameters | PlainMessage<CreditNoteAncillaryParameters> | undefined): boolean {
    return proto3.util.equals(CreditNoteAncillaryParameters, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.CreditNote
 */
export class CreditNote extends Message<CreditNote> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this credit note
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this credit note
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this credit note
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this credit note was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The reference ID of the credit note
   *
   * @generated from field: string reference_id = 10;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 11;
   */
  finalRefNumber = "";

  /**
   * The associated reference
   *
   * @generated from field: Scailo.CREDIT_NOTE_REF_FROM ref_from = 12;
   */
  refFrom = CREDIT_NOTE_REF_FROM.CREDIT_NOTE_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 13;
   */
  refId = protoInt64.zero;

  /**
   * The associated ID of the currency
   *
   * @generated from field: uint64 currency_id = 14;
   */
  currencyId = protoInt64.zero;

  /**
   * The associated ID of the bank account
   *
   * @generated from field: uint64 bank_account_id = 15;
   */
  bankAccountId = protoInt64.zero;

  /**
   * Any miscellaneous cost
   *
   * @generated from field: uint64 miscellaneous_cost = 16;
   */
  miscellaneousCost = protoInt64.zero;

  /**
   * The optional discount amount
   *
   * @generated from field: uint64 overall_discount = 17;
   */
  overallDiscount = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 18;
   */
  roundOff = protoInt64.zero;

  /**
   * Stores the total value of the credit note (as a double, which requires no adjustments)
   *
   * @generated from field: double total_value = 20;
   */
  totalValue = 0;

  /**
   * The list of associated credit note items
   *
   * @generated from field: repeated Scailo.CreditNoteItem list = 30;
   */
  list: CreditNoteItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 40;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<CreditNote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "ref_from", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_REF_FROM) },
    { no: 13, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "bank_account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "miscellaneous_cost", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "overall_discount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "total_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 30, name: "list", kind: "message", T: CreditNoteItem, repeated: true },
    { no: 40, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNote {
    return new CreditNote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNote {
    return new CreditNote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNote {
    return new CreditNote().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNote | PlainMessage<CreditNote> | undefined, b: CreditNote | PlainMessage<CreditNote> | undefined): boolean {
    return proto3.util.equals(CreditNote, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an item to a credit note
 *
 * @generated from message Scailo.CreditNotesServiceItemCreateRequest
 */
export class CreditNotesServiceItemCreateRequest extends Message<CreditNotesServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the credit note ID
   *
   * @generated from field: uint64 credit_note_id = 10;
   */
  creditNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * The quantity (in cents) being supplied in internal unit of material
   *
   * @generated from field: uint64 internal_quantity = 12;
   */
  internalQuantity = protoInt64.zero;

  /**
   * Stores the ID of the client's unit of material
   *
   * @generated from field: uint64 client_uom_id = 13;
   */
  clientUomId = protoInt64.zero;

  /**
   * Stores the quantity (in cents) being admitted in client's unit of material
   *
   * @generated from field: uint64 client_quantity = 14;
   */
  clientQuantity = protoInt64.zero;

  /**
   * The family code as represented by the client
   *
   * @generated from field: string client_family_code = 15;
   */
  clientFamilyCode = "";

  /**
   * The unit price of the item (as supplied to the client)
   *
   * @generated from field: uint64 unit_price = 16;
   */
  unitPrice = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 17;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 18;
   */
  roundOff = protoInt64.zero;

  /**
   * Optional specifications
   *
   * @generated from field: string specifications = 19;
   */
  specifications = "";

  constructor(data?: PartialMessage<CreditNotesServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "credit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "internal_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "client_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "client_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "client_family_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "unit_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceItemCreateRequest {
    return new CreditNotesServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceItemCreateRequest {
    return new CreditNotesServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceItemCreateRequest {
    return new CreditNotesServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceItemCreateRequest | PlainMessage<CreditNotesServiceItemCreateRequest> | undefined, b: CreditNotesServiceItemCreateRequest | PlainMessage<CreditNotesServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an item in a credit note
 *
 * @generated from message Scailo.CreditNotesServiceItemUpdateRequest
 */
export class CreditNotesServiceItemUpdateRequest extends Message<CreditNotesServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The quantity (in cents) being supplied in internal unit of material
   *
   * @generated from field: uint64 internal_quantity = 12;
   */
  internalQuantity = protoInt64.zero;

  /**
   * Stores the ID of the client's unit of material
   *
   * @generated from field: uint64 client_uom_id = 13;
   */
  clientUomId = protoInt64.zero;

  /**
   * Stores the quantity (in cents) being admitted in client's unit of material
   *
   * @generated from field: uint64 client_quantity = 14;
   */
  clientQuantity = protoInt64.zero;

  /**
   * The family code as represented by the client
   *
   * @generated from field: string client_family_code = 15;
   */
  clientFamilyCode = "";

  /**
   * The unit price of the item (as supplied to the client)
   *
   * @generated from field: uint64 unit_price = 16;
   */
  unitPrice = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 17;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 18;
   */
  roundOff = protoInt64.zero;

  /**
   * Optional specifications
   *
   * @generated from field: string specifications = 19;
   */
  specifications = "";

  constructor(data?: PartialMessage<CreditNotesServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "internal_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "client_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "client_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "client_family_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "unit_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceItemUpdateRequest {
    return new CreditNotesServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceItemUpdateRequest {
    return new CreditNotesServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceItemUpdateRequest {
    return new CreditNotesServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceItemUpdateRequest | PlainMessage<CreditNotesServiceItemUpdateRequest> | undefined, b: CreditNotesServiceItemUpdateRequest | PlainMessage<CreditNotesServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an item associated to a credit note
 *
 * @generated from message Scailo.CreditNoteItem
 */
export class CreditNoteItem extends Message<CreditNoteItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this credit note
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the credit note ID
   *
   * @generated from field: uint64 credit_note_id = 10;
   */
  creditNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  /**
   * The quantity (in cents) being supplied in internal unit of material
   *
   * @generated from field: uint64 internal_quantity = 12;
   */
  internalQuantity = protoInt64.zero;

  /**
   * Stores the ID of the client's unit of material
   *
   * @generated from field: uint64 client_uom_id = 13;
   */
  clientUomId = protoInt64.zero;

  /**
   * Stores the quantity (in cents) being admitted in client's unit of material
   *
   * @generated from field: uint64 client_quantity = 14;
   */
  clientQuantity = protoInt64.zero;

  /**
   * The family code as represented by the client
   *
   * @generated from field: string client_family_code = 15;
   */
  clientFamilyCode = "";

  /**
   * The unit price of the item (as supplied to the client)
   *
   * @generated from field: uint64 unit_price = 16;
   */
  unitPrice = protoInt64.zero;

  /**
   * The ID of the associated tax group
   *
   * @generated from field: uint64 tax_group_id = 17;
   */
  taxGroupId = protoInt64.zero;

  /**
   * The applicable round off amount (optional, and can be positive or negative)
   *
   * @generated from field: int64 round_off = 18;
   */
  roundOff = protoInt64.zero;

  /**
   * Optional specifications
   *
   * @generated from field: string specifications = 19;
   */
  specifications = "";

  constructor(data?: PartialMessage<CreditNoteItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNoteItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "credit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "internal_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "client_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "client_quantity", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "client_family_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "unit_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "round_off", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "specifications", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNoteItem {
    return new CreditNoteItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNoteItem {
    return new CreditNoteItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNoteItem {
    return new CreditNoteItem().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNoteItem | PlainMessage<CreditNoteItem> | undefined, b: CreditNoteItem | PlainMessage<CreditNoteItem> | undefined): boolean {
    return proto3.util.equals(CreditNoteItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of credit notes
 *
 * @generated from message Scailo.CreditNotesList
 */
export class CreditNotesList extends Message<CreditNotesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.CreditNote list = 1;
   */
  list: CreditNote[] = [];

  constructor(data?: PartialMessage<CreditNotesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: CreditNote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesList {
    return new CreditNotesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesList {
    return new CreditNotesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesList {
    return new CreditNotesList().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesList | PlainMessage<CreditNotesList> | undefined, b: CreditNotesList | PlainMessage<CreditNotesList> | undefined): boolean {
    return proto3.util.equals(CreditNotesList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of credit note items
 *
 * @generated from message Scailo.CreditNoteItemsList
 */
export class CreditNoteItemsList extends Message<CreditNoteItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.CreditNoteItem list = 1;
   */
  list: CreditNoteItem[] = [];

  constructor(data?: PartialMessage<CreditNoteItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNoteItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: CreditNoteItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNoteItemsList {
    return new CreditNoteItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNoteItemsList {
    return new CreditNoteItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNoteItemsList {
    return new CreditNoteItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNoteItemsList | PlainMessage<CreditNoteItemsList> | undefined, b: CreditNoteItemsList | PlainMessage<CreditNoteItemsList> | undefined): boolean {
    return proto3.util.equals(CreditNoteItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.CreditNoteItemHistoryRequest
 */
export class CreditNoteItemHistoryRequest extends Message<CreditNoteItemHistoryRequest> {
  /**
   * Stores the credit note ID
   *
   * @generated from field: uint64 credit_note_id = 10;
   */
  creditNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<CreditNoteItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNoteItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "credit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNoteItemHistoryRequest {
    return new CreditNoteItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNoteItemHistoryRequest {
    return new CreditNoteItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNoteItemHistoryRequest {
    return new CreditNoteItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNoteItemHistoryRequest | PlainMessage<CreditNoteItemHistoryRequest> | undefined, b: CreditNoteItemHistoryRequest | PlainMessage<CreditNoteItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(CreditNoteItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the info of a prospective credit note item
 *
 * @generated from message Scailo.CreditNoteItemProspectiveInfoRequest
 */
export class CreditNoteItemProspectiveInfoRequest extends Message<CreditNoteItemProspectiveInfoRequest> {
  /**
   * Stores the credit note ID
   *
   * @generated from field: uint64 credit_note_id = 10;
   */
  creditNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 11;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<CreditNoteItemProspectiveInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNoteItemProspectiveInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "credit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNoteItemProspectiveInfoRequest {
    return new CreditNoteItemProspectiveInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNoteItemProspectiveInfoRequest {
    return new CreditNoteItemProspectiveInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNoteItemProspectiveInfoRequest {
    return new CreditNoteItemProspectiveInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNoteItemProspectiveInfoRequest | PlainMessage<CreditNoteItemProspectiveInfoRequest> | undefined, b: CreditNoteItemProspectiveInfoRequest | PlainMessage<CreditNoteItemProspectiveInfoRequest> | undefined): boolean {
    return proto3.util.equals(CreditNoteItemProspectiveInfoRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve the quantity that has already been added for the specific ref_from, ref_id and family_id
 *
 * @generated from message Scailo.CreditNotesServiceAlreadyAddedQuantityForSourceRequest
 */
export class CreditNotesServiceAlreadyAddedQuantityForSourceRequest extends Message<CreditNotesServiceAlreadyAddedQuantityForSourceRequest> {
  /**
   * The associated reference
   *
   * @generated from field: Scailo.CREDIT_NOTE_REF_FROM ref_from = 1;
   */
  refFrom = CREDIT_NOTE_REF_FROM.CREDIT_NOTE_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 2;
   */
  refId = protoInt64.zero;

  /**
   * The associated family ID
   *
   * @generated from field: uint64 family_id = 3;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<CreditNotesServiceAlreadyAddedQuantityForSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceAlreadyAddedQuantityForSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_from", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_REF_FROM) },
    { no: 2, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceAlreadyAddedQuantityForSourceRequest {
    return new CreditNotesServiceAlreadyAddedQuantityForSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceAlreadyAddedQuantityForSourceRequest {
    return new CreditNotesServiceAlreadyAddedQuantityForSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceAlreadyAddedQuantityForSourceRequest {
    return new CreditNotesServiceAlreadyAddedQuantityForSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceAlreadyAddedQuantityForSourceRequest | PlainMessage<CreditNotesServiceAlreadyAddedQuantityForSourceRequest> | undefined, b: CreditNotesServiceAlreadyAddedQuantityForSourceRequest | PlainMessage<CreditNotesServiceAlreadyAddedQuantityForSourceRequest> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceAlreadyAddedQuantityForSourceRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve approved or unapproved items.
 *
 * @generated from message Scailo.CreditNoteItemsSearchRequest
 */
export class CreditNoteItemsSearchRequest extends Message<CreditNoteItemsSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.CREDIT_NOTE_ITEM_SORT_KEY sort_key = 5;
   */
  sortKey = CREDIT_NOTE_ITEM_SORT_KEY.CREDIT_NOTE_ITEM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The status of the items
   *
   * @generated from field: Scailo.CREDIT_NOTE_ITEM_STATUS status = 7;
   */
  status = CREDIT_NOTE_ITEM_STATUS.CREDIT_NOTE_ITEM_STATUS_ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 10;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 11;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 12;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 13;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The ID of the credit note
   *
   * @generated from field: uint64 credit_note_id = 20;
   */
  creditNoteId = protoInt64.zero;

  /**
   * Stores the family ID
   *
   * @generated from field: uint64 family_id = 21;
   */
  familyId = protoInt64.zero;

  /**
   * The ID of the client's unit of material
   *
   * @generated from field: uint64 client_uom_id = 23;
   */
  clientUomId = protoInt64.zero;

  /**
   * Stores the family code as given by the client
   *
   * @generated from field: string client_family_code = 25;
   */
  clientFamilyCode = "";

  /**
   * The ID of the tax group
   *
   * @generated from field: uint64 tax_group_id = 27;
   */
  taxGroupId = protoInt64.zero;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<CreditNoteItemsSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNoteItemsSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_ITEM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_ITEM_STATUS) },
    { no: 10, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "credit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "client_uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "client_family_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "tax_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNoteItemsSearchRequest {
    return new CreditNoteItemsSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNoteItemsSearchRequest {
    return new CreditNoteItemsSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNoteItemsSearchRequest {
    return new CreditNoteItemsSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNoteItemsSearchRequest | PlainMessage<CreditNoteItemsSearchRequest> | undefined, b: CreditNoteItemsSearchRequest | PlainMessage<CreditNoteItemsSearchRequest> | undefined): boolean {
    return proto3.util.equals(CreditNoteItemsSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination items request
 *
 * @generated from message Scailo.CreditNotesServicePaginatedItemsResponse
 */
export class CreditNotesServicePaginatedItemsResponse extends Message<CreditNotesServicePaginatedItemsResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.CreditNoteItem payload = 4;
   */
  payload: CreditNoteItem[] = [];

  constructor(data?: PartialMessage<CreditNotesServicePaginatedItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServicePaginatedItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: CreditNoteItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServicePaginatedItemsResponse {
    return new CreditNotesServicePaginatedItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServicePaginatedItemsResponse {
    return new CreditNotesServicePaginatedItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServicePaginatedItemsResponse {
    return new CreditNotesServicePaginatedItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServicePaginatedItemsResponse | PlainMessage<CreditNotesServicePaginatedItemsResponse> | undefined, b: CreditNotesServicePaginatedItemsResponse | PlainMessage<CreditNotesServicePaginatedItemsResponse> | undefined): boolean {
    return proto3.util.equals(CreditNotesServicePaginatedItemsResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.CreditNotesServicePaginationReq
 */
export class CreditNotesServicePaginationReq extends Message<CreditNotesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.CREDIT_NOTE_SORT_KEY sort_key = 5;
   */
  sortKey = CREDIT_NOTE_SORT_KEY.CREDIT_NOTE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this credit note
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<CreditNotesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServicePaginationReq {
    return new CreditNotesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServicePaginationReq {
    return new CreditNotesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServicePaginationReq {
    return new CreditNotesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServicePaginationReq | PlainMessage<CreditNotesServicePaginationReq> | undefined, b: CreditNotesServicePaginationReq | PlainMessage<CreditNotesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(CreditNotesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.CreditNotesServicePaginationResponse
 */
export class CreditNotesServicePaginationResponse extends Message<CreditNotesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.CreditNote payload = 4;
   */
  payload: CreditNote[] = [];

  constructor(data?: PartialMessage<CreditNotesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: CreditNote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServicePaginationResponse {
    return new CreditNotesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServicePaginationResponse {
    return new CreditNotesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServicePaginationResponse {
    return new CreditNotesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServicePaginationResponse | PlainMessage<CreditNotesServicePaginationResponse> | undefined, b: CreditNotesServicePaginationResponse | PlainMessage<CreditNotesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(CreditNotesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.CreditNotesServiceFilterReq
 */
export class CreditNotesServiceFilterReq extends Message<CreditNotesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.CREDIT_NOTE_SORT_KEY sort_key = 5;
   */
  sortKey = CREDIT_NOTE_SORT_KEY.CREDIT_NOTE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this credit note
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the credit note
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The associated reference
   *
   * @generated from field: Scailo.CREDIT_NOTE_REF_FROM ref_from = 22;
   */
  refFrom = CREDIT_NOTE_REF_FROM.CREDIT_NOTE_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 23;
   */
  refId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: uint64 currency_id = 24;
   */
  currencyId = protoInt64.zero;

  /**
   * The associated ID of the bank account
   *
   * @generated from field: uint64 bank_account_id = 25;
   */
  bankAccountId = protoInt64.zero;

  /**
   * The ID of the family
   *
   * @generated from field: uint64 family_id = 40;
   */
  familyId = protoInt64.zero;

  /**
   * Sales Order related filters
   * The associated consignee client ID of the linked sales order
   *
   * @generated from field: uint64 consignee_client_id = 50;
   */
  consigneeClientId = protoInt64.zero;

  /**
   * The associated buyer client ID of the linked sales order
   *
   * @generated from field: uint64 buyer_client_id = 51;
   */
  buyerClientId = protoInt64.zero;

  /**
   * The ID of the associated project of the linked sales order
   *
   * @generated from field: uint64 project_id = 52;
   */
  projectId = protoInt64.zero;

  /**
   * Stores the minimum value of the credit note (ignored if 0)
   *
   * @generated from field: uint64 total_value_min = 70;
   */
  totalValueMin = protoInt64.zero;

  /**
   * Stores the maximum value of the credit note (ignored if 0)
   *
   * @generated from field: uint64 total_value_max = 71;
   */
  totalValueMax = protoInt64.zero;

  constructor(data?: PartialMessage<CreditNotesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "ref_from", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_REF_FROM) },
    { no: 23, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 24, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "bank_account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 50, name: "consignee_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 70, name: "total_value_min", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 71, name: "total_value_max", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceFilterReq {
    return new CreditNotesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceFilterReq {
    return new CreditNotesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceFilterReq {
    return new CreditNotesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceFilterReq | PlainMessage<CreditNotesServiceFilterReq> | undefined, b: CreditNotesServiceFilterReq | PlainMessage<CreditNotesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.CreditNotesServiceCountReq
 */
export class CreditNotesServiceCountReq extends Message<CreditNotesServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this credit note
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The reference ID of the credit note
   *
   * @generated from field: string reference_id = 20;
   */
  referenceId = "";

  /**
   * The unique reference number that has been automatically generated
   *
   * @generated from field: string final_ref_number = 21;
   */
  finalRefNumber = "";

  /**
   * The associated reference
   *
   * @generated from field: Scailo.CREDIT_NOTE_REF_FROM ref_from = 22;
   */
  refFrom = CREDIT_NOTE_REF_FROM.CREDIT_NOTE_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 23;
   */
  refId = protoInt64.zero;

  /**
   * The ID of the associated currency
   *
   * @generated from field: uint64 currency_id = 24;
   */
  currencyId = protoInt64.zero;

  /**
   * The associated ID of the bank account
   *
   * @generated from field: uint64 bank_account_id = 25;
   */
  bankAccountId = protoInt64.zero;

  /**
   * The ID of the family
   *
   * @generated from field: uint64 family_id = 40;
   */
  familyId = protoInt64.zero;

  /**
   * Sales Order related filters
   * The associated consignee client ID of the linked sales order
   *
   * @generated from field: uint64 consignee_client_id = 50;
   */
  consigneeClientId = protoInt64.zero;

  /**
   * The associated buyer client ID of the linked sales order
   *
   * @generated from field: uint64 buyer_client_id = 51;
   */
  buyerClientId = protoInt64.zero;

  /**
   * The ID of the associated project of the linked sales order
   *
   * @generated from field: uint64 project_id = 52;
   */
  projectId = protoInt64.zero;

  /**
   * Stores the minimum value of the credit note (ignored if 0)
   *
   * @generated from field: uint64 total_value_min = 70;
   */
  totalValueMin = protoInt64.zero;

  /**
   * Stores the maximum value of the credit note (ignored if 0)
   *
   * @generated from field: uint64 total_value_max = 71;
   */
  totalValueMax = protoInt64.zero;

  constructor(data?: PartialMessage<CreditNotesServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "final_ref_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "ref_from", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_REF_FROM) },
    { no: 23, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 24, name: "currency_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "bank_account_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 50, name: "consignee_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 70, name: "total_value_min", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 71, name: "total_value_max", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceCountReq {
    return new CreditNotesServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceCountReq {
    return new CreditNotesServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceCountReq {
    return new CreditNotesServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceCountReq | PlainMessage<CreditNotesServiceCountReq> | undefined, b: CreditNotesServiceCountReq | PlainMessage<CreditNotesServiceCountReq> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.CreditNotesServiceSearchAllReq
 */
export class CreditNotesServiceSearchAllReq extends Message<CreditNotesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.CREDIT_NOTE_SORT_KEY sort_key = 5;
   */
  sortKey = CREDIT_NOTE_SORT_KEY.CREDIT_NOTE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The associated reference
   *
   * @generated from field: Scailo.CREDIT_NOTE_REF_FROM ref_from = 22;
   */
  refFrom = CREDIT_NOTE_REF_FROM.CREDIT_NOTE_REF_FROM_ANY_UNSPECIFIED;

  /**
   * The associated ID of the reference
   *
   * @generated from field: uint64 ref_id = 23;
   */
  refId = protoInt64.zero;

  /**
   * Sales Order related filters
   * The associated consignee client ID of the linked sales order
   *
   * @generated from field: uint64 consignee_client_id = 50;
   */
  consigneeClientId = protoInt64.zero;

  /**
   * The associated buyer client ID of the linked sales order
   *
   * @generated from field: uint64 buyer_client_id = 51;
   */
  buyerClientId = protoInt64.zero;

  constructor(data?: PartialMessage<CreditNotesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "ref_from", kind: "enum", T: proto3.getEnumType(CREDIT_NOTE_REF_FROM) },
    { no: 23, name: "ref_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 50, name: "consignee_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "buyer_client_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceSearchAllReq {
    return new CreditNotesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceSearchAllReq {
    return new CreditNotesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceSearchAllReq {
    return new CreditNotesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceSearchAllReq | PlainMessage<CreditNotesServiceSearchAllReq> | undefined, b: CreditNotesServiceSearchAllReq | PlainMessage<CreditNotesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a credit note reference
 *
 * @generated from message Scailo.CreditNotesServiceReferenceCreateRequest
 */
export class CreditNotesServiceReferenceCreateRequest extends Message<CreditNotesServiceReferenceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the credit note ID
   *
   * @generated from field: uint64 credit_note_id = 10;
   */
  creditNoteId = protoInt64.zero;

  /**
   * Stores the sales return ID
   *
   * @generated from field: uint64 sales_return_id = 11;
   */
  salesReturnId = protoInt64.zero;

  constructor(data?: PartialMessage<CreditNotesServiceReferenceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNotesServiceReferenceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "credit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "sales_return_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNotesServiceReferenceCreateRequest {
    return new CreditNotesServiceReferenceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNotesServiceReferenceCreateRequest {
    return new CreditNotesServiceReferenceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNotesServiceReferenceCreateRequest {
    return new CreditNotesServiceReferenceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNotesServiceReferenceCreateRequest | PlainMessage<CreditNotesServiceReferenceCreateRequest> | undefined, b: CreditNotesServiceReferenceCreateRequest | PlainMessage<CreditNotesServiceReferenceCreateRequest> | undefined): boolean {
    return proto3.util.equals(CreditNotesServiceReferenceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a credit note reference
 *
 * @generated from message Scailo.CreditNoteReference
 */
export class CreditNoteReference extends Message<CreditNoteReference> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this credit note
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the credit note ID
   *
   * @generated from field: uint64 credit_note_id = 10;
   */
  creditNoteId = protoInt64.zero;

  /**
   * Stores the sales return ID
   *
   * @generated from field: uint64 sales_return_id = 11;
   */
  salesReturnId = protoInt64.zero;

  constructor(data?: PartialMessage<CreditNoteReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNoteReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "credit_note_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "sales_return_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNoteReference {
    return new CreditNoteReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNoteReference {
    return new CreditNoteReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNoteReference {
    return new CreditNoteReference().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNoteReference | PlainMessage<CreditNoteReference> | undefined, b: CreditNoteReference | PlainMessage<CreditNoteReference> | undefined): boolean {
    return proto3.util.equals(CreditNoteReference, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of credit note references
 *
 * @generated from message Scailo.CreditNoteReferencesList
 */
export class CreditNoteReferencesList extends Message<CreditNoteReferencesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.CreditNoteReference list = 1;
   */
  list: CreditNoteReference[] = [];

  constructor(data?: PartialMessage<CreditNoteReferencesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.CreditNoteReferencesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: CreditNoteReference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreditNoteReferencesList {
    return new CreditNoteReferencesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreditNoteReferencesList {
    return new CreditNoteReferencesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreditNoteReferencesList {
    return new CreditNoteReferencesList().fromJsonString(jsonString, options);
  }

  static equals(a: CreditNoteReferencesList | PlainMessage<CreditNoteReferencesList> | undefined, b: CreditNoteReferencesList | PlainMessage<CreditNoteReferencesList> | undefined): boolean {
    return proto3.util.equals(CreditNoteReferencesList, a, b);
  }
}

