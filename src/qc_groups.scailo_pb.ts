// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file qc_groups.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { FormFieldDatum, FormFieldDatumCreateRequest } from "./forms_fields_data.scailo_pb.js";
import { ApprovalMetadata, BOOL_FILTER, EmployeeMetadata, LogbookLogConciseSLC, SORT_ORDER, STANDARD_LIFECYCLE_STATUS } from "./base.scailo_pb.js";

/**
 *
 * Describes the available input types for a qc group item (with possible vbalues being number-absolute, number-percentage, text-input, text-dropdown)
 *
 * @generated from enum Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE
 */
export enum QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE {
  /**
   * Denotes that value type is disregarded. This is used only within search APIs
   *
   * @generated from enum value: QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_ANY_UNSPECIFIED = 0;
   */
  QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_ANY_UNSPECIFIED = 0,

  /**
   * Acceptable value type is an absolute number (with min and max defined in number_min_value and number_max_value)
   *
   * @generated from enum value: QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_NUMBER_ABSOLUTE = 1;
   */
  QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_NUMBER_ABSOLUTE = 1,

  /**
   * Acceptable value type is a percentage
   *
   * @generated from enum value: QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_NUMBER_PERCENTAGE = 2;
   */
  QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_NUMBER_PERCENTAGE = 2,

  /**
   * Acceptable value type is a textual input
   *
   * @generated from enum value: QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_TEXT_INPUT = 3;
   */
  QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_TEXT_INPUT = 3,

  /**
   * Acceptable value type is a dropdown (from the values as defined in text_values)
   *
   * @generated from enum value: QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_TEXT_DROPDOWN = 4;
   */
  QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_TEXT_DROPDOWN = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE)
proto3.util.setEnumType(QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE, "Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE", [
  { no: 0, name: "QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_ANY_UNSPECIFIED" },
  { no: 1, name: "QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_NUMBER_ABSOLUTE" },
  { no: 2, name: "QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_NUMBER_PERCENTAGE" },
  { no: 3, name: "QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_TEXT_INPUT" },
  { no: 4, name: "QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_TEXT_DROPDOWN" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.QC_GROUP_ITEM_SORT_KEY
 */
export enum QC_GROUP_ITEM_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: QC_GROUP_ITEM_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  QC_GROUP_ITEM_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: QC_GROUP_ITEM_SORT_KEY_CREATED_AT = 1;
   */
  QC_GROUP_ITEM_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: QC_GROUP_ITEM_SORT_KEY_MODIFIED_AT = 2;
   */
  QC_GROUP_ITEM_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: QC_GROUP_ITEM_SORT_KEY_APPROVED_ON = 3;
   */
  QC_GROUP_ITEM_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: QC_GROUP_ITEM_SORT_KEY_APPROVED_BY = 4;
   */
  QC_GROUP_ITEM_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: QC_GROUP_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  QC_GROUP_ITEM_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the qc group ID
   *
   * @generated from enum value: QC_GROUP_ITEM_SORT_KEY_QC_GROUP_ID = 10;
   */
  QC_GROUP_ITEM_SORT_KEY_QC_GROUP_ID = 10,

  /**
   * Fetch ordered results by the qc param ID
   *
   * @generated from enum value: QC_GROUP_ITEM_SORT_KEY_QC_PARAM_ID = 11;
   */
  QC_GROUP_ITEM_SORT_KEY_QC_PARAM_ID = 11,

  /**
   * Fetch ordered results by the unit of material ID
   *
   * @generated from enum value: QC_GROUP_ITEM_SORT_KEY_UOM_ID = 12;
   */
  QC_GROUP_ITEM_SORT_KEY_UOM_ID = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(QC_GROUP_ITEM_SORT_KEY)
proto3.util.setEnumType(QC_GROUP_ITEM_SORT_KEY, "Scailo.QC_GROUP_ITEM_SORT_KEY", [
  { no: 0, name: "QC_GROUP_ITEM_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "QC_GROUP_ITEM_SORT_KEY_CREATED_AT" },
  { no: 2, name: "QC_GROUP_ITEM_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "QC_GROUP_ITEM_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "QC_GROUP_ITEM_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "QC_GROUP_ITEM_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 10, name: "QC_GROUP_ITEM_SORT_KEY_QC_GROUP_ID" },
  { no: 11, name: "QC_GROUP_ITEM_SORT_KEY_QC_PARAM_ID" },
  { no: 12, name: "QC_GROUP_ITEM_SORT_KEY_UOM_ID" },
]);

/**
 *
 * Describes the applicable statuses of qc group items
 *
 * @generated from enum Scailo.QC_GROUP_ITEM_STATUS
 */
export enum QC_GROUP_ITEM_STATUS {
  /**
   * Denotes that status be disregarded. This is used only within search APIs
   *
   * @generated from enum value: QC_GROUP_ITEM_STATUS_ANY_UNSPECIFIED = 0;
   */
  QC_GROUP_ITEM_STATUS_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the qc group items must have been approved
   *
   * @generated from enum value: QC_GROUP_ITEM_STATUS_APPROVED = 1;
   */
  QC_GROUP_ITEM_STATUS_APPROVED = 1,

  /**
   * Denotes that the qc group items must be waiting for approval
   *
   * @generated from enum value: QC_GROUP_ITEM_STATUS_UNAPPROVED = 2;
   */
  QC_GROUP_ITEM_STATUS_UNAPPROVED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(QC_GROUP_ITEM_STATUS)
proto3.util.setEnumType(QC_GROUP_ITEM_STATUS, "Scailo.QC_GROUP_ITEM_STATUS", [
  { no: 0, name: "QC_GROUP_ITEM_STATUS_ANY_UNSPECIFIED" },
  { no: 1, name: "QC_GROUP_ITEM_STATUS_APPROVED" },
  { no: 2, name: "QC_GROUP_ITEM_STATUS_UNAPPROVED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.QC_GROUP_SORT_KEY
 */
export enum QC_GROUP_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: QC_GROUP_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  QC_GROUP_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: QC_GROUP_SORT_KEY_CREATED_AT = 1;
   */
  QC_GROUP_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: QC_GROUP_SORT_KEY_MODIFIED_AT = 2;
   */
  QC_GROUP_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approved on timestamp
   *
   * @generated from enum value: QC_GROUP_SORT_KEY_APPROVED_ON = 3;
   */
  QC_GROUP_SORT_KEY_APPROVED_ON = 3,

  /**
   * Fetch ordered results by the approved by field
   *
   * @generated from enum value: QC_GROUP_SORT_KEY_APPROVED_BY = 4;
   */
  QC_GROUP_SORT_KEY_APPROVED_BY = 4,

  /**
   * Fetch ordered results by the approver's role ID
   *
   * @generated from enum value: QC_GROUP_SORT_KEY_APPROVER_ROLE_ID = 5;
   */
  QC_GROUP_SORT_KEY_APPROVER_ROLE_ID = 5,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: QC_GROUP_SORT_KEY_COMPLETED_ON = 6;
   */
  QC_GROUP_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the name
   *
   * @generated from enum value: QC_GROUP_SORT_KEY_NAME = 10;
   */
  QC_GROUP_SORT_KEY_NAME = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(QC_GROUP_SORT_KEY)
proto3.util.setEnumType(QC_GROUP_SORT_KEY, "Scailo.QC_GROUP_SORT_KEY", [
  { no: 0, name: "QC_GROUP_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "QC_GROUP_SORT_KEY_CREATED_AT" },
  { no: 2, name: "QC_GROUP_SORT_KEY_MODIFIED_AT" },
  { no: 3, name: "QC_GROUP_SORT_KEY_APPROVED_ON" },
  { no: 4, name: "QC_GROUP_SORT_KEY_APPROVED_BY" },
  { no: 5, name: "QC_GROUP_SORT_KEY_APPROVER_ROLE_ID" },
  { no: 6, name: "QC_GROUP_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "QC_GROUP_SORT_KEY_NAME" },
]);

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.QCGroupsServiceCreateRequest
 */
export class QCGroupsServiceCreateRequest extends Message<QCGroupsServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The name of the qc group
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The qc group code
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The description of the qc group
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<QCGroupsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServiceCreateRequest {
    return new QCGroupsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServiceCreateRequest {
    return new QCGroupsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServiceCreateRequest {
    return new QCGroupsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServiceCreateRequest | PlainMessage<QCGroupsServiceCreateRequest> | undefined, b: QCGroupsServiceCreateRequest | PlainMessage<QCGroupsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(QCGroupsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.QCGroupsServiceUpdateRequest
 */
export class QCGroupsServiceUpdateRequest extends Message<QCGroupsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The name of the qc group
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The qc group code
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The description of the qc group
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatumCreateRequest form_data = 30;
   */
  formData: FormFieldDatumCreateRequest[] = [];

  constructor(data?: PartialMessage<QCGroupsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatumCreateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServiceUpdateRequest {
    return new QCGroupsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServiceUpdateRequest {
    return new QCGroupsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServiceUpdateRequest {
    return new QCGroupsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServiceUpdateRequest | PlainMessage<QCGroupsServiceUpdateRequest> | undefined, b: QCGroupsServiceUpdateRequest | PlainMessage<QCGroupsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(QCGroupsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.QCGroup
 */
export class QCGroup extends Message<QCGroup> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this qc group
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * The status of this qc group
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 4;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this qc group
   *
   * @generated from field: repeated Scailo.LogbookLogConciseSLC logs = 5;
   */
  logs: LogbookLogConciseSLC[] = [];

  /**
   * The timestamp of when this qc group was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 9;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The name of the qc group
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The qc group code
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The description of the qc group
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The list of associated qc group params
   *
   * @generated from field: repeated Scailo.QCGroupItem list = 20;
   */
  list: QCGroupItem[] = [];

  /**
   * The list of dynamic forms
   *
   * @generated from field: repeated Scailo.FormFieldDatum form_data = 30;
   */
  formData: FormFieldDatum[] = [];

  constructor(data?: PartialMessage<QCGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogConciseSLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "list", kind: "message", T: QCGroupItem, repeated: true },
    { no: 30, name: "form_data", kind: "message", T: FormFieldDatum, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroup {
    return new QCGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroup {
    return new QCGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroup {
    return new QCGroup().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroup | PlainMessage<QCGroup> | undefined, b: QCGroup | PlainMessage<QCGroup> | undefined): boolean {
    return proto3.util.equals(QCGroup, a, b);
  }
}

/**
 *
 * Describes the parameters required to add a param to a qc group
 *
 * @generated from message Scailo.QCGroupsServiceItemCreateRequest
 */
export class QCGroupsServiceItemCreateRequest extends Message<QCGroupsServiceItemCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the ID of the qc group
   *
   * @generated from field: uint64 qc_group_id = 10;
   */
  qcGroupId = protoInt64.zero;

  /**
   * The ID of the qc param that is a part of the qc group
   *
   * @generated from field: uint64 qc_param_id = 11;
   */
  qcParamId = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: uint64 uom_id = 12;
   */
  uomId = protoInt64.zero;

  /**
   * Denotes if this parameter is internal or not (if set to true, then this value will be hidden. If set to false, then this value will be printed)
   *
   * @generated from field: bool is_internal = 19;
   */
  isInternal = false;

  /**
   * The acceptable value type of the item
   *
   * @generated from field: Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE acceptable_value_type = 20;
   */
  acceptableValueType = QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * The acceptable value (in cents) in case the acceptable value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_acceptable_value = 21;
   */
  numberAcceptableValue = protoInt64.zero;

  /**
   * The relative lower bound (in cents) of the number_acceptable_value that serves as a reference point for the test
   *
   * @generated from field: int64 number_relative_lower_bound = 22;
   */
  numberRelativeLowerBound = protoInt64.zero;

  /**
   * The relative upper bound (in cents) of the number_acceptable_value that serves as a reference point for the test
   *
   * @generated from field: int64 number_relative_upper_bound = 23;
   */
  numberRelativeUpperBound = protoInt64.zero;

  /**
   * The list of values that are acceptable in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_acceptable_values = 30;
   */
  textAcceptableValues: string[] = [];

  /**
   * The list of values that are acceptable (but with deviation) in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_acceptable_values_with_deviation = 31;
   */
  textAcceptableValuesWithDeviation: string[] = [];

  /**
   * The list of unacceptable values in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_unacceptable_values = 32;
   */
  textUnacceptableValues: string[] = [];

  /**
   * An optional description
   *
   * @generated from field: string description = 40;
   */
  description = "";

  constructor(data?: PartialMessage<QCGroupsServiceItemCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServiceItemCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "qc_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "qc_param_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "is_internal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "acceptable_value_type", kind: "enum", T: proto3.getEnumType(QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE) },
    { no: 21, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_relative_lower_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_relative_upper_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_acceptable_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_values_with_deviation", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 32, name: "text_unacceptable_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 40, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServiceItemCreateRequest {
    return new QCGroupsServiceItemCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServiceItemCreateRequest {
    return new QCGroupsServiceItemCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServiceItemCreateRequest {
    return new QCGroupsServiceItemCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServiceItemCreateRequest | PlainMessage<QCGroupsServiceItemCreateRequest> | undefined, b: QCGroupsServiceItemCreateRequest | PlainMessage<QCGroupsServiceItemCreateRequest> | undefined): boolean {
    return proto3.util.equals(QCGroupsServiceItemCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update a param in a qc group
 *
 * @generated from message Scailo.QCGroupsServiceItemUpdateRequest
 */
export class QCGroupsServiceItemUpdateRequest extends Message<QCGroupsServiceItemUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Denotes if this parameter is internal or not (if set to true, then this value will be hidden. If set to false, then this value will be printed)
   *
   * @generated from field: bool is_internal = 19;
   */
  isInternal = false;

  /**
   * The acceptable value type of the item
   *
   * @generated from field: Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE acceptable_value_type = 20;
   */
  acceptableValueType = QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * The acceptable value (in cents) in case the acceptable value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_acceptable_value = 21;
   */
  numberAcceptableValue = protoInt64.zero;

  /**
   * The relative lower bound (in cents) of the number_acceptable_value that serves as a reference point for the test
   *
   * @generated from field: int64 number_relative_lower_bound = 22;
   */
  numberRelativeLowerBound = protoInt64.zero;

  /**
   * The relative upper bound (in cents) of the number_acceptable_value that serves as a reference point for the test
   *
   * @generated from field: int64 number_relative_upper_bound = 23;
   */
  numberRelativeUpperBound = protoInt64.zero;

  /**
   * The list of values that are acceptable in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_acceptable_values = 30;
   */
  textAcceptableValues: string[] = [];

  /**
   * The list of values that are acceptable (but with deviation) in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_acceptable_values_with_deviation = 31;
   */
  textAcceptableValuesWithDeviation: string[] = [];

  /**
   * The list of unacceptable values in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_unacceptable_values = 32;
   */
  textUnacceptableValues: string[] = [];

  /**
   * An optional description
   *
   * @generated from field: string description = 40;
   */
  description = "";

  constructor(data?: PartialMessage<QCGroupsServiceItemUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServiceItemUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "is_internal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "acceptable_value_type", kind: "enum", T: proto3.getEnumType(QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE) },
    { no: 21, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_relative_lower_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_relative_upper_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_acceptable_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_values_with_deviation", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 32, name: "text_unacceptable_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 40, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServiceItemUpdateRequest {
    return new QCGroupsServiceItemUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServiceItemUpdateRequest {
    return new QCGroupsServiceItemUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServiceItemUpdateRequest {
    return new QCGroupsServiceItemUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServiceItemUpdateRequest | PlainMessage<QCGroupsServiceItemUpdateRequest> | undefined, b: QCGroupsServiceItemUpdateRequest | PlainMessage<QCGroupsServiceItemUpdateRequest> | undefined): boolean {
    return proto3.util.equals(QCGroupsServiceItemUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute a param associated to a qc group
 *
 * @generated from message Scailo.QCGroupItem
 */
export class QCGroupItem extends Message<QCGroupItem> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this qc group
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores the approval metadata
   *
   * @generated from field: Scailo.ApprovalMetadata approval_metadata = 3;
   */
  approvalMetadata?: ApprovalMetadata;

  /**
   * Denotes if this record requires approval (or has been approved)
   *
   * @generated from field: bool need_approval = 4;
   */
  needApproval = false;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the ID of the qc group
   *
   * @generated from field: uint64 qc_group_id = 10;
   */
  qcGroupId = protoInt64.zero;

  /**
   * The ID of the qc param that is a part of the qc group
   *
   * @generated from field: uint64 qc_param_id = 11;
   */
  qcParamId = protoInt64.zero;

  /**
   * The ID of the associated unit of material
   *
   * @generated from field: uint64 uom_id = 12;
   */
  uomId = protoInt64.zero;

  /**
   * Denotes if this parameter is internal or not (if set to true, then this value will be hidden. If set to false, then this value will be printed)
   *
   * @generated from field: bool is_internal = 19;
   */
  isInternal = false;

  /**
   * The acceptable value type of the item
   *
   * @generated from field: Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE acceptable_value_type = 20;
   */
  acceptableValueType = QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * The acceptable value (in cents) in case the acceptable value type is number-absolute or number-percentage
   *
   * @generated from field: int64 number_acceptable_value = 21;
   */
  numberAcceptableValue = protoInt64.zero;

  /**
   * The relative lower bound (in cents) of the number_acceptable_value that serves as a reference point for the test
   *
   * @generated from field: int64 number_relative_lower_bound = 22;
   */
  numberRelativeLowerBound = protoInt64.zero;

  /**
   * The relative upper bound (in cents) of the number_acceptable_value that serves as a reference point for the test
   *
   * @generated from field: int64 number_relative_upper_bound = 23;
   */
  numberRelativeUpperBound = protoInt64.zero;

  /**
   * The list of values that are acceptable in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_acceptable_values = 30;
   */
  textAcceptableValues: string[] = [];

  /**
   * The list of values that are acceptable (but with deviation) in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_acceptable_values_with_deviation = 31;
   */
  textAcceptableValuesWithDeviation: string[] = [];

  /**
   * The list of unacceptable values in case the acceptable value type is text-input or text-dropdown
   *
   * @generated from field: repeated string text_unacceptable_values = 32;
   */
  textUnacceptableValues: string[] = [];

  /**
   * An optional description
   *
   * @generated from field: string description = 40;
   */
  description = "";

  constructor(data?: PartialMessage<QCGroupItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 3, name: "approval_metadata", kind: "message", T: ApprovalMetadata },
    { no: 4, name: "need_approval", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "qc_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "qc_param_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "is_internal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "acceptable_value_type", kind: "enum", T: proto3.getEnumType(QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE) },
    { no: 21, name: "number_acceptable_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "number_relative_lower_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 23, name: "number_relative_upper_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 30, name: "text_acceptable_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 31, name: "text_acceptable_values_with_deviation", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 32, name: "text_unacceptable_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 40, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupItem {
    return new QCGroupItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupItem {
    return new QCGroupItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupItem {
    return new QCGroupItem().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupItem | PlainMessage<QCGroupItem> | undefined, b: QCGroupItem | PlainMessage<QCGroupItem> | undefined): boolean {
    return proto3.util.equals(QCGroupItem, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of qc groups
 *
 * @generated from message Scailo.QCGroupsList
 */
export class QCGroupsList extends Message<QCGroupsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.QCGroup list = 1;
   */
  list: QCGroup[] = [];

  constructor(data?: PartialMessage<QCGroupsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: QCGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsList {
    return new QCGroupsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsList {
    return new QCGroupsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsList {
    return new QCGroupsList().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsList | PlainMessage<QCGroupsList> | undefined, b: QCGroupsList | PlainMessage<QCGroupsList> | undefined): boolean {
    return proto3.util.equals(QCGroupsList, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of qc group params
 *
 * @generated from message Scailo.QCGroupsItemsList
 */
export class QCGroupsItemsList extends Message<QCGroupsItemsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.QCGroupItem list = 1;
   */
  list: QCGroupItem[] = [];

  constructor(data?: PartialMessage<QCGroupsItemsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsItemsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: QCGroupItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsItemsList {
    return new QCGroupsItemsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsItemsList {
    return new QCGroupsItemsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsItemsList {
    return new QCGroupsItemsList().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsItemsList | PlainMessage<QCGroupsItemsList> | undefined, b: QCGroupsItemsList | PlainMessage<QCGroupsItemsList> | undefined): boolean {
    return proto3.util.equals(QCGroupsItemsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.QCGroupItemHistoryRequest
 */
export class QCGroupItemHistoryRequest extends Message<QCGroupItemHistoryRequest> {
  /**
   * Stores the ID of the qc group
   *
   * @generated from field: uint64 qc_group_id = 10;
   */
  qcGroupId = protoInt64.zero;

  /**
   * The ID of the qc param that is a part of the qc group
   *
   * @generated from field: uint64 qc_param_id = 11;
   */
  qcParamId = protoInt64.zero;

  constructor(data?: PartialMessage<QCGroupItemHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupItemHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "qc_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "qc_param_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupItemHistoryRequest {
    return new QCGroupItemHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupItemHistoryRequest {
    return new QCGroupItemHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupItemHistoryRequest {
    return new QCGroupItemHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupItemHistoryRequest | PlainMessage<QCGroupItemHistoryRequest> | undefined, b: QCGroupItemHistoryRequest | PlainMessage<QCGroupItemHistoryRequest> | undefined): boolean {
    return proto3.util.equals(QCGroupItemHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve approved or unapproved items.
 *
 * @generated from message Scailo.QCGroupItemsSearchRequest
 */
export class QCGroupItemsSearchRequest extends Message<QCGroupItemsSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_GROUP_ITEM_SORT_KEY sort_key = 5;
   */
  sortKey = QC_GROUP_ITEM_SORT_KEY.QC_GROUP_ITEM_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The status of the items
   *
   * @generated from field: Scailo.QC_GROUP_ITEM_STATUS status = 7;
   */
  status = QC_GROUP_ITEM_STATUS.QC_GROUP_ITEM_STATUS_ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 10;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 11;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 12;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 13;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The ID of the qc group
   *
   * @generated from field: uint64 qc_group_id = 20;
   */
  qcGroupId = protoInt64.zero;

  /**
   * The ID of the qc param
   *
   * @generated from field: uint64 qc_param_id = 21;
   */
  qcParamId = protoInt64.zero;

  /**
   * The ID of the unit of material
   *
   * @generated from field: uint64 uom_id = 22;
   */
  uomId = protoInt64.zero;

  /**
   * Denotes if this parameter is internal or not (if set to true, then this value will be hidden. If set to false, then this value will be printed)
   *
   * @generated from field: Scailo.BOOL_FILTER is_internal = 29;
   */
  isInternal = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The acceptable value type of the item
   *
   * @generated from field: Scailo.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE acceptable_value_type = 30;
   */
  acceptableValueType = QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE.QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE_ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<QCGroupItemsSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupItemsSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_GROUP_ITEM_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(QC_GROUP_ITEM_STATUS) },
    { no: 10, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "qc_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "qc_param_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "uom_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 29, name: "is_internal", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 30, name: "acceptable_value_type", kind: "enum", T: proto3.getEnumType(QC_GROUP_ITEM_ACCEPTABLE_VALUE_TYPE) },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupItemsSearchRequest {
    return new QCGroupItemsSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupItemsSearchRequest {
    return new QCGroupItemsSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupItemsSearchRequest {
    return new QCGroupItemsSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupItemsSearchRequest | PlainMessage<QCGroupItemsSearchRequest> | undefined, b: QCGroupItemsSearchRequest | PlainMessage<QCGroupItemsSearchRequest> | undefined): boolean {
    return proto3.util.equals(QCGroupItemsSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination items request
 *
 * @generated from message Scailo.QCGroupsServicePaginatedItemsResponse
 */
export class QCGroupsServicePaginatedItemsResponse extends Message<QCGroupsServicePaginatedItemsResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.QCGroupItem payload = 4;
   */
  payload: QCGroupItem[] = [];

  constructor(data?: PartialMessage<QCGroupsServicePaginatedItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServicePaginatedItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: QCGroupItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServicePaginatedItemsResponse {
    return new QCGroupsServicePaginatedItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServicePaginatedItemsResponse {
    return new QCGroupsServicePaginatedItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServicePaginatedItemsResponse {
    return new QCGroupsServicePaginatedItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServicePaginatedItemsResponse | PlainMessage<QCGroupsServicePaginatedItemsResponse> | undefined, b: QCGroupsServicePaginatedItemsResponse | PlainMessage<QCGroupsServicePaginatedItemsResponse> | undefined): boolean {
    return proto3.util.equals(QCGroupsServicePaginatedItemsResponse, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.QCGroupsServicePaginationReq
 */
export class QCGroupsServicePaginationReq extends Message<QCGroupsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_GROUP_SORT_KEY sort_key = 5;
   */
  sortKey = QC_GROUP_SORT_KEY.QC_GROUP_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this qc group
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 6;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<QCGroupsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_GROUP_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServicePaginationReq {
    return new QCGroupsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServicePaginationReq {
    return new QCGroupsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServicePaginationReq {
    return new QCGroupsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServicePaginationReq | PlainMessage<QCGroupsServicePaginationReq> | undefined, b: QCGroupsServicePaginationReq | PlainMessage<QCGroupsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(QCGroupsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.QCGroupsServicePaginationResponse
 */
export class QCGroupsServicePaginationResponse extends Message<QCGroupsServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.QCGroup payload = 4;
   */
  payload: QCGroup[] = [];

  constructor(data?: PartialMessage<QCGroupsServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: QCGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServicePaginationResponse {
    return new QCGroupsServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServicePaginationResponse {
    return new QCGroupsServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServicePaginationResponse {
    return new QCGroupsServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServicePaginationResponse | PlainMessage<QCGroupsServicePaginationResponse> | undefined, b: QCGroupsServicePaginationResponse | PlainMessage<QCGroupsServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(QCGroupsServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.QCGroupsServiceFilterReq
 */
export class QCGroupsServiceFilterReq extends Message<QCGroupsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_GROUP_SORT_KEY sort_key = 5;
   */
  sortKey = QC_GROUP_SORT_KEY.QC_GROUP_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this qc group
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The name of the qc group
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The qc group code
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * Retrieve qc groups that are assigned to the given family ID
   *
   * @generated from field: uint64 family_id = 30;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<QCGroupsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_GROUP_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServiceFilterReq {
    return new QCGroupsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServiceFilterReq {
    return new QCGroupsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServiceFilterReq {
    return new QCGroupsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServiceFilterReq | PlainMessage<QCGroupsServiceFilterReq> | undefined, b: QCGroupsServiceFilterReq | PlainMessage<QCGroupsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(QCGroupsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.QCGroupsServiceCountReq
 */
export class QCGroupsServiceCountReq extends Message<QCGroupsServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this qc group
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * The start range of approved timestamp
   *
   * @generated from field: uint64 approved_on_start = 11;
   */
  approvedOnStart = protoInt64.zero;

  /**
   * The end range of approved timestamp
   *
   * @generated from field: uint64 approved_on_end = 12;
   */
  approvedOnEnd = protoInt64.zero;

  /**
   * The ID of the approver
   *
   * @generated from field: uint64 approved_by_user_id = 13;
   */
  approvedByUserId = protoInt64.zero;

  /**
   * The role ID of the approver
   *
   * @generated from field: uint64 approver_role_id = 14;
   */
  approverRoleId = protoInt64.zero;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * The name of the qc group
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * The qc group code
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * Retrieve qc groups that are assigned to the given family ID
   *
   * @generated from field: uint64 family_id = 30;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<QCGroupsServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "approved_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "approved_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "approved_by_user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "approver_role_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServiceCountReq {
    return new QCGroupsServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServiceCountReq {
    return new QCGroupsServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServiceCountReq {
    return new QCGroupsServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServiceCountReq | PlainMessage<QCGroupsServiceCountReq> | undefined, b: QCGroupsServiceCountReq | PlainMessage<QCGroupsServiceCountReq> | undefined): boolean {
    return proto3.util.equals(QCGroupsServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.QCGroupsServiceSearchAllReq
 */
export class QCGroupsServiceSearchAllReq extends Message<QCGroupsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.QC_GROUP_SORT_KEY sort_key = 5;
   */
  sortKey = QC_GROUP_SORT_KEY.QC_GROUP_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.STANDARD_LIFECYCLE_STATUS status = 10;
   */
  status = STANDARD_LIFECYCLE_STATUS.ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * Retrieve qc groups that are assigned to the given family ID
   *
   * @generated from field: uint64 family_id = 30;
   */
  familyId = protoInt64.zero;

  constructor(data?: PartialMessage<QCGroupsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.QCGroupsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(QC_GROUP_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(STANDARD_LIFECYCLE_STATUS) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "family_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QCGroupsServiceSearchAllReq {
    return new QCGroupsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QCGroupsServiceSearchAllReq {
    return new QCGroupsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QCGroupsServiceSearchAllReq {
    return new QCGroupsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: QCGroupsServiceSearchAllReq | PlainMessage<QCGroupsServiceSearchAllReq> | undefined, b: QCGroupsServiceSearchAllReq | PlainMessage<QCGroupsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(QCGroupsServiceSearchAllReq, a, b);
  }
}

