// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file users.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { User, UsersList, UsersServiceCountReq, UsersServiceCreateRequest, UsersServiceFilterReq, UsersServicePaginationReq, UsersServicePaginationResponse, UsersServiceRegisterMobileDeviceRequest, UsersServiceSearchAllReq, UsersServiceUpdateRequest } from "./users.scailo_pb.js";
import { ActiveStatus, Base64String, CountInSLCStatusRequest, CountResponse, Empty, Identifier, IdentifiersList, IdentifierUUID, IdentifierUUIDsList, IdentifierWithUserComment, IdentifierZeroable, ImageResponse, MonthAndDayFilter, SimpleSearchReq, StandardFile, StringResponse, StringsList, UpdateOwnPasswordReq, UpdatePasswordReq, UploadPictureReq } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each user
 *
 * @generated from service Scailo.UsersService
 */
export const UsersService = {
  typeName: "Scailo.UsersService",
  methods: {
    /**
     * Register user's mobile device for push notifications. Returns the ID of the user device record
     *
     * @generated from rpc Scailo.UsersService.RegisterMobileDevice
     */
    registerMobileDevice: {
      name: "RegisterMobileDevice",
      I: UsersServiceRegisterMobileDeviceRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.UsersService.Create
     */
    create: {
      name: "Create",
      I: UsersServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.UsersService.Draft
     */
    draft: {
      name: "Draft",
      I: UsersServiceCreateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.UsersService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: UsersServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.UsersService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.UsersService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.UsersService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.UsersService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.UsersService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: UsersServiceUpdateRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.UsersService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.UsersService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.UsersService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (Identifier) returns (Identifier);
     *
     * @generated from rpc Scailo.UsersService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update user's password by another user (such as an administrator)
     *
     * @generated from rpc Scailo.UsersService.UpdatePassword
     */
    updatePassword: {
      name: "UpdatePassword",
      I: UpdatePasswordReq,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update user's own password
     *
     * @generated from rpc Scailo.UsersService.UpdateOwnPassword
     */
    updateOwnPassword: {
      name: "UpdateOwnPassword",
      I: UpdateOwnPasswordReq,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update the user's profile picture
     *
     * @generated from rpc Scailo.UsersService.UpdateProfilePicture
     */
    updateProfilePicture: {
      name: "UpdateProfilePicture",
      I: UploadPictureReq,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Update the user's signature
     *
     * @generated from rpc Scailo.UsersService.UpdateSignature
     */
    updateSignature: {
      name: "UpdateSignature",
      I: UploadPictureReq,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Enable MFA for user
     *
     * @generated from rpc Scailo.UsersService.MFAEnable
     */
    mFAEnable: {
      name: "MFAEnable",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reset MFA for user
     *
     * @generated from rpc Scailo.UsersService.MFAReset
     */
    mFAReset: {
      name: "MFAReset",
      I: Identifier,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID (returns the entire information about the user, including the logs)
     *
     * @generated from rpc Scailo.UsersService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: IdentifierZeroable,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID (logs aren't returned)
     *
     * @generated from rpc Scailo.UsersService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * View by username (logs aren't returned)
     *
     * @generated from rpc Scailo.UsersService.ViewByUsername
     */
    viewByUsername: {
      name: "ViewByUsername",
      I: SimpleSearchReq,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * View by user's code (logs aren't returned)
     *
     * @generated from rpc Scailo.UsersService.ViewByCode
     */
    viewByCode: {
      name: "ViewByCode",
      I: SimpleSearchReq,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.UsersService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: UsersList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.UsersService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: UsersList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.UsersService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: UsersServicePaginationReq,
      O: UsersServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all users with the given IDs
     *
     * @generated from rpc Scailo.UsersService.ViewFromIDs
     */
    viewFromIDs: {
      name: "ViewFromIDs",
      I: IdentifiersList,
      O: UsersList,
      kind: MethodKind.Unary,
    },
    /**
     * View all users with the given UUIDs
     *
     * @generated from rpc Scailo.UsersService.ViewFromUUIDs
     */
    viewFromUUIDs: {
      name: "ViewFromUUIDs",
      I: IdentifierUUIDsList,
      O: UsersList,
      kind: MethodKind.Unary,
    },
    /**
     * View all users with the given usernames
     *
     * @generated from rpc Scailo.UsersService.ViewFromUsernames
     */
    viewFromUsernames: {
      name: "ViewFromUsernames",
      I: StringsList,
      O: UsersList,
      kind: MethodKind.Unary,
    },
    /**
     * View self user (the profile of the logged in user)
     *
     * @generated from rpc Scailo.UsersService.ViewSelf
     */
    viewSelf: {
      name: "ViewSelf",
      I: Empty,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * View all users with birthdays on the given date
     *
     * @generated from rpc Scailo.UsersService.ViewBirthdaysOn
     */
    viewBirthdaysOn: {
      name: "ViewBirthdaysOn",
      I: MonthAndDayFilter,
      O: UsersList,
      kind: MethodKind.Unary,
    },
    /**
     * View user's signature
     *
     * @generated from rpc Scailo.UsersService.ViewSignature
     */
    viewSignature: {
      name: "ViewSignature",
      I: Identifier,
      O: Base64String,
      kind: MethodKind.Unary,
    },
    /**
     * View user's profile picture
     *
     * @generated from rpc Scailo.UsersService.ViewProfilePicture
     */
    viewProfilePicture: {
      name: "ViewProfilePicture",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View user's VCard
     *
     * @generated from rpc Scailo.UsersService.ViewVCard
     */
    viewVCard: {
      name: "ViewVCard",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View user's QR Code as image
     *
     * @generated from rpc Scailo.UsersService.ViewQRImage
     */
    viewQRImage: {
      name: "ViewQRImage",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View user's QR Code as string
     *
     * @generated from rpc Scailo.UsersService.ViewQRString
     */
    viewQRString: {
      name: "ViewQRString",
      I: Identifier,
      O: StringResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View user info on the basis of the provided image. The image should consist of only the user's face. Will return an error if the image has not been recognized.
     *
     * @generated from rpc Scailo.UsersService.IdentifyCroppedFace
     */
    identifyCroppedFace: {
      name: "IdentifyCroppedFace",
      I: StandardFile,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * View user info on the basis of the provided image. The image should consist of just the user (might be a full sized photo). The face will be cropped. Will return an error if the image has not been recognized.
     *
     * @generated from rpc Scailo.UsersService.IdentifyFullFace
     */
    identifyFullFace: {
      name: "IdentifyFullFace",
      I: StandardFile,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.UsersService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: UsersServiceSearchAllReq,
      O: UsersList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.UsersService.Filter
     */
    filter: {
      name: "Filter",
      I: UsersServiceFilterReq,
      O: UsersList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.UsersService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.UsersService.Count
     */
    count: {
      name: "Count",
      I: UsersServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

