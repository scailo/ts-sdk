// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file equations_families.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { EquationFamily, EquationFamilyItem, EquationFamilyItemHistoryRequest, EquationFamilyItemsSearchRequest, EquationsFamiliesItemsList, EquationsFamiliesList, EquationsFamiliesServiceCountReq, EquationsFamiliesServiceCreateRequest, EquationsFamiliesServiceFilterReq, EquationsFamiliesServiceItemCreateRequest, EquationsFamiliesServiceItemUpdateRequest, EquationsFamiliesServicePaginatedItemsResponse, EquationsFamiliesServicePaginationReq, EquationsFamiliesServicePaginationResponse, EquationsFamiliesServiceSearchAllReq, EquationsFamiliesServiceUpdateRequest } from "./equations_families.scailo_pb.js";
import { ActiveStatus, CloneRequest, CountInSLCStatusRequest, CountResponse, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDsList, IdentifierUUIDWithFile, IdentifierUUIDWithUserComment, IdentifierWithSearchKey, IdentifierWithUserComment, ReorderItemsRequest, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { FamiliesList, FilterFamiliesReqForIdentifier } from "./families.scailo_pb.js";

/**
 *
 * Describes the common methods applicable on each equation family
 *
 * @generated from service Scailo.EquationsFamiliesService
 */
export const EquationsFamiliesService = {
  typeName: "Scailo.EquationsFamiliesService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Create
     */
    create: {
      name: "Create",
      I: EquationsFamiliesServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Draft
     */
    draft: {
      name: "Draft",
      I: EquationsFamiliesServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.EquationsFamiliesService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: EquationsFamiliesServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.EquationsFamiliesService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.EquationsFamiliesService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.EquationsFamiliesService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: EquationsFamiliesServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * Send Email
     * rpc SendEmail (IdentifierWithEmailAttributes) returns (IdentifierResponse);
     *
     * @generated from rpc Scailo.EquationsFamiliesService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Clone equation from an existing equation (denoted by the identifier)
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Clone
     */
    clone: {
      name: "Clone",
      I: CloneRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an item to a equation family
     *
     * @generated from rpc Scailo.EquationsFamiliesService.AddEquationFamilyItem
     */
    addEquationFamilyItem: {
      name: "AddEquationFamilyItem",
      I: EquationsFamiliesServiceItemCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an item in a equation family
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ModifyEquationFamilyItem
     */
    modifyEquationFamilyItem: {
      name: "ModifyEquationFamilyItem",
      I: EquationsFamiliesServiceItemUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve an item in a equation family
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ApproveEquationFamilyItem
     */
    approveEquationFamilyItem: {
      name: "ApproveEquationFamilyItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an item in a equation family
     *
     * @generated from rpc Scailo.EquationsFamiliesService.DeleteEquationFamilyItem
     */
    deleteEquationFamilyItem: {
      name: "DeleteEquationFamilyItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder items in a equation family
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ReorderEquationFamilyItems
     */
    reorderEquationFamilyItems: {
      name: "ReorderEquationFamilyItems",
      I: ReorderItemsRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View Equation Family Item by ID
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewEquationFamilyItemByID
     */
    viewEquationFamilyItemByID: {
      name: "ViewEquationFamilyItemByID",
      I: Identifier,
      O: EquationFamilyItem,
      kind: MethodKind.Unary,
    },
    /**
     * View approved equation family items for given equation family ID
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewApprovedEquationFamilyItems
     */
    viewApprovedEquationFamilyItems: {
      name: "ViewApprovedEquationFamilyItems",
      I: IdentifierWithSearchKey,
      O: EquationsFamiliesItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved equation family items for given equation family ID
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewUnapprovedEquationFamilyItems
     */
    viewUnapprovedEquationFamilyItems: {
      name: "ViewUnapprovedEquationFamilyItems",
      I: IdentifierWithSearchKey,
      O: EquationsFamiliesItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the equation family item
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewEquationFamilyItemHistory
     */
    viewEquationFamilyItemHistory: {
      name: "ViewEquationFamilyItemHistory",
      I: EquationFamilyItemHistoryRequest,
      O: EquationsFamiliesItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View approved equation family items for given equation family ID with pagination
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewPaginatedApprovedEquationFamilyItems
     */
    viewPaginatedApprovedEquationFamilyItems: {
      name: "ViewPaginatedApprovedEquationFamilyItems",
      I: EquationFamilyItemsSearchRequest,
      O: EquationsFamiliesServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved equation family items for given equation family ID with pagination
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewPaginatedUnapprovedEquationFamilyItems
     */
    viewPaginatedUnapprovedEquationFamilyItems: {
      name: "ViewPaginatedUnapprovedEquationFamilyItems",
      I: EquationFamilyItemsSearchRequest,
      O: EquationsFamiliesServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through equation family items with pagination
     *
     * @generated from rpc Scailo.EquationsFamiliesService.SearchItemsWithPagination
     */
    searchItemsWithPagination: {
      name: "SearchItemsWithPagination",
      I: EquationFamilyItemsSearchRequest,
      O: EquationsFamiliesServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that could be used to upload items from the filled CSV file. The same file can also be used as a template when there are no existing records
     *
     * @generated from rpc Scailo.EquationsFamiliesService.DownloadItemsAsCSV
     */
    downloadItemsAsCSV: {
      name: "DownloadItemsAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download the CSV file with the entire dependency tree. Useful for identifying quantities necessary from all the dependencies.
     *
     * @generated from rpc Scailo.EquationsFamiliesService.DownloadTreeAsCSV
     */
    downloadTreeAsCSV: {
      name: "DownloadTreeAsCSV",
      I: Identifier,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
     *
     * @generated from rpc Scailo.EquationsFamiliesService.UploadEquationFamilyItems
     */
    uploadEquationFamilyItems: {
      name: "UploadEquationFamilyItems",
      I: IdentifierUUIDWithFile,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: EquationFamily,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: EquationFamily,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: EquationsFamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: EquationsFamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: EquationsFamiliesServicePaginationReq,
      O: EquationsFamiliesServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View the latest equation for a family (denoted by the given identifier)
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewForFamilyID
     */
    viewForFamilyID: {
      name: "ViewForFamilyID",
      I: Identifier,
      O: EquationFamily,
      kind: MethodKind.Unary,
    },
    /**
     * View prospective families for the given equation family (without cyclical dependencies)
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ViewProspectiveFamilies
     */
    viewProspectiveFamilies: {
      name: "ViewProspectiveFamilies",
      I: IdentifierWithSearchKey,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * Filter prospective families for the record represented by the given UUID identifier (without cyclical dependencies)
     *
     * @generated from rpc Scailo.EquationsFamiliesService.FilterProspectiveFamilies
     */
    filterProspectiveFamilies: {
      name: "FilterProspectiveFamilies",
      I: FilterFamiliesReqForIdentifier,
      O: FamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.EquationsFamiliesService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: EquationsFamiliesServiceSearchAllReq,
      O: EquationsFamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Filter
     */
    filter: {
      name: "Filter",
      I: EquationsFamiliesServiceFilterReq,
      O: EquationsFamiliesList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.EquationsFamiliesService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given count criteria
     *
     * @generated from rpc Scailo.EquationsFamiliesService.Count
     */
    count: {
      name: "Count",
      I: EquationsFamiliesServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
     *
     * @generated from rpc Scailo.EquationsFamiliesService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: EquationsFamiliesServiceFilterReq,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Import records using a CSV file (duplicate codes will be skipped)
     *
     * @generated from rpc Scailo.EquationsFamiliesService.ImportFromCSV
     */
    importFromCSV: {
      name: "ImportFromCSV",
      I: StandardFile,
      O: IdentifierUUIDsList,
      kind: MethodKind.Unary,
    },
  }
} as const;

