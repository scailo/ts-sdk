// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file quotations_requests.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QuotationRequest, QuotationRequestAncillaryParameters, QuotationRequestItem, QuotationRequestItemHistoryRequest, QuotationRequestItemsSearchRequest, QuotationsRequestsItemsList, QuotationsRequestsList, QuotationsRequestsServiceAutofillRequest, QuotationsRequestsServiceCountReq, QuotationsRequestsServiceCreateRequest, QuotationsRequestsServiceFilterReq, QuotationsRequestsServiceItemCreateRequest, QuotationsRequestsServiceItemUpdateRequest, QuotationsRequestsServicePaginatedItemsResponse, QuotationsRequestsServicePaginationReq, QuotationsRequestsServicePaginationResponse, QuotationsRequestsServiceSearchAllReq, QuotationsRequestsServiceUpdateRequest } from "./quotations_requests.scailo_pb.js";
import { ActiveStatus, CountInSLCStatusRequest, CountResponse, Empty, Identifier, IdentifierResponse, IdentifiersList, IdentifierUUID, IdentifierUUIDWithFile, IdentifierUUIDWithUserComment, IdentifierWithSearchKey, IdentifierWithUserComment, ReorderItemsRequest, RepeatWithDeliveryDate, SimpleSearchReq, StandardFile } from "./base.scailo_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the common methods applicable on each quotation request
 *
 * @generated from service Scailo.QuotationsRequestsService
 */
export const QuotationsRequestsService = {
  typeName: "Scailo.QuotationsRequestsService",
  methods: {
    /**
     * Create and send for verification
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Create
     */
    create: {
      name: "Create",
      I: QuotationsRequestsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Create and save as draft
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Draft
     */
    draft: {
      name: "Draft",
      I: QuotationsRequestsServiceCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update draft
     *
     * @generated from rpc Scailo.QuotationsRequestsService.DraftUpdate
     */
    draftUpdate: {
      name: "DraftUpdate",
      I: QuotationsRequestsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send for verification
     *
     * @generated from rpc Scailo.QuotationsRequestsService.SendForVerification
     */
    sendForVerification: {
      name: "SendForVerification",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Verify
     */
    verify: {
      name: "Verify",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Approve
     */
    approve: {
      name: "Approve",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Send For Revision
     *
     * @generated from rpc Scailo.QuotationsRequestsService.SendForRevision
     */
    sendForRevision: {
      name: "SendForRevision",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update revision
     *
     * @generated from rpc Scailo.QuotationsRequestsService.RevisionUpdate
     */
    revisionUpdate: {
      name: "RevisionUpdate",
      I: QuotationsRequestsServiceUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Halt
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Halt
     */
    halt: {
      name: "Halt",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Discard
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Discard
     */
    discard: {
      name: "Discard",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Restore
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Complete
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Complete
     */
    complete: {
      name: "Complete",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Repeat
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Repeat
     */
    repeat: {
      name: "Repeat",
      I: RepeatWithDeliveryDate,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reopen
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Reopen
     */
    reopen: {
      name: "Reopen",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add comment
     *
     * @generated from rpc Scailo.QuotationsRequestsService.CommentAdd
     */
    commentAdd: {
      name: "CommentAdd",
      I: IdentifierUUIDWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Autofill the quotation request (from the associated purchase enquiry)
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Autofill
     */
    autofill: {
      name: "Autofill",
      I: QuotationsRequestsServiceAutofillRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Add an item to a quotation request
     *
     * @generated from rpc Scailo.QuotationsRequestsService.AddQuotationRequestItem
     */
    addQuotationRequestItem: {
      name: "AddQuotationRequestItem",
      I: QuotationsRequestsServiceItemCreateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Modify an item in a quotation request
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ModifyQuotationRequestItem
     */
    modifyQuotationRequestItem: {
      name: "ModifyQuotationRequestItem",
      I: QuotationsRequestsServiceItemUpdateRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Approve an item in a quotation request
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ApproveQuotationRequestItem
     */
    approveQuotationRequestItem: {
      name: "ApproveQuotationRequestItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an item in a quotation request
     *
     * @generated from rpc Scailo.QuotationsRequestsService.DeleteQuotationRequestItem
     */
    deleteQuotationRequestItem: {
      name: "DeleteQuotationRequestItem",
      I: IdentifierWithUserComment,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Reorder items in a quotation request
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ReorderQuotationRequestItems
     */
    reorderQuotationRequestItems: {
      name: "ReorderQuotationRequestItems",
      I: ReorderItemsRequest,
      O: IdentifierResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View quotation request Item by ID
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewQuotationRequestItemByID
     */
    viewQuotationRequestItemByID: {
      name: "ViewQuotationRequestItemByID",
      I: Identifier,
      O: QuotationRequestItem,
      kind: MethodKind.Unary,
    },
    /**
     * View approved quotation request items for given quotation request ID
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewApprovedQuotationRequestItems
     */
    viewApprovedQuotationRequestItems: {
      name: "ViewApprovedQuotationRequestItems",
      I: IdentifierWithSearchKey,
      O: QuotationsRequestsItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved quotation request items for given quotation request ID
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewUnapprovedQuotationRequestItems
     */
    viewUnapprovedQuotationRequestItems: {
      name: "ViewUnapprovedQuotationRequestItems",
      I: IdentifierWithSearchKey,
      O: QuotationsRequestsItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the history of the quotation request item
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewQuotationRequestItemHistory
     */
    viewQuotationRequestItemHistory: {
      name: "ViewQuotationRequestItemHistory",
      I: QuotationRequestItemHistoryRequest,
      O: QuotationsRequestsItemsList,
      kind: MethodKind.Unary,
    },
    /**
     * View approved quotation request items for given quotation request ID with pagination
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewPaginatedApprovedQuotationRequestItems
     */
    viewPaginatedApprovedQuotationRequestItems: {
      name: "ViewPaginatedApprovedQuotationRequestItems",
      I: QuotationRequestItemsSearchRequest,
      O: QuotationsRequestsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View unapproved quotation request items for given quotation request ID with pagination
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewPaginatedUnapprovedQuotationRequestItems
     */
    viewPaginatedUnapprovedQuotationRequestItems: {
      name: "ViewPaginatedUnapprovedQuotationRequestItems",
      I: QuotationRequestItemsSearchRequest,
      O: QuotationsRequestsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search through quotation request items with pagination
     *
     * @generated from rpc Scailo.QuotationsRequestsService.SearchItemsWithPagination
     */
    searchItemsWithPagination: {
      name: "SearchItemsWithPagination",
      I: QuotationRequestItemsSearchRequest,
      O: QuotationsRequestsServicePaginatedItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file with the associated line items. The same file could then be used to upload line items.
     *
     * @generated from rpc Scailo.QuotationsRequestsService.DownloadItemsAsCSV
     */
    downloadItemsAsCSV: {
      name: "DownloadItemsAsCSV",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Download the CSV template that could be used to upload items
     *
     * @generated from rpc Scailo.QuotationsRequestsService.DownloadItemsTemplateAsCSV
     */
    downloadItemsTemplateAsCSV: {
      name: "DownloadItemsTemplateAsCSV",
      I: Empty,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * Upload items using a CSV file. This is an idempotent operation. All the existing items are deleted before adding the items from the file.
     *
     * @generated from rpc Scailo.QuotationsRequestsService.UploadQuotationRequestItems
     */
    uploadQuotationRequestItems: {
      name: "UploadQuotationRequestItems",
      I: IdentifierUUIDWithFile,
      O: IdentifiersList,
      kind: MethodKind.Unary,
    },
    /**
     * View by ID
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewByID
     */
    viewByID: {
      name: "ViewByID",
      I: Identifier,
      O: QuotationRequest,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: IdentifierUUID,
      O: QuotationRequest,
      kind: MethodKind.Unary,
    },
    /**
     * View by Reference ID (returns the latest record in case of duplicates)
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewByReferenceID
     */
    viewByReferenceID: {
      name: "ViewByReferenceID",
      I: SimpleSearchReq,
      O: QuotationRequest,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components by ID (without logs)
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewEssentialByID
     */
    viewEssentialByID: {
      name: "ViewEssentialByID",
      I: Identifier,
      O: QuotationRequest,
      kind: MethodKind.Unary,
    },
    /**
     * View only essential components (without logs) that matches the given UUID
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewEssentialByUUID
     */
    viewEssentialByUUID: {
      name: "ViewEssentialByUUID",
      I: IdentifierUUID,
      O: QuotationRequest,
      kind: MethodKind.Unary,
    },
    /**
     * View all records with the given IDs
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewFromIDs
     */
    viewFromIDs: {
      name: "ViewFromIDs",
      I: IdentifiersList,
      O: QuotationsRequestsList,
      kind: MethodKind.Unary,
    },
    /**
     * View the ancillary parameters (UUIDs of the internal references) by UUID
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewAncillaryParametersByUUID
     */
    viewAncillaryParametersByUUID: {
      name: "ViewAncillaryParametersByUUID",
      I: IdentifierUUID,
      O: QuotationRequestAncillaryParameters,
      kind: MethodKind.Unary,
    },
    /**
     * View all
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveStatus,
      O: QuotationsRequestsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all with the given entity UUID
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewAllForEntityUUID
     */
    viewAllForEntityUUID: {
      name: "ViewAllForEntityUUID",
      I: IdentifierUUID,
      O: QuotationsRequestsList,
      kind: MethodKind.Unary,
    },
    /**
     * View with pagination
     *
     * @generated from rpc Scailo.QuotationsRequestsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: QuotationsRequestsServicePaginationReq,
      O: QuotationsRequestsServicePaginationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Download quotation request with the given IdentifierUUID (can be used to allow public downloads)
     *
     * @generated from rpc Scailo.QuotationsRequestsService.DownloadByUUID
     */
    downloadByUUID: {
      name: "DownloadByUUID",
      I: IdentifierUUID,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc Scailo.QuotationsRequestsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: QuotationsRequestsServiceSearchAllReq,
      O: QuotationsRequestsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Filter
     */
    filter: {
      name: "Filter",
      I: QuotationsRequestsServiceFilterReq,
      O: QuotationsRequestsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count in status
     *
     * @generated from rpc Scailo.QuotationsRequestsService.CountInStatus
     */
    countInStatus: {
      name: "CountInStatus",
      I: CountInSLCStatusRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count all that match the given criteria
     *
     * @generated from rpc Scailo.QuotationsRequestsService.Count
     */
    count: {
      name: "Count",
      I: QuotationsRequestsServiceCountReq,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CSV operations
     * Download the CSV file that consists of the list of records according to the given filter request. The same file could also be used as a template for uploading records
     *
     * @generated from rpc Scailo.QuotationsRequestsService.DownloadAsCSV
     */
    downloadAsCSV: {
      name: "DownloadAsCSV",
      I: QuotationsRequestsServiceFilterReq,
      O: StandardFile,
      kind: MethodKind.Unary,
    },
  }
} as const;

