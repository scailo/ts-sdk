// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file activities.scailo.proto (package Scailo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BOOL_FILTER, EmployeeMetadata, SORT_ORDER } from "./base.scailo_pb.js";

/**
 *
 * Describes the lifecycle status of each activity
 *
 * @generated from enum Scailo.ACTIVITY_LIFECYCLE
 */
export enum ACTIVITY_LIFECYCLE {
  /**
   * Used only in filters
   *
   * @generated from enum value: ACTIVITY_LIFECYCLE_ANY_UNSPECIFIED = 0;
   */
  ACTIVITY_LIFECYCLE_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the activity is open
   *
   * @generated from enum value: ACTIVITY_LIFECYCLE_OPEN = 1;
   */
  ACTIVITY_LIFECYCLE_OPEN = 1,

  /**
   * Denotes that the activity has completed
   *
   * @generated from enum value: ACTIVITY_LIFECYCLE_COMPLETED = 2;
   */
  ACTIVITY_LIFECYCLE_COMPLETED = 2,

  /**
   * Denotes that the activity has been cancelled
   *
   * @generated from enum value: ACTIVITY_LIFECYCLE_CANCELLED = 3;
   */
  ACTIVITY_LIFECYCLE_CANCELLED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ACTIVITY_LIFECYCLE)
proto3.util.setEnumType(ACTIVITY_LIFECYCLE, "Scailo.ACTIVITY_LIFECYCLE", [
  { no: 0, name: "ACTIVITY_LIFECYCLE_ANY_UNSPECIFIED" },
  { no: 1, name: "ACTIVITY_LIFECYCLE_OPEN" },
  { no: 2, name: "ACTIVITY_LIFECYCLE_COMPLETED" },
  { no: 3, name: "ACTIVITY_LIFECYCLE_CANCELLED" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.ACTIVITY_SORT_KEY
 */
export enum ACTIVITY_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: ACTIVITY_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  ACTIVITY_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: ACTIVITY_SORT_KEY_CREATED_AT = 1;
   */
  ACTIVITY_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: ACTIVITY_SORT_KEY_MODIFIED_AT = 2;
   */
  ACTIVITY_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the approver's completed on timestamp
   *
   * @generated from enum value: ACTIVITY_SORT_KEY_COMPLETED_ON = 6;
   */
  ACTIVITY_SORT_KEY_COMPLETED_ON = 6,

  /**
   * Fetch ordered results by the title
   *
   * @generated from enum value: ACTIVITY_SORT_KEY_TITLE = 10;
   */
  ACTIVITY_SORT_KEY_TITLE = 10,

  /**
   * Fetch ordered results by the start time
   *
   * @generated from enum value: ACTIVITY_SORT_KEY_STARTS_AT = 11;
   */
  ACTIVITY_SORT_KEY_STARTS_AT = 11,

  /**
   * Fetch ordered results by the due by time
   *
   * @generated from enum value: ACTIVITY_SORT_KEY_DUE_BY = 12;
   */
  ACTIVITY_SORT_KEY_DUE_BY = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(ACTIVITY_SORT_KEY)
proto3.util.setEnumType(ACTIVITY_SORT_KEY, "Scailo.ACTIVITY_SORT_KEY", [
  { no: 0, name: "ACTIVITY_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "ACTIVITY_SORT_KEY_CREATED_AT" },
  { no: 2, name: "ACTIVITY_SORT_KEY_MODIFIED_AT" },
  { no: 6, name: "ACTIVITY_SORT_KEY_COMPLETED_ON" },
  { no: 10, name: "ACTIVITY_SORT_KEY_TITLE" },
  { no: 11, name: "ACTIVITY_SORT_KEY_STARTS_AT" },
  { no: 12, name: "ACTIVITY_SORT_KEY_DUE_BY" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.ACTIVITY_ACTION_SORT_KEY
 */
export enum ACTIVITY_ACTION_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: ACTIVITY_ACTION_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  ACTIVITY_ACTION_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: ACTIVITY_ACTION_SORT_KEY_CREATED_AT = 1;
   */
  ACTIVITY_ACTION_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: ACTIVITY_ACTION_SORT_KEY_MODIFIED_AT = 2;
   */
  ACTIVITY_ACTION_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the title
   *
   * @generated from enum value: ACTIVITY_ACTION_SORT_KEY_TITLE = 10;
   */
  ACTIVITY_ACTION_SORT_KEY_TITLE = 10,

  /**
   * Fetch ordered results by the action code ID
   *
   * @generated from enum value: ACTIVITY_ACTION_SORT_KEY_ACTION_CODE_ID = 11;
   */
  ACTIVITY_ACTION_SORT_KEY_ACTION_CODE_ID = 11,

  /**
   * Fetch ordered results by the number of points
   *
   * @generated from enum value: ACTIVITY_ACTION_SORT_KEY_POINTS = 12;
   */
  ACTIVITY_ACTION_SORT_KEY_POINTS = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(ACTIVITY_ACTION_SORT_KEY)
proto3.util.setEnumType(ACTIVITY_ACTION_SORT_KEY, "Scailo.ACTIVITY_ACTION_SORT_KEY", [
  { no: 0, name: "ACTIVITY_ACTION_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "ACTIVITY_ACTION_SORT_KEY_CREATED_AT" },
  { no: 2, name: "ACTIVITY_ACTION_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "ACTIVITY_ACTION_SORT_KEY_TITLE" },
  { no: 11, name: "ACTIVITY_ACTION_SORT_KEY_ACTION_CODE_ID" },
  { no: 12, name: "ACTIVITY_ACTION_SORT_KEY_POINTS" },
]);

/**
 *
 * Describes the available sort keys
 *
 * @generated from enum Scailo.ACTIVITY_TIMER_SORT_KEY
 */
export enum ACTIVITY_TIMER_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: ACTIVITY_TIMER_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  ACTIVITY_TIMER_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: ACTIVITY_TIMER_SORT_KEY_CREATED_AT = 1;
   */
  ACTIVITY_TIMER_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: ACTIVITY_TIMER_SORT_KEY_MODIFIED_AT = 2;
   */
  ACTIVITY_TIMER_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by the activity ID
   *
   * @generated from enum value: ACTIVITY_TIMER_SORT_KEY_ACTIVITY_ID = 10;
   */
  ACTIVITY_TIMER_SORT_KEY_ACTIVITY_ID = 10,

  /**
   * Fetch ordered results by the activity action ID
   *
   * @generated from enum value: ACTIVITY_TIMER_SORT_KEY_ACTIVITY_ACTION_ID = 11;
   */
  ACTIVITY_TIMER_SORT_KEY_ACTIVITY_ACTION_ID = 11,

  /**
   * Fetch ordered results by the employee ID
   *
   * @generated from enum value: ACTIVITY_TIMER_SORT_KEY_EMPLOYEE_ID = 12;
   */
  ACTIVITY_TIMER_SORT_KEY_EMPLOYEE_ID = 12,

  /**
   * Fetch ordered results by the start timestamp
   *
   * @generated from enum value: ACTIVITY_TIMER_SORT_KEY_START_AT = 13;
   */
  ACTIVITY_TIMER_SORT_KEY_START_AT = 13,

  /**
   * Fetch ordered results by the end timestamp
   *
   * @generated from enum value: ACTIVITY_TIMER_SORT_KEY_END_AT = 14;
   */
  ACTIVITY_TIMER_SORT_KEY_END_AT = 14,

  /**
   * Fetch ordered results by the completion percentage
   *
   * @generated from enum value: ACTIVITY_TIMER_SORT_KEY_COMPLETION_PERCENTAGE = 15;
   */
  ACTIVITY_TIMER_SORT_KEY_COMPLETION_PERCENTAGE = 15,
}
// Retrieve enum metadata with: proto3.getEnumType(ACTIVITY_TIMER_SORT_KEY)
proto3.util.setEnumType(ACTIVITY_TIMER_SORT_KEY, "Scailo.ACTIVITY_TIMER_SORT_KEY", [
  { no: 0, name: "ACTIVITY_TIMER_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "ACTIVITY_TIMER_SORT_KEY_CREATED_AT" },
  { no: 2, name: "ACTIVITY_TIMER_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "ACTIVITY_TIMER_SORT_KEY_ACTIVITY_ID" },
  { no: 11, name: "ACTIVITY_TIMER_SORT_KEY_ACTIVITY_ACTION_ID" },
  { no: 12, name: "ACTIVITY_TIMER_SORT_KEY_EMPLOYEE_ID" },
  { no: 13, name: "ACTIVITY_TIMER_SORT_KEY_START_AT" },
  { no: 14, name: "ACTIVITY_TIMER_SORT_KEY_END_AT" },
  { no: 15, name: "ACTIVITY_TIMER_SORT_KEY_COMPLETION_PERCENTAGE" },
]);

/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object) with the operation being an activity lifecycle status
 *
 * @generated from message Scailo.LogbookLogActivityLC
 */
export class LogbookLogActivityLC extends Message<LogbookLogActivityLC> {
  /**
   * ID of the resource
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Stores if the resource is active
   *
   * @generated from field: bool is_active = 2;
   */
  isActive = false;

  /**
   * Stores the timestamp of when this resource was created
   *
   * @generated from field: uint64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  /**
   * The UUID of the resource
   *
   * @generated from field: string ref_uuid = 10;
   */
  refUuid = "";

  /**
   * The operation that was performed
   *
   * @generated from field: Scailo.ACTIVITY_LIFECYCLE operation = 11;
   */
  operation = ACTIVITY_LIFECYCLE.ACTIVITY_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The username of the user who performed this operation
   *
   * @generated from field: string username = 12;
   */
  username = "";

  /**
   * The name of the person who made this entry
   *
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * The ID of the user who made this entry
   *
   * @generated from field: uint64 user_id = 14;
   */
  userId = protoInt64.zero;

  /**
   * The comment generated by the application
   *
   * @generated from field: string app_comment = 15;
   */
  appComment = "";

  /**
   * The comment entered by the user
   *
   * @generated from field: string user_comment = 16;
   */
  userComment = "";

  constructor(data?: PartialMessage<LogbookLogActivityLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.LogbookLogActivityLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "operation", kind: "enum", T: proto3.getEnumType(ACTIVITY_LIFECYCLE) },
    { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogbookLogActivityLC {
    return new LogbookLogActivityLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogbookLogActivityLC {
    return new LogbookLogActivityLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogbookLogActivityLC {
    return new LogbookLogActivityLC().fromJsonString(jsonString, options);
  }

  static equals(a: LogbookLogActivityLC | PlainMessage<LogbookLogActivityLC> | undefined, b: LogbookLogActivityLC | PlainMessage<LogbookLogActivityLC> | undefined): boolean {
    return proto3.util.equals(LogbookLogActivityLC, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create a record
 *
 * @generated from message Scailo.ActivitiesServiceCreateRequest
 */
export class ActivitiesServiceCreateRequest extends Message<ActivitiesServiceCreateRequest> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 2;
   */
  userComment = "";

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated activity group ID
   *
   * @generated from field: uint64 activity_group_id = 8;
   */
  activityGroupId = protoInt64.zero;

  /**
   * The associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 9;
   */
  activityStatusId = protoInt64.zero;

  /**
   * The title of the activity
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The start UNIX timestamp
   *
   * @generated from field: uint64 starts_at = 11;
   */
  startsAt = protoInt64.zero;

  /**
   * The UNIX timestamp of when the activity needs to be completed
   *
   * @generated from field: uint64 due_by = 12;
   */
  dueBy = protoInt64.zero;

  /**
   * The description of the activity
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * Assign self (the user creating the activity) as an owner
   *
   * @generated from field: bool assign_self_as_owner = 80;
   */
  assignSelfAsOwner = false;

  /**
   * Assign self (the user creating the activity) as a supervisor
   *
   * @generated from field: bool assign_self_as_supervisor = 81;
   */
  assignSelfAsSupervisor = false;

  constructor(data?: PartialMessage<ActivitiesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "activity_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "starts_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "due_by", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 80, name: "assign_self_as_owner", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 81, name: "assign_self_as_supervisor", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceCreateRequest {
    return new ActivitiesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceCreateRequest {
    return new ActivitiesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceCreateRequest {
    return new ActivitiesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceCreateRequest | PlainMessage<ActivitiesServiceCreateRequest> | undefined, b: ActivitiesServiceCreateRequest | PlainMessage<ActivitiesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to update a record
 *
 * @generated from message Scailo.ActivitiesServiceUpdateRequest
 */
export class ActivitiesServiceUpdateRequest extends Message<ActivitiesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record that needs to be updated
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Optional boolean value that stores if a notification needs to be sent to users about the update to the record. This is useful when a subsequent operation needs to be performed immediately (such as send to verification after updating the revision)
   *
   * @generated from field: bool notify_users = 3;
   */
  notifyUsers = false;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated activity group ID
   *
   * @generated from field: uint64 activity_group_id = 8;
   */
  activityGroupId = protoInt64.zero;

  /**
   * The associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 9;
   */
  activityStatusId = protoInt64.zero;

  /**
   * The title of the activity
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The start UNIX timestamp
   *
   * @generated from field: uint64 starts_at = 11;
   */
  startsAt = protoInt64.zero;

  /**
   * The UNIX timestamp of when the activity needs to be completed
   *
   * @generated from field: uint64 due_by = 12;
   */
  dueBy = protoInt64.zero;

  /**
   * The description of the activity
   *
   * @generated from field: string description = 13;
   */
  description = "";

  constructor(data?: PartialMessage<ActivitiesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "notify_users", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "activity_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "starts_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "due_by", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceUpdateRequest {
    return new ActivitiesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceUpdateRequest {
    return new ActivitiesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceUpdateRequest {
    return new ActivitiesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceUpdateRequest | PlainMessage<ActivitiesServiceUpdateRequest> | undefined, b: ActivitiesServiceUpdateRequest | PlainMessage<ActivitiesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of a standard response
 *
 * @generated from message Scailo.Activity
 */
export class Activity extends Message<Activity> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this activity
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * The status of this activity
   *
   * @generated from field: Scailo.ACTIVITY_LIFECYCLE status = 4;
   */
  status = ACTIVITY_LIFECYCLE.ACTIVITY_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Stores the logs of every operation performed on this activity
   *
   * @generated from field: repeated Scailo.LogbookLogActivityLC logs = 5;
   */
  logs: LogbookLogActivityLC[] = [];

  /**
   * The timestamp of when this activity was marked as completed
   *
   * @generated from field: uint64 completed_on = 6;
   */
  completedOn = protoInt64.zero;

  /**
   * The associated vault folder ID
   *
   * @generated from field: uint64 vault_folder_id = 7;
   */
  vaultFolderId = protoInt64.zero;

  /**
   * The associated activity group ID
   *
   * @generated from field: uint64 activity_group_id = 8;
   */
  activityGroupId = protoInt64.zero;

  /**
   * The associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 9;
   */
  activityStatusId = protoInt64.zero;

  /**
   * The title of the activity
   *
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * The start UNIX timestamp
   *
   * @generated from field: uint64 starts_at = 11;
   */
  startsAt = protoInt64.zero;

  /**
   * The UNIX timestamp of when the activity needs to be completed
   *
   * @generated from field: uint64 due_by = 12;
   */
  dueBy = protoInt64.zero;

  /**
   * The description of the activity
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 50;
   */
  internalRef = "";

  constructor(data?: PartialMessage<Activity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.Activity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(ACTIVITY_LIFECYCLE) },
    { no: 5, name: "logs", kind: "message", T: LogbookLogActivityLC, repeated: true },
    { no: 6, name: "completed_on", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "vault_folder_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "activity_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "starts_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "due_by", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 50, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Activity {
    return new Activity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Activity {
    return new Activity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Activity {
    return new Activity().fromJsonString(jsonString, options);
  }

  static equals(a: Activity | PlainMessage<Activity> | undefined, b: Activity | PlainMessage<Activity> | undefined): boolean {
    return proto3.util.equals(Activity, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of records
 *
 * @generated from message Scailo.ActivitiesList
 */
export class ActivitiesList extends Message<ActivitiesList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.Activity list = 1;
   */
  list: Activity[] = [];

  constructor(data?: PartialMessage<ActivitiesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Activity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesList {
    return new ActivitiesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesList {
    return new ActivitiesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesList {
    return new ActivitiesList().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesList | PlainMessage<ActivitiesList> | undefined, b: ActivitiesList | PlainMessage<ActivitiesList> | undefined): boolean {
    return proto3.util.equals(ActivitiesList, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of an activity's statistics payload
 *
 * @generated from message Scailo.ActivityStatistics
 */
export class ActivityStatistics extends Message<ActivityStatistics> {
  /**
   * Stores the total amount of time spent on the activity
   *
   * @generated from field: uint64 total_duration = 1;
   */
  totalDuration = protoInt64.zero;

  /**
   * Stores the cumulative completion percentage of the activity
   *
   * @generated from field: uint64 total_completion_percentage = 2;
   */
  totalCompletionPercentage = protoInt64.zero;

  /**
   * Stores the total number of points
   *
   * @generated from field: uint64 total_points = 3;
   */
  totalPoints = protoInt64.zero;

  constructor(data?: PartialMessage<ActivityStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_duration", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total_completion_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total_points", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityStatistics {
    return new ActivityStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityStatistics {
    return new ActivityStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityStatistics {
    return new ActivityStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityStatistics | PlainMessage<ActivityStatistics> | undefined, b: ActivityStatistics | PlainMessage<ActivityStatistics> | undefined): boolean {
    return proto3.util.equals(ActivityStatistics, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message Scailo.ActivitiesServicePaginationReq
 */
export class ActivitiesServicePaginationReq extends Message<ActivitiesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.ACTIVITY_SORT_KEY sort_key = 5;
   */
  sortKey = ACTIVITY_SORT_KEY.ACTIVITY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The status of this activity
   *
   * @generated from field: Scailo.ACTIVITY_LIFECYCLE status = 6;
   */
  status = ACTIVITY_LIFECYCLE.ACTIVITY_LIFECYCLE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<ActivitiesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ACTIVITY_SORT_KEY) },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(ACTIVITY_LIFECYCLE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServicePaginationReq {
    return new ActivitiesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServicePaginationReq {
    return new ActivitiesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServicePaginationReq {
    return new ActivitiesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServicePaginationReq | PlainMessage<ActivitiesServicePaginationReq> | undefined, b: ActivitiesServicePaginationReq | PlainMessage<ActivitiesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(ActivitiesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the response to a pagination request
 *
 * @generated from message Scailo.ActivitiesServicePaginationResponse
 */
export class ActivitiesServicePaginationResponse extends Message<ActivitiesServicePaginationResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.Activity payload = 4;
   */
  payload: Activity[] = [];

  constructor(data?: PartialMessage<ActivitiesServicePaginationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServicePaginationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: Activity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServicePaginationResponse {
    return new ActivitiesServicePaginationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServicePaginationResponse {
    return new ActivitiesServicePaginationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServicePaginationResponse {
    return new ActivitiesServicePaginationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServicePaginationResponse | PlainMessage<ActivitiesServicePaginationResponse> | undefined, b: ActivitiesServicePaginationResponse | PlainMessage<ActivitiesServicePaginationResponse> | undefined): boolean {
    return proto3.util.equals(ActivitiesServicePaginationResponse, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message Scailo.ActivitiesServiceFilterReq
 */
export class ActivitiesServiceFilterReq extends Message<ActivitiesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.ACTIVITY_SORT_KEY sort_key = 5;
   */
  sortKey = ACTIVITY_SORT_KEY.ACTIVITY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this activity
   *
   * @generated from field: Scailo.ACTIVITY_LIFECYCLE status = 10;
   */
  status = ACTIVITY_LIFECYCLE.ACTIVITY_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 18;
   */
  internalRef = "";

  /**
   * The title of the activity
   *
   * @generated from field: string title = 20;
   */
  title = "";

  /**
   * The start range of "starts at"
   *
   * @generated from field: uint64 starts_at_start = 24;
   */
  startsAtStart = protoInt64.zero;

  /**
   * The end range of "starts at"
   *
   * @generated from field: uint64 starts_at_end = 25;
   */
  startsAtEnd = protoInt64.zero;

  /**
   * The start range of "due by"
   *
   * @generated from field: uint64 due_by_start = 26;
   */
  dueByStart = protoInt64.zero;

  /**
   * The end range of "due by"
   *
   * @generated from field: uint64 due_by_end = 27;
   */
  dueByEnd = protoInt64.zero;

  /**
   * Filter by the associated activity group ID
   *
   * @generated from field: uint64 activity_group_id = 40;
   */
  activityGroupId = protoInt64.zero;

  /**
   * Filter by the associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 41;
   */
  activityStatusId = protoInt64.zero;

  /**
   * ------------------------------------------------
   * Filter by the associated project ID
   *
   * @generated from field: uint64 project_id = 50;
   */
  projectId = protoInt64.zero;

  /**
   * Filter by the associated owner employee
   *
   * @generated from field: uint64 owner_employee_id = 51;
   */
  ownerEmployeeId = protoInt64.zero;

  /**
   * Filter by the associated supervisor employee
   *
   * @generated from field: uint64 supervisor_employee_id = 52;
   */
  supervisorEmployeeId = protoInt64.zero;

  /**
   * Filter by the associated goal
   *
   * @generated from field: uint64 goal_id = 53;
   */
  goalId = protoInt64.zero;

  /**
   * Filter by the associated action code
   *
   * @generated from field: uint64 action_code_id = 60;
   */
  actionCodeId = protoInt64.zero;

  /**
   * Filter by the associated activity tag
   *
   * ------------------------------------------------
   *
   * @generated from field: uint64 activity_tag_id = 70;
   */
  activityTagId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivitiesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ACTIVITY_SORT_KEY) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(ACTIVITY_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "starts_at_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "starts_at_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "due_by_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "due_by_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "activity_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 50, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "owner_employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "supervisor_employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 53, name: "goal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "action_code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 70, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceFilterReq {
    return new ActivitiesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceFilterReq {
    return new ActivitiesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceFilterReq {
    return new ActivitiesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceFilterReq | PlainMessage<ActivitiesServiceFilterReq> | undefined, b: ActivitiesServiceFilterReq | PlainMessage<ActivitiesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the base request payload of a count search
 *
 * @generated from message Scailo.ActivitiesServiceCountReq
 */
export class ActivitiesServiceCountReq extends Message<ActivitiesServiceCountReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_start = 101;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: uint64 creation_timestamp_end = 102;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The minimum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_start = 103;
   */
  modificationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by modification
   *
   * @generated from field: uint64 modification_timestamp_end = 104;
   */
  modificationTimestampEnd = protoInt64.zero;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The status of this activity
   *
   * @generated from field: Scailo.ACTIVITY_LIFECYCLE status = 10;
   */
  status = ACTIVITY_LIFECYCLE.ACTIVITY_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * The start range of completed timestamp
   *
   * @generated from field: uint64 completed_on_start = 15;
   */
  completedOnStart = protoInt64.zero;

  /**
   * The end range of completed timestamp
   *
   * @generated from field: uint64 completed_on_end = 16;
   */
  completedOnEnd = protoInt64.zero;

  /**
   * Stores the internal reference that is automatically generated
   *
   * @generated from field: string internal_ref = 18;
   */
  internalRef = "";

  /**
   * The title of the activity
   *
   * @generated from field: string title = 20;
   */
  title = "";

  /**
   * The start range of "starts at"
   *
   * @generated from field: uint64 starts_at_start = 24;
   */
  startsAtStart = protoInt64.zero;

  /**
   * The end range of "starts at"
   *
   * @generated from field: uint64 starts_at_end = 25;
   */
  startsAtEnd = protoInt64.zero;

  /**
   * The start range of "due by"
   *
   * @generated from field: uint64 due_by_start = 26;
   */
  dueByStart = protoInt64.zero;

  /**
   * The end range of "due by"
   *
   * @generated from field: uint64 due_by_end = 27;
   */
  dueByEnd = protoInt64.zero;

  /**
   * Filter by the associated activity group ID
   *
   * @generated from field: uint64 activity_group_id = 40;
   */
  activityGroupId = protoInt64.zero;

  /**
   * Filter by the associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 41;
   */
  activityStatusId = protoInt64.zero;

  /**
   * ------------------------------------------------
   * Filter by the associated project ID
   *
   * @generated from field: uint64 project_id = 50;
   */
  projectId = protoInt64.zero;

  /**
   * Filter by the associated owner employee
   *
   * @generated from field: uint64 owner_employee_id = 51;
   */
  ownerEmployeeId = protoInt64.zero;

  /**
   * Filter by the associated supervisor employee
   *
   * @generated from field: uint64 supervisor_employee_id = 52;
   */
  supervisorEmployeeId = protoInt64.zero;

  /**
   * Filter by the associated goal
   *
   * @generated from field: uint64 goal_id = 53;
   */
  goalId = protoInt64.zero;

  /**
   * Filter by the associated action code
   *
   * @generated from field: uint64 action_code_id = 60;
   */
  actionCodeId = protoInt64.zero;

  /**
   * Filter by the associated activity tag
   *
   * ------------------------------------------------
   *
   * @generated from field: uint64 activity_tag_id = 70;
   */
  activityTagId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivitiesServiceCountReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceCountReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 101, name: "creation_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 102, name: "creation_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 103, name: "modification_timestamp_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 104, name: "modification_timestamp_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(ACTIVITY_LIFECYCLE) },
    { no: 15, name: "completed_on_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completed_on_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "internal_ref", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "starts_at_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "starts_at_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "due_by_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "due_by_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "activity_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 50, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "owner_employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "supervisor_employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 53, name: "goal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "action_code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 70, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceCountReq {
    return new ActivitiesServiceCountReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceCountReq {
    return new ActivitiesServiceCountReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceCountReq {
    return new ActivitiesServiceCountReq().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceCountReq | PlainMessage<ActivitiesServiceCountReq> | undefined, b: ActivitiesServiceCountReq | PlainMessage<ActivitiesServiceCountReq> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceCountReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message Scailo.ActivitiesServiceSearchAllReq
 */
export class ActivitiesServiceSearchAllReq extends Message<ActivitiesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.ACTIVITY_SORT_KEY sort_key = 5;
   */
  sortKey = ACTIVITY_SORT_KEY.ACTIVITY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Limit the search space to the given status
   *
   * @generated from field: Scailo.ACTIVITY_LIFECYCLE status = 10;
   */
  status = ACTIVITY_LIFECYCLE.ACTIVITY_LIFECYCLE_ANY_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * Filter by the associated activity group ID
   *
   * @generated from field: uint64 activity_group_id = 40;
   */
  activityGroupId = protoInt64.zero;

  /**
   * Filter by the associated activity status ID
   *
   * @generated from field: uint64 activity_status_id = 41;
   */
  activityStatusId = protoInt64.zero;

  /**
   * ------------------------------------------------
   * Filter by the associated project ID
   *
   * @generated from field: uint64 project_id = 50;
   */
  projectId = protoInt64.zero;

  /**
   * Filter by the associated owner employee
   *
   * @generated from field: uint64 owner_employee_id = 51;
   */
  ownerEmployeeId = protoInt64.zero;

  /**
   * Filter by the associated supervisor employee
   *
   * @generated from field: uint64 supervisor_employee_id = 52;
   */
  supervisorEmployeeId = protoInt64.zero;

  /**
   * Filter by the associated goal
   *
   * @generated from field: uint64 goal_id = 53;
   */
  goalId = protoInt64.zero;

  /**
   * Filter by the associated action code
   *
   * @generated from field: uint64 action_code_id = 60;
   */
  actionCodeId = protoInt64.zero;

  /**
   * Filter by the associated activity tag
   *
   * ------------------------------------------------
   *
   * @generated from field: uint64 activity_tag_id = 70;
   */
  activityTagId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivitiesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ACTIVITY_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(ACTIVITY_LIFECYCLE) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "activity_group_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "activity_status_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 50, name: "project_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "owner_employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "supervisor_employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 53, name: "goal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 60, name: "action_code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 70, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceSearchAllReq {
    return new ActivitiesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceSearchAllReq {
    return new ActivitiesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceSearchAllReq {
    return new ActivitiesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceSearchAllReq | PlainMessage<ActivitiesServiceSearchAllReq> | undefined, b: ActivitiesServiceSearchAllReq | PlainMessage<ActivitiesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an action to an activity
 *
 * @generated from message Scailo.ActivitiesServiceActionCreateRequest
 */
export class ActivitiesServiceActionCreateRequest extends Message<ActivitiesServiceActionCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the optional employee ID
   *
   * @generated from field: uint64 employee_id = 9;
   */
  employeeId = protoInt64.zero;

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * The title of the action
   *
   * @generated from field: string title = 11;
   */
  title = "";

  /**
   * The content of the action
   *
   * @generated from field: string content = 12;
   */
  content = "";

  /**
   * Stores the action code ID
   *
   * @generated from field: uint64 action_code_id = 13;
   */
  actionCodeId = protoInt64.zero;

  /**
   * Stores the number of points assigned to this action (should be greater than 0)
   *
   * @generated from field: uint64 points = 14;
   */
  points = protoInt64.zero;

  constructor(data?: PartialMessage<ActivitiesServiceActionCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceActionCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "action_code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "points", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceActionCreateRequest {
    return new ActivitiesServiceActionCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceActionCreateRequest {
    return new ActivitiesServiceActionCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceActionCreateRequest {
    return new ActivitiesServiceActionCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceActionCreateRequest | PlainMessage<ActivitiesServiceActionCreateRequest> | undefined, b: ActivitiesServiceActionCreateRequest | PlainMessage<ActivitiesServiceActionCreateRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceActionCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters required to update an action in an activity
 *
 * @generated from message Scailo.ActivitiesServiceActionUpdateRequest
 */
export class ActivitiesServiceActionUpdateRequest extends Message<ActivitiesServiceActionUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Stores the optional employee ID
   *
   * @generated from field: uint64 employee_id = 9;
   */
  employeeId = protoInt64.zero;

  /**
   * The title of the action
   *
   * @generated from field: string title = 11;
   */
  title = "";

  /**
   * The content of the action
   *
   * @generated from field: string content = 12;
   */
  content = "";

  /**
   * Stores the action code ID
   *
   * @generated from field: uint64 action_code_id = 13;
   */
  actionCodeId = protoInt64.zero;

  /**
   * Stores the number of points assigned to this action (should be greater than 0)
   *
   * @generated from field: uint64 points = 14;
   */
  points = protoInt64.zero;

  constructor(data?: PartialMessage<ActivitiesServiceActionUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceActionUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "action_code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "points", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceActionUpdateRequest {
    return new ActivitiesServiceActionUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceActionUpdateRequest {
    return new ActivitiesServiceActionUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceActionUpdateRequest {
    return new ActivitiesServiceActionUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceActionUpdateRequest | PlainMessage<ActivitiesServiceActionUpdateRequest> | undefined, b: ActivitiesServiceActionUpdateRequest | PlainMessage<ActivitiesServiceActionUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceActionUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an action associated to an activity
 *
 * @generated from message Scailo.ActivityAction
 */
export class ActivityAction extends Message<ActivityAction> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this activity
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the optional employee ID
   *
   * @generated from field: uint64 employee_id = 9;
   */
  employeeId = protoInt64.zero;

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * The title of the action
   *
   * @generated from field: string title = 11;
   */
  title = "";

  /**
   * The content of the action
   *
   * @generated from field: string content = 12;
   */
  content = "";

  /**
   * Stores the action code ID
   *
   * @generated from field: uint64 action_code_id = 13;
   */
  actionCodeId = protoInt64.zero;

  /**
   * Stores the number of points assigned to this action
   *
   * @generated from field: uint64 points = 14;
   */
  points = protoInt64.zero;

  constructor(data?: PartialMessage<ActivityAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "action_code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "points", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityAction {
    return new ActivityAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityAction {
    return new ActivityAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityAction {
    return new ActivityAction().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityAction | PlainMessage<ActivityAction> | undefined, b: ActivityAction | PlainMessage<ActivityAction> | undefined): boolean {
    return proto3.util.equals(ActivityAction, a, b);
  }
}

/**
 *
 * Describes the parameters that are part of an activity action's statistics payload
 *
 * @generated from message Scailo.ActivityActionStatistics
 */
export class ActivityActionStatistics extends Message<ActivityActionStatistics> {
  /**
   * Stores the total amount of time spent on the activity action
   *
   * @generated from field: uint64 total_duration = 1;
   */
  totalDuration = protoInt64.zero;

  /**
   * Stores the cumulative completion percentage of the activity action
   *
   * @generated from field: uint64 total_completion_percentage = 2;
   */
  totalCompletionPercentage = protoInt64.zero;

  constructor(data?: PartialMessage<ActivityActionStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityActionStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_duration", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "total_completion_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityActionStatistics {
    return new ActivityActionStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityActionStatistics {
    return new ActivityActionStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityActionStatistics {
    return new ActivityActionStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityActionStatistics | PlainMessage<ActivityActionStatistics> | undefined, b: ActivityActionStatistics | PlainMessage<ActivityActionStatistics> | undefined): boolean {
    return proto3.util.equals(ActivityActionStatistics, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of activity actions
 *
 * @generated from message Scailo.ActivityActionsList
 */
export class ActivityActionsList extends Message<ActivityActionsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ActivityAction list = 1;
   */
  list: ActivityAction[] = [];

  constructor(data?: PartialMessage<ActivityActionsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityActionsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ActivityAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityActionsList {
    return new ActivityActionsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityActionsList {
    return new ActivityActionsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityActionsList {
    return new ActivityActionsList().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityActionsList | PlainMessage<ActivityActionsList> | undefined, b: ActivityActionsList | PlainMessage<ActivityActionsList> | undefined): boolean {
    return proto3.util.equals(ActivityActionsList, a, b);
  }
}

/**
 *
 * Describes the parameters that are required to retrieve the history of the record
 *
 * @generated from message Scailo.ActivityActionHistoryRequest
 */
export class ActivityActionHistoryRequest extends Message<ActivityActionHistoryRequest> {
  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the action code ID
   *
   * @generated from field: uint64 action_code_id = 13;
   */
  actionCodeId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivityActionHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityActionHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "action_code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityActionHistoryRequest {
    return new ActivityActionHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityActionHistoryRequest {
    return new ActivityActionHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityActionHistoryRequest {
    return new ActivityActionHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityActionHistoryRequest | PlainMessage<ActivityActionHistoryRequest> | undefined, b: ActivityActionHistoryRequest | PlainMessage<ActivityActionHistoryRequest> | undefined): boolean {
    return proto3.util.equals(ActivityActionHistoryRequest, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve actions.
 *
 * @generated from message Scailo.ActivityActionsSearchRequest
 */
export class ActivityActionsSearchRequest extends Message<ActivityActionsSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.ACTIVITY_ACTION_SORT_KEY sort_key = 5;
   */
  sortKey = ACTIVITY_ACTION_SORT_KEY.ACTIVITY_ACTION_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Stores the optional employee ID
   *
   * @generated from field: uint64 employee_id = 9;
   */
  employeeId = protoInt64.zero;

  /**
   * The ID of the activity
   *
   * @generated from field: uint64 activity_id = 20;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the action code ID
   *
   * @generated from field: uint64 action_code_id = 23;
   */
  actionCodeId = protoInt64.zero;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<ActivityActionsSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityActionsSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ACTIVITY_ACTION_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "action_code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityActionsSearchRequest {
    return new ActivityActionsSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityActionsSearchRequest {
    return new ActivityActionsSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityActionsSearchRequest {
    return new ActivityActionsSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityActionsSearchRequest | PlainMessage<ActivityActionsSearchRequest> | undefined, b: ActivityActionsSearchRequest | PlainMessage<ActivityActionsSearchRequest> | undefined): boolean {
    return proto3.util.equals(ActivityActionsSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination actions request
 *
 * @generated from message Scailo.ActivitiesServicePaginatedActionsResponse
 */
export class ActivitiesServicePaginatedActionsResponse extends Message<ActivitiesServicePaginatedActionsResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.ActivityAction payload = 4;
   */
  payload: ActivityAction[] = [];

  constructor(data?: PartialMessage<ActivitiesServicePaginatedActionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServicePaginatedActionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: ActivityAction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServicePaginatedActionsResponse {
    return new ActivitiesServicePaginatedActionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServicePaginatedActionsResponse {
    return new ActivitiesServicePaginatedActionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServicePaginatedActionsResponse {
    return new ActivitiesServicePaginatedActionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServicePaginatedActionsResponse | PlainMessage<ActivitiesServicePaginatedActionsResponse> | undefined, b: ActivitiesServicePaginatedActionsResponse | PlainMessage<ActivitiesServicePaginatedActionsResponse> | undefined): boolean {
    return proto3.util.equals(ActivitiesServicePaginatedActionsResponse, a, b);
  }
}

/**
 *
 * Describes the parameters required to add an action along with an activity timer
 *
 * @generated from message Scailo.ActivitiesServiceActionWithTimerCreateRequest
 */
export class ActivitiesServiceActionWithTimerCreateRequest extends Message<ActivitiesServiceActionWithTimerCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the optional goal ID
   *
   * @generated from field: uint64 goal_id = 11;
   */
  goalId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 12;
   */
  employeeId = protoInt64.zero;

  /**
   * Stores the number of points assigned to this action (should be greater than 0)
   *
   * @generated from field: uint64 points = 13;
   */
  points = protoInt64.zero;

  /**
   * Stores the start time
   *
   * @generated from field: uint64 start_at = 14;
   */
  startAt = protoInt64.zero;

  /**
   * Stores the end time (can be 0)
   *
   * @generated from field: uint64 end_at = 15;
   */
  endAt = protoInt64.zero;

  /**
   * Stores the cumulative completion percentage (this will be diffed at the API and stored only as a diff. E.g., if this is set to 4000, and the cumulative percentage for the same action has been 3500, then the API would store this as 500)
   *
   * @generated from field: uint64 completion_percentage = 16;
   */
  completionPercentage = protoInt64.zero;

  /**
   * Stores the action code ID
   *
   * @generated from field: uint64 action_code_id = 17;
   */
  actionCodeId = protoInt64.zero;

  /**
   * The title of the action
   *
   * @generated from field: string title = 20;
   */
  title = "";

  /**
   * The content of the action
   *
   * @generated from field: string content = 21;
   */
  content = "";

  constructor(data?: PartialMessage<ActivitiesServiceActionWithTimerCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceActionWithTimerCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "goal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "points", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "start_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "end_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completion_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "action_code_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceActionWithTimerCreateRequest {
    return new ActivitiesServiceActionWithTimerCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceActionWithTimerCreateRequest {
    return new ActivitiesServiceActionWithTimerCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceActionWithTimerCreateRequest {
    return new ActivitiesServiceActionWithTimerCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceActionWithTimerCreateRequest | PlainMessage<ActivitiesServiceActionWithTimerCreateRequest> | undefined, b: ActivitiesServiceActionWithTimerCreateRequest | PlainMessage<ActivitiesServiceActionWithTimerCreateRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceActionWithTimerCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create an activity tag association
 *
 * @generated from message Scailo.ActivitiesServiceActivityTagAssociationCreateRequest
 */
export class ActivitiesServiceActivityTagAssociationCreateRequest extends Message<ActivitiesServiceActivityTagAssociationCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the activity tag ID
   *
   * @generated from field: uint64 activity_tag_id = 11;
   */
  activityTagId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivitiesServiceActivityTagAssociationCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceActivityTagAssociationCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceActivityTagAssociationCreateRequest {
    return new ActivitiesServiceActivityTagAssociationCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceActivityTagAssociationCreateRequest {
    return new ActivitiesServiceActivityTagAssociationCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceActivityTagAssociationCreateRequest {
    return new ActivitiesServiceActivityTagAssociationCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceActivityTagAssociationCreateRequest | PlainMessage<ActivitiesServiceActivityTagAssociationCreateRequest> | undefined, b: ActivitiesServiceActivityTagAssociationCreateRequest | PlainMessage<ActivitiesServiceActivityTagAssociationCreateRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceActivityTagAssociationCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an activity tag association
 *
 * @generated from message Scailo.ActivityTagAssociation
 */
export class ActivityTagAssociation extends Message<ActivityTagAssociation> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this activity
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the activity tag ID
   *
   * @generated from field: uint64 activity_tag_id = 11;
   */
  activityTagId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivityTagAssociation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityTagAssociation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "activity_tag_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityTagAssociation {
    return new ActivityTagAssociation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityTagAssociation {
    return new ActivityTagAssociation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityTagAssociation {
    return new ActivityTagAssociation().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityTagAssociation | PlainMessage<ActivityTagAssociation> | undefined, b: ActivityTagAssociation | PlainMessage<ActivityTagAssociation> | undefined): boolean {
    return proto3.util.equals(ActivityTagAssociation, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of activity tag associations
 *
 * @generated from message Scailo.ActivityTagAssociationsList
 */
export class ActivityTagAssociationsList extends Message<ActivityTagAssociationsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ActivityTagAssociation list = 1;
   */
  list: ActivityTagAssociation[] = [];

  constructor(data?: PartialMessage<ActivityTagAssociationsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityTagAssociationsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ActivityTagAssociation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityTagAssociationsList {
    return new ActivityTagAssociationsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityTagAssociationsList {
    return new ActivityTagAssociationsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityTagAssociationsList {
    return new ActivityTagAssociationsList().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityTagAssociationsList | PlainMessage<ActivityTagAssociationsList> | undefined, b: ActivityTagAssociationsList | PlainMessage<ActivityTagAssociationsList> | undefined): boolean {
    return proto3.util.equals(ActivityTagAssociationsList, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create an activity owner
 *
 * @generated from message Scailo.ActivitiesServiceOwnerCreateRequest
 */
export class ActivitiesServiceOwnerCreateRequest extends Message<ActivitiesServiceOwnerCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 11;
   */
  employeeId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivitiesServiceOwnerCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceOwnerCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceOwnerCreateRequest {
    return new ActivitiesServiceOwnerCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceOwnerCreateRequest {
    return new ActivitiesServiceOwnerCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceOwnerCreateRequest {
    return new ActivitiesServiceOwnerCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceOwnerCreateRequest | PlainMessage<ActivitiesServiceOwnerCreateRequest> | undefined, b: ActivitiesServiceOwnerCreateRequest | PlainMessage<ActivitiesServiceOwnerCreateRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceOwnerCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an activity owner
 *
 * @generated from message Scailo.ActivityOwner
 */
export class ActivityOwner extends Message<ActivityOwner> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this activity
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 11;
   */
  employeeId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivityOwner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityOwner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityOwner {
    return new ActivityOwner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityOwner {
    return new ActivityOwner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityOwner {
    return new ActivityOwner().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityOwner | PlainMessage<ActivityOwner> | undefined, b: ActivityOwner | PlainMessage<ActivityOwner> | undefined): boolean {
    return proto3.util.equals(ActivityOwner, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of activity owners
 *
 * @generated from message Scailo.ActivityOwnersList
 */
export class ActivityOwnersList extends Message<ActivityOwnersList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ActivityOwner list = 1;
   */
  list: ActivityOwner[] = [];

  constructor(data?: PartialMessage<ActivityOwnersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityOwnersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ActivityOwner, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityOwnersList {
    return new ActivityOwnersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityOwnersList {
    return new ActivityOwnersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityOwnersList {
    return new ActivityOwnersList().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityOwnersList | PlainMessage<ActivityOwnersList> | undefined, b: ActivityOwnersList | PlainMessage<ActivityOwnersList> | undefined): boolean {
    return proto3.util.equals(ActivityOwnersList, a, b);
  }
}

/**
 *
 * Describes the data model to handle importing of employees from the given identifier representing a team or a department
 *
 * @generated from message Scailo.ActivitiesServiceImportOwnersRequest
 */
export class ActivitiesServiceImportOwnersRequest extends Message<ActivitiesServiceImportOwnersRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the activity
   *
   * @generated from field: uint64 activity_id = 2;
   */
  activityId = protoInt64.zero;

  /**
   * The ID of the team or the department from which employees need to be added to the activity
   *
   * @generated from field: uint64 resource_id = 3;
   */
  resourceId = protoInt64.zero;

  /**
   * Stores if the existing employees in the activity need to be deleted before adding from the source record
   *
   * @generated from field: bool delete_existing = 4;
   */
  deleteExisting = false;

  constructor(data?: PartialMessage<ActivitiesServiceImportOwnersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceImportOwnersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "resource_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "delete_existing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceImportOwnersRequest {
    return new ActivitiesServiceImportOwnersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceImportOwnersRequest {
    return new ActivitiesServiceImportOwnersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceImportOwnersRequest {
    return new ActivitiesServiceImportOwnersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceImportOwnersRequest | PlainMessage<ActivitiesServiceImportOwnersRequest> | undefined, b: ActivitiesServiceImportOwnersRequest | PlainMessage<ActivitiesServiceImportOwnersRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceImportOwnersRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create an activity supervisor
 *
 * @generated from message Scailo.ActivitiesServiceSupervisorCreateRequest
 */
export class ActivitiesServiceSupervisorCreateRequest extends Message<ActivitiesServiceSupervisorCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 11;
   */
  employeeId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivitiesServiceSupervisorCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceSupervisorCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceSupervisorCreateRequest {
    return new ActivitiesServiceSupervisorCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceSupervisorCreateRequest {
    return new ActivitiesServiceSupervisorCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceSupervisorCreateRequest {
    return new ActivitiesServiceSupervisorCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceSupervisorCreateRequest | PlainMessage<ActivitiesServiceSupervisorCreateRequest> | undefined, b: ActivitiesServiceSupervisorCreateRequest | PlainMessage<ActivitiesServiceSupervisorCreateRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceSupervisorCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an activity supervisor
 *
 * @generated from message Scailo.ActivitySupervisor
 */
export class ActivitySupervisor extends Message<ActivitySupervisor> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this activity
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 11;
   */
  employeeId = protoInt64.zero;

  constructor(data?: PartialMessage<ActivitySupervisor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitySupervisor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitySupervisor {
    return new ActivitySupervisor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitySupervisor {
    return new ActivitySupervisor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitySupervisor {
    return new ActivitySupervisor().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitySupervisor | PlainMessage<ActivitySupervisor> | undefined, b: ActivitySupervisor | PlainMessage<ActivitySupervisor> | undefined): boolean {
    return proto3.util.equals(ActivitySupervisor, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of activity supervisors
 *
 * @generated from message Scailo.ActivitySupervisorsList
 */
export class ActivitySupervisorsList extends Message<ActivitySupervisorsList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ActivitySupervisor list = 1;
   */
  list: ActivitySupervisor[] = [];

  constructor(data?: PartialMessage<ActivitySupervisorsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitySupervisorsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ActivitySupervisor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitySupervisorsList {
    return new ActivitySupervisorsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitySupervisorsList {
    return new ActivitySupervisorsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitySupervisorsList {
    return new ActivitySupervisorsList().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitySupervisorsList | PlainMessage<ActivitySupervisorsList> | undefined, b: ActivitySupervisorsList | PlainMessage<ActivitySupervisorsList> | undefined): boolean {
    return proto3.util.equals(ActivitySupervisorsList, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to create an activity timer
 *
 * @generated from message Scailo.ActivitiesServiceTimerCreateRequest
 */
export class ActivitiesServiceTimerCreateRequest extends Message<ActivitiesServiceTimerCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * Stores the activity action ID
   *
   * @generated from field: uint64 activity_action_id = 11;
   */
  activityActionId = protoInt64.zero;

  /**
   * Stores the optional goal ID
   *
   * @generated from field: uint64 goal_id = 12;
   */
  goalId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 13;
   */
  employeeId = protoInt64.zero;

  /**
   * Stores the start time
   *
   * @generated from field: uint64 start_at = 14;
   */
  startAt = protoInt64.zero;

  /**
   * Stores the end time (can be 0)
   *
   * @generated from field: uint64 end_at = 15;
   */
  endAt = protoInt64.zero;

  /**
   * Stores the cumulative completion percentage (this will be diffed at the API and stored only as a diff. E.g., if this is set to 4000, and the cumulative percentage for the same action has been 3500, then the API would store this as 500)
   *
   * @generated from field: uint64 completion_percentage = 16;
   */
  completionPercentage = protoInt64.zero;

  /**
   * The description of the timer
   *
   * @generated from field: string description = 17;
   */
  description = "";

  constructor(data?: PartialMessage<ActivitiesServiceTimerCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceTimerCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "activity_action_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "goal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "start_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "end_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completion_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceTimerCreateRequest {
    return new ActivitiesServiceTimerCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceTimerCreateRequest {
    return new ActivitiesServiceTimerCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceTimerCreateRequest {
    return new ActivitiesServiceTimerCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceTimerCreateRequest | PlainMessage<ActivitiesServiceTimerCreateRequest> | undefined, b: ActivitiesServiceTimerCreateRequest | PlainMessage<ActivitiesServiceTimerCreateRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceTimerCreateRequest, a, b);
  }
}

/**
 *
 * Describes the parameters necessary to end an activity timer
 *
 * @generated from message Scailo.ActivitiesServiceTimerEndRequest
 */
export class ActivitiesServiceTimerEndRequest extends Message<ActivitiesServiceTimerEndRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The ID of the record
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Stores the optional goal ID
   *
   * @generated from field: uint64 goal_id = 12;
   */
  goalId = protoInt64.zero;

  /**
   * Stores the end time
   *
   * @generated from field: uint64 end_at = 15;
   */
  endAt = protoInt64.zero;

  /**
   * Stores the cumulative completion percentage (this will be diffed at the API and stored only as a diff. E.g., if this is set to 4000, and the cumulative percentage for the same action has been 3500, then the API would store this as 500)
   *
   * @generated from field: uint64 completion_percentage = 16;
   */
  completionPercentage = protoInt64.zero;

  /**
   * The description of the timer
   *
   * @generated from field: string description = 17;
   */
  description = "";

  constructor(data?: PartialMessage<ActivitiesServiceTimerEndRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServiceTimerEndRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "goal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "end_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completion_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServiceTimerEndRequest {
    return new ActivitiesServiceTimerEndRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServiceTimerEndRequest {
    return new ActivitiesServiceTimerEndRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServiceTimerEndRequest {
    return new ActivitiesServiceTimerEndRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServiceTimerEndRequest | PlainMessage<ActivitiesServiceTimerEndRequest> | undefined, b: ActivitiesServiceTimerEndRequest | PlainMessage<ActivitiesServiceTimerEndRequest> | undefined): boolean {
    return proto3.util.equals(ActivitiesServiceTimerEndRequest, a, b);
  }
}

/**
 *
 * Describes the parameters that constitute an activity timer
 *
 * @generated from message Scailo.ActivityTimer
 */
export class ActivityTimer extends Message<ActivityTimer> {
  /**
   * Stores a globally unique entity UUID. This will be set at the organization level
   *
   * @generated from field: string entity_uuid = 1;
   */
  entityUuid = "";

  /**
   * Stores the metadata of this activity
   *
   * @generated from field: Scailo.EmployeeMetadata metadata = 2;
   */
  metadata?: EmployeeMetadata;

  /**
   * Stores any comment that the user might have added during an operation
   *
   * @generated from field: string user_comment = 5;
   */
  userComment = "";

  /**
   * Stores the activity ID
   *
   * @generated from field: uint64 activity_id = 10;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the activity action ID
   *
   * @generated from field: uint64 activity_action_id = 11;
   */
  activityActionId = protoInt64.zero;

  /**
   * Stores the optional goal ID
   *
   * @generated from field: uint64 goal_id = 12;
   */
  goalId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 13;
   */
  employeeId = protoInt64.zero;

  /**
   * Stores the start time
   *
   * @generated from field: uint64 start_at = 14;
   */
  startAt = protoInt64.zero;

  /**
   * Stores the end time
   *
   * @generated from field: uint64 end_at = 15;
   */
  endAt = protoInt64.zero;

  /**
   * Stores the cumulative completion percentage (this will be diffed at the API and stored only as a diff. E.g., if this is set to 4000, and the cumulative percentage for the same action has been 3500, then the API would store this as 500)
   *
   * @generated from field: uint64 completion_percentage = 16;
   */
  completionPercentage = protoInt64.zero;

  /**
   * The description of the timer
   *
   * @generated from field: string description = 17;
   */
  description = "";

  constructor(data?: PartialMessage<ActivityTimer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityTimer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: EmployeeMetadata },
    { no: 5, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "activity_action_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "goal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "start_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "end_at", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "completion_percentage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityTimer {
    return new ActivityTimer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityTimer {
    return new ActivityTimer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityTimer {
    return new ActivityTimer().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityTimer | PlainMessage<ActivityTimer> | undefined, b: ActivityTimer | PlainMessage<ActivityTimer> | undefined): boolean {
    return proto3.util.equals(ActivityTimer, a, b);
  }
}

/**
 *
 * Describes the message consisting of the list of activity timers
 *
 * @generated from message Scailo.ActivityTimersList
 */
export class ActivityTimersList extends Message<ActivityTimersList> {
  /**
   * List of records
   *
   * @generated from field: repeated Scailo.ActivityTimer list = 1;
   */
  list: ActivityTimer[] = [];

  constructor(data?: PartialMessage<ActivityTimersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityTimersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ActivityTimer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityTimersList {
    return new ActivityTimersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityTimersList {
    return new ActivityTimersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityTimersList {
    return new ActivityTimersList().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityTimersList | PlainMessage<ActivityTimersList> | undefined, b: ActivityTimersList | PlainMessage<ActivityTimersList> | undefined): boolean {
    return proto3.util.equals(ActivityTimersList, a, b);
  }
}

/**
 *
 * Describes the request payload to retrieve timers.
 *
 * @generated from message Scailo.ActivityTimersSearchRequest
 */
export class ActivityTimersSearchRequest extends Message<ActivityTimersSearchRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: Scailo.BOOL_FILTER is_active = 1;
   */
  isActive = BOOL_FILTER.BOOL_FILTER_ANY_UNSPECIFIED;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: Scailo.ACTIVITY_TIMER_SORT_KEY sort_key = 5;
   */
  sortKey = ACTIVITY_TIMER_SORT_KEY.ACTIVITY_TIMER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The entity UUID that is to be used to filter records
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * The ID of the activity
   *
   * @generated from field: uint64 activity_id = 20;
   */
  activityId = protoInt64.zero;

  /**
   * Stores the activity action ID
   *
   * @generated from field: uint64 activity_action_id = 21;
   */
  activityActionId = protoInt64.zero;

  /**
   * Stores the optional goal ID
   *
   * @generated from field: uint64 goal_id = 22;
   */
  goalId = protoInt64.zero;

  /**
   * Stores the employee ID
   *
   * @generated from field: uint64 employee_id = 23;
   */
  employeeId = protoInt64.zero;

  /**
   * The start range of "starts at"
   *
   * @generated from field: uint64 starts_at_start = 24;
   */
  startsAtStart = protoInt64.zero;

  /**
   * The end range of "starts at"
   *
   * @generated from field: uint64 starts_at_end = 25;
   */
  startsAtEnd = protoInt64.zero;

  /**
   * The start range of "ends at"
   *
   * @generated from field: uint64 ends_at_start = 26;
   */
  endsAtStart = protoInt64.zero;

  /**
   * The end range of "ends at"
   *
   * @generated from field: uint64 ends_at_end = 27;
   */
  endsAtEnd = protoInt64.zero;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 40;
   */
  searchKey = "";

  constructor(data?: PartialMessage<ActivityTimersSearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivityTimersSearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "enum", T: proto3.getEnumType(BOOL_FILTER) },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ACTIVITY_TIMER_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "activity_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "activity_action_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "goal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "employee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 24, name: "starts_at_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "starts_at_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "ends_at_start", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "ends_at_end", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityTimersSearchRequest {
    return new ActivityTimersSearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityTimersSearchRequest {
    return new ActivityTimersSearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityTimersSearchRequest {
    return new ActivityTimersSearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityTimersSearchRequest | PlainMessage<ActivityTimersSearchRequest> | undefined, b: ActivityTimersSearchRequest | PlainMessage<ActivityTimersSearchRequest> | undefined): boolean {
    return proto3.util.equals(ActivityTimersSearchRequest, a, b);
  }
}

/**
 *
 * Describes the response to a pagination timers request
 *
 * @generated from message Scailo.ActivitiesServicePaginatedTimersResponse
 */
export class ActivitiesServicePaginatedTimersResponse extends Message<ActivitiesServicePaginatedTimersResponse> {
  /**
   * The number of records in this payload
   *
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The number that has been offset before fetching the records. This is the same value that has been sent as part of the pagination request
   *
   * @generated from field: uint64 offset = 2;
   */
  offset = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: uint64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated Scailo.ActivityTimer payload = 4;
   */
  payload: ActivityTimer[] = [];

  constructor(data?: PartialMessage<ActivitiesServicePaginatedTimersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Scailo.ActivitiesServicePaginatedTimersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payload", kind: "message", T: ActivityTimer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivitiesServicePaginatedTimersResponse {
    return new ActivitiesServicePaginatedTimersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivitiesServicePaginatedTimersResponse {
    return new ActivitiesServicePaginatedTimersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivitiesServicePaginatedTimersResponse {
    return new ActivitiesServicePaginatedTimersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActivitiesServicePaginatedTimersResponse | PlainMessage<ActivitiesServicePaginatedTimersResponse> | undefined, b: ActivitiesServicePaginatedTimersResponse | PlainMessage<ActivitiesServicePaginatedTimersResponse> | undefined): boolean {
    return proto3.util.equals(ActivitiesServicePaginatedTimersResponse, a, b);
  }
}

